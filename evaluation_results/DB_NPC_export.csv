email,file_name,code,model_choice,probability_chatgpt,probability_human,classification,explanation,feedback
kanoksak.wat@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**
The model predicts the target source code as ChatGPT-generated with 100% probability. The classification is likely influenced by several factors: the use of well-structured and standardized comments, variable naming conventions, and the overall code organization. These features are typical of AI-generated code, which often follows consistent patterns and lacks the idiosyncrasies or stylistic variations found in human-written code. The use of helper methods like `calculateDaysBetweenDates` and `isLeapYear`, which encapsulate specific functionalities, is also indicative of ChatGPT's coding style, as it tends to modularize code for clarity and reusability.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:**
   ```java
   // Parse the check-in and check-out dates into individual components
   String[] checkInDateParts = checkInDate.split(""-"");
   ```
   - **Explanation:** This line demonstrates a straightforward and clear approach to parsing dates, which is characteristic of AI-generated code. The use of `split(""-"")` is a common pattern for handling string operations in a clean and efficient manner, reflecting the systematic nature of AI-generated solutions.

2. **Code Line:**
   ```java
   int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);
   ```
   - **Explanation:** The use of a helper method `calculateDaysBetweenDates` to compute the number of nights shows a modular approach, typical of AI-generated code. This modularization enhances readability and reusability, which are often prioritized in AI-generated solutions.

3. **Code Line:**
   ```java
   System.out.println(""\n** No STAR Hotel **"");
   ```
   - **Explanation:** The inclusion of a formatted string with specific branding (""** No STAR Hotel **"") is a style that suggests a generic and templated output, which is a common characteristic of AI-generated code that tends to use placeholders or generic names.

4. **Code Line:**
   ```java
   public static boolean isLeapYear(int year) {
       return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   }
   ```
   - **Explanation:** This helper method is a classic example of a utility function that performs a specific task. AI-generated code frequently includes such utility methods to handle common calculations or checks, demonstrating a systematic approach to problem-solving.

5. **Code Line:**
   ```java
   System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));
   ```
   - **Explanation:** The use of `String.format(""%.2f"", totalRent)` for formatting the output to two decimal places is a precise and consistent pattern often found in AI-generated code, reflecting an emphasis on producing clean and formatted outputs.

**Comparison to Previous Examples**

- **Target Code vs. ChatGPT-generated Example 1:**
  - **Target Code:**
    ```java
    int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);
    ```
  - **Example 1:**
    ```java
    double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);
    ```
  - **Comparison:** Both snippets employ mathematical calculations encapsulated within a method or formula. The target code uses a helper method, a common AI-generated pattern, while Example 1 directly calculates a value, showing a similar level of abstraction and clarity.

- **Target Code vs. ChatGPT-generated Example 2:**
  - **Target Code:**
    ```java
    String[] checkInDateParts = checkInDate.split(""-"");
    ```
  - **Example 2:**
    ```java
    double monthlyInterestRate = annualInterestRate / 1200.0;
    ```
  - **Comparison:** Both lines demonstrate straightforward operations (splitting strings, calculating rates) that are typical of AI-generated code, emphasizing clear and efficient solutions.

- **Target Code vs. Human-written Example 1:**
  - **Target Code:**
    ```java
    System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));
    ```
  - **Example 1:**
    ```java
    System.out.printf(""Accumulated Value is $%.2f"", investmentAmount * Math.pow(monthInterestRate + 1, years));
    ```
  - **Comparison:** While both use formatted output, the human-written example uses `printf` instead of `String.format`, showcasing a slight stylistic difference. AI-generated code often prefers consistent patterns like `String.format`.

- **Target Code vs. Human-written Example 2:**
  - **Target Code:**
    ```java
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
    ```
  - **Example 2:**
    ```java
    for (int i = 1; i <= numberOfMonths; i++) {
        total = (investment + total) * (1 + (interestRate / 12));
    }
    ```
  - **Comparison:** The target code's utility method contrasts with the human-written example's inline loop calculation. AI-generated code often separates logic into reusable methods, unlike the more integrated approach seen in human-written examples.

These comparisons highlight the systematic and modular characteristics of the target code, aligning it more closely with ChatGPT-generated examples and justifying the classification decision.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 4, 47, 17, 643000)}"
kanoksak.wat@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written can be attributed primarily to the presence of certain characteristics typically associated with human coding styles. These include verbose and explicit print statements for debugging and visualization, a straightforward implementation of a sorting algorithm, and a lack of excessive comments or overly structured code that might be indicative of AI generation. The code demonstrates a more organic, less optimized approach to sorting, with more focus on clarity than efficiency, which is often a hallmark of human authorship. The usage of traditional loops and conditional statements without any AI-specific patterns further reinforces the classification.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `System.out.print(""Pass ""+ (i+1)+"": ["");`**
   - **Explanation**: This line suggests a human approach to debugging and understanding the code flow by printing intermediate results. Such explicit output for each pass of the sorting process is typical of human-written code, where the developer wants to visualize the process step-by-step.

2. **Code Line: `for(int k =0; k<n;k++) { if( k != n-1) { System.out.print(arr[k]+"",""); } else { System.out.print(arr[k]); } }`**
   - **Explanation**: The manual formatting of the array output, including conditional checks to avoid trailing commas, indicates a human touch. This level of detail in formatting output is often seen in human-written code where readability is prioritized.

3. **Code Line: `int min_index = i; String minStr = arr[i];`**
   - **Explanation**: The use of separate variables to track the minimum index and string during sorting is indicative of a straightforward, human-like approach to implementing algorithms. Humans often use additional variables for clarity and maintainability.

4. **Code Line: `if(arr[j].compareTo(minStr) > 0) { minStr = arr[j]; min_index = j; }`**
   - **Explanation**: The use of `compareTo` for string comparison in a sorting algorithm reflects a typical human approach to handling strings in Java. It shows an understanding of Java's string handling capabilities, something a human developer would naturally use.

5. **Code Line: `if(min_index != i) { String temp = arr[min_index]; arr[min_index] = arr[i]; arr[i] = temp; }`**
   - **Explanation**: This swap operation is a common pattern in sorting algorithms. The straightforward swap logic without any additional abstraction suggests a human author who is implementing a basic sorting algorithm.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**:
    ```java
    public static int[] merge(int[] list1, int[] list2) {
        int[] result = new int[list1.length + list2.length];
        ...
    }
    ```
  - **Target Code Snippet**:
    ```java
    public static void sorting(String arr[],int n) {
        ...
    }
    ```
  - **Analysis**: The ChatGPT-generated example uses structured methods and is more optimized, typical of AI-generated code. In contrast, the target code employs a more verbose and less efficient approach, focusing on clarity and understanding, which aligns with human coding styles.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**:
    ```java
    for (int i = 1; i < length; i++) {
        int ind = a[i];
        int j = i -1;
        while(j>=0 && a[j] > ind) {
            ...
        }
    }
    ```
  - **Target Code Snippet**:
    ```java
    for(int i = 0; i < n - 1; i++) {
        ...
        for(int j = i+1; j < n; j++) {
            ...
        }
    }
    ```
  - **Analysis**: Both snippets show a similar approach to sorting with loops and conditionals. The human-written example uses insertion sort, while the target employs selection sort, but both reflect a straightforward implementation style characteristic of human authorship.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**:
    ```java
    public static void sort(ArrayList<Integer> list) {
        boolean loop = true;
        while (loop) {
            ...
        }
    }
    ```
  - **Target Code Snippet**:
    ```java
    for(int i = 0; i < n - 1; i++) {
        ...
    }
    ```
  - **Analysis**: The human-written example shows a custom sort implementation with a unique logic, similar to the target code's selection sort. Both examples demonstrate a human-like problem-solving approach, focusing on clarity and step-by-step logic.

The differences in optimization and code structure between the target and AI-generated examples, along with the similarities in logic and approach with human-written examples, support the classification of the target code as human-written.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 4, 50, 12, 559000)}"
kanoksak.wat@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written with a 100% probability seems to be influenced by several key characteristics typical of human coding styles. Firstly, the code demonstrates a clear, logical structure with well-defined tasks and comments that guide the reader through the process. The use of arrays and loops to handle repetitive tasks is efficient and straightforward, suggesting a human's understanding of code optimization. Additionally, the formatting and naming conventions used are consistent and adhere to common Java programming practices. The presence of detailed output formatting and specific logic for grading also suggests a nuanced approach typical of human-written code.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** 
   ```java
   double[] itemPrices = new double[n];
   ```
   - **Explanation:** This line demonstrates a clear understanding of array initialization and dynamic sizing, which is a common practice among experienced human programmers to handle multiple data points efficiently.

2. **Code Line:**
   ```java
   System.out.print(""Item Prices: ["");
   ```
   - **Explanation:** The custom formatting for output, including the use of brackets and commas, indicates attention to detail and a desire for clarity in output, which are typical of human-written code.

3. **Code Line:**
   ```java
   for(int i=0; i<n;i++) {
       avg += itemPrices[i];
   }
   ```
   - **Explanation:** The use of a loop to calculate the average price shows an understanding of basic algorithmic patterns, such as iteration and accumulation, which are fundamental to human coding practices.

4. **Code Line:**
   ```java
   char[] grades = new char[n];
   ```
   - **Explanation:** The initialization of a character array for grades demonstrates a structured approach to handling categorical data, indicating a human's ability to plan data structures effectively.

5. **Code Line:**
   ```java
   System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
   ```
   - **Explanation:** This line shows complex string manipulation and formatting, which requires a good understanding of string operations and is a hallmark of human-written code that aims for readability and precision.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example Code Snippet:**
    ```java
    double cost;
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Target Code Snippet:**
    ```java
    char[] grades = new char[n];
    ```
  - **Analysis:** The ChatGPT-generated example uses straightforward conditional logic, while the target code demonstrates an understanding of data structures by using arrays for categorization, which is more typical of human-written code.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example Code Snippet:**
    ```java
    double costPerUnitWeight1 = price1 / weight1;
    ```
  - **Target Code Snippet:**
    ```java
    avg = avg/n;
    ```
  - **Analysis:** Both snippets perform arithmetic operations, but the target code's use of an average calculation within a loop suggests a more complex understanding of iterative processes, aligning with human coding patterns.

- **Comparison with Human-written Example 1:**
  - **Example Code Snippet:**
    ```java
    StringBuilder recordBuilder = new StringBuilder();
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""Grades:"");
    ```
  - **Analysis:** Both examples show a focus on detailed output formatting and presentation, a characteristic common in human-written code aimed at enhancing readability and user understanding.

- **Comparison with Human-written Example 2:**
  - **Example Code Snippet:**
    ```java
    try (Scanner in = new Scanner(file)) {
    ```
  - **Target Code Snippet:**
    ```java
    Scanner scanner = new Scanner(System.in);
    ```
  - **Analysis:** Both snippets demonstrate the use of the Scanner class for input handling, but the target code's simplicity and directness in handling user input are consistent with human-written code that prioritizes straightforward functionality.

The target source code's characteristics, such as efficient data handling, structured logic, and attention to output detail, align closely with human-written examples, supporting the classification as human-written.","{'ratings': {'overall': 3, 'conciseness': 3, 'clarity': 2, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': 'There are many scopes of naming conventions like Hungarian naming conventions, we need to put prefix of primitive type in front of the variable name for example double dAmount, int iNumberOfBook, etc.', 'submitted_at': datetime.datetime(2025, 3, 25, 4, 55, 57, 501000)}"
kanoksak.wat@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model's classification of the target source code as ChatGPT-generated is likely influenced by several key features and patterns commonly found in AI-generated code. These include a structured and systematic approach to problem-solving, explicit comments explaining simple logic, and a consistent coding style that emphasizes clarity and readability. The code's simplicity and directness in achieving its tasks, such as iterating over rows and columns to display seat layouts and statuses, are indicative of AI-generated code. Additionally, the use of straightforward logic to determine seat availability and reservation status aligns with patterns seen in ChatGPT-generated examples. The model's confidence in this classification is reflected in the 100% probability score for being ChatGPT-generated.

---

**Highlight and Explain Key Code Lines**

1. **Line 8-11: Display the theater's seating layout**
   ```java
   for (int row = 1; row <= ROWS; row++) {
       System.out.print(""Row "" + row + "": "");
       for (int col = 1; col <= COLUMNS; col++) {
           System.out.print(""S"" + col + "" "");
       }
       System.out.println();
   }
   ```
   - **Explanation**: This block of code demonstrates a systematic and repetitive structure typical of AI-generated code. The nested loops for iterating over rows and columns are straightforward, with clear and consistent formatting for output. The explicit task of displaying the layout suggests a step-by-step approach commonly used by AI models.

2. **Line 13-20: Add seat statuses (Available or Reserved)**
   ```java
   for (int row = 1; row <= ROWS; row++) {
       System.out.print(""Row "" + row + "": "");
       for (int col = 1; col <= COLUMNS; col++) {
           if (col % 2 == 0) {
               System.out.print(""S"" + col + ""-R "");
           } else {
               System.out.print(""S"" + col + ""-A "");
           }
       }
       System.out.println();
   }
   ```
   - **Explanation**: The logic for determining seat status (even columns reserved, odd columns available) is simple and explicitly stated, which is a characteristic of ChatGPT-generated code. The use of comments to explain the logic further indicates an AI approach to ensure clarity.

3. **Line 22-31: Count and display total reserved and available seats**
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;

   for (int row = 1; row <= ROWS; row++) {
       for (int col = 1; col <= COLUMNS; col++) {
           if (col % 2 == 0) {
               reservedSeats++;
           } else {
               availableSeats++;
           }
       }
   }
   ```
   - **Explanation**: The code uses simple counters to tally reserved and available seats, with logic mirroring the previous section. This repetition and the clear, methodical approach are hallmarks of AI-generated code, emphasizing functionality over complexity.

4. **Line 33-36: Display seat counts**
   ```java
   System.out.println(""\n== Seat Counts =="");
   System.out.println(""Total Reserved Seats: "" + reservedSeats);
   System.out.println(""Total Available Seats: "" + availableSeats);
   ```
   - **Explanation**: The final output section presents results in a clear and organized manner. The use of formatted print statements to convey information is typical of AI-generated code, focusing on readability and user understanding.

5. **Use of Constants for Rows and Columns**
   ```java
   final int ROWS = 10;
   final int COLUMNS = 15;
   ```
   - **Explanation**: Declaring constants for rows and columns is a common practice in AI-generated code, promoting clarity and reducing the risk of errors from hardcoded values. This approach aligns with the systematic and structured nature of AI-generated solutions.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1 (NineHeadsAndTails)**
  - **Example Snippet**:
    ```java
    for (int i = 0; i < binaryString.length(); i++) {
        if (i % 3 == 0) {
            System.out.println(); // Start a new row
        }
        if (binaryString.charAt(i) == '0') {
            System.out.print(""H ""); // Heads
        } else {
            System.out.print(""T ""); // Tails
        }
    }
    ```
  - **Comparison**: Both examples use loops to iterate over a range and conditionally format output based on simple logic. The explicit comments and straightforward logic in the ChatGPT-generated example align with the characteristics of the target source code.

- **Comparison with Human-written Example 1 (Exercise06_15)**
  - **Example Snippet**:
    ```java
    for (int i = 50000; i <= 60000; i += 50) {
        System.out.print(""\n"" + i);
        System.out.print(spacex2 + Math.round(computeTax(0, i)));
        System.out.print(spacex2 + Math.round(computeTax(1, i)));
        System.out.print(spacex2 + Math.round(computeTax(2, i)));
        System.out.print(spacex2 + Math.round(computeTax(3, i)));
    }
    ```
  - **Comparison**: The human-written code demonstrates more complex logic and calculation, with less reliance on comments to explain straightforward operations. In contrast, the target source code's simplicity and explicit documentation are indicative of AI-generated patterns.

- **Comparison with ChatGPT-generated Example 2 (CardPicker)**
  - **Example Snippet**:
    ```java
    String[] ranks = {""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""Jack"", ""Queen"", ""King""};
    String[] suits = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};

    Random random = new Random();

    int rankIndex = random.nextInt(13);
    int suitIndex = random.nextInt(4);

    String rank = ranks[rankIndex];
    String suit = suits[suitIndex];
    System.out.println(rank + "" of "" + suit);
    ```
  - **Comparison**: Both codes use arrays and loops in a straightforward manner to achieve their goals. The clear separation of tasks and the use of simple logic in the ChatGPT example are mirrored in the target source code, supporting the classification as AI-generated.

Overall, the target source code exhibits patterns and characteristics consistent with ChatGPT-generated examples, such as structured logic, clear task separation, and explicit comments, which are less prevalent in the more complex and nuanced human-written examples.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 4, 58, 3, 669000)}"
kanoksak.wat@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with a 100% probability due to several indicative features and patterns. These include the structured and methodical approach to problem-solving, consistent commenting style, and the use of specific constructs that are common in AI-generated code. The code's systematic structure, use of comments to delineate tasks, and the straightforward handling of user input and outputs are reminiscent of the style often produced by AI models like ChatGPT. The presence of a clear logical flow, such as task-based comments and the use of switch-case for decision-making, further supports the classification. These elements align closely with patterns observed in the ChatGPT-generated examples, which typically exhibit a similar level of clarity and organization.

---

**Highlight and Explain Key Code Lines**

1. **Variable Initialization and Input Handling**
   ```java
   String customerName, coffeeType;
   int numberOfCups;
   double totalCost = 0, discount = 0, finalCost;
   ```
   - **Explanation**: The initialization of multiple variables in a single line is a common pattern in AI-generated code, demonstrating efficiency and compactness. ChatGPT often uses such concise variable declarations to handle multiple data points simultaneously.

2. **Task-based Comments**
   ```java
   // Task 2: Calculate and Display Total Cost
   ```
   - **Explanation**: The use of task-based comments to outline the code structure is indicative of ChatGPT's style, which often includes such comments to provide clarity and organization. This mirrors the instructional nature of AI-generated responses.

3. **Switch-case for Decision Making**
   ```java
   switch (coffeeType.toLowerCase()) {
   ```
   - **Explanation**: The use of a switch-case statement for handling different coffee types is a structured approach that ChatGPT frequently employs. It reflects a preference for clear and efficient decision-making processes.

4. **Discount Calculation Logic**
   ```java
   if (numberOfCups > 5) {
       discount = totalCost * 0.10; // 10% discount
   }
   ```
   - **Explanation**: This straightforward conditional logic for calculating discounts is typical of AI-generated code, emphasizing simplicity and directness. The inclusion of a comment within the condition further highlights the AI's tendency to clarify logic for the reader.

5. **Output Formatting**
   ```java
   System.out.println(""Total Cost: "" + totalCost + "" Baht"");
   ```
   - **Explanation**: The clear and formatted output statement is characteristic of ChatGPT's approach to ensure results are easily interpretable by users. The explicit mention of units (e.g., ""Baht"") is a detail often included to enhance clarity.

**Comparison to Previous Examples**

- **Variable Initialization and Input Handling**
  - **Target Code**: 
    ```java
    String customerName, coffeeType;
    int numberOfCups;
    double totalCost = 0, discount = 0, finalCost;
    ```
  - **Example 1 (ChatGPT)**:
    ```java
    double loanAmount = input.nextDouble();
    int numberOfYears = input.nextInt();
    ```
  - **Comparison**: Both examples show concise and efficient variable declarations, a hallmark of AI-generated code, focusing on brevity and clarity.

- **Task-based Comments**
  - **Target Code**: 
    ```java
    // Task 2: Calculate and Display Total Cost
    ```
  - **Example 2 (ChatGPT)**:
    ```java
    // Prompt the user to enter the weight of the package
    ```
  - **Comparison**: The structured use of comments to delineate code sections is a shared feature, providing clear guidance on the code's purpose and flow.

- **Switch-case for Decision Making**
  - **Target Code**: 
    ```java
    switch (coffeeType.toLowerCase()) {
    ```
  - **Example 2 (ChatGPT)**:
    ```java
    if (weight > 50) {
    ```
  - **Comparison**: While the target uses a switch-case, the ChatGPT example uses if-else statements. Both structures reflect a clear approach to decision-making, albeit with different constructs.

- **Discount Calculation Logic**
  - **Target Code**: 
    ```java
    if (numberOfCups > 5) {
        discount = totalCost * 0.10; // 10% discount
    }
    ```
  - **Example 1 (ChatGPT)**:
    ```java
    if (weight > 10) {
        cost = 10.5;
    }
    ```
  - **Comparison**: Both examples use simple conditional logic to apply calculations, showcasing AI's preference for straightforward and efficient logic.

- **Output Formatting**
  - **Target Code**: 
    ```java
    System.out.println(""Total Cost: "" + totalCost + "" Baht"");
    ```
  - **Example 1 (ChatGPT)**:
    ```java
    System.out.printf(""The shipping cost is $%.2f\n"", cost);
    ```
  - **Comparison**: Both examples demonstrate a clear and formatted approach to output, ensuring the user receives information in an easily digestible format.

These comparisons highlight the shared characteristics between the target source code and ChatGPT-generated examples, supporting the model's classification decision. The consistent use of structured logic, clear commenting, and efficient code constructs are key indicators of AI-generated code.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 5}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 4, 59, 43, 516000)}"
kanoksak.wat@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors:

* **Verbose comments:** The code contains numerous comments explaining relatively straightforward code logic, a characteristic often observed in ChatGPT-generated code.
* **Explicit type declarations and conversions:**  ChatGPT tends to explicitly declare variable types and perform conversions (e.g., parsing strings to integers) even when implicit conversions might suffice.
* **Helper method creation:** ChatGPT frequently generates helper methods for tasks that could be integrated directly into the main function. This is evident in the `calculateDaysBetweenDates` and `isLeapYear` methods.
* **Structured output formatting:** The formatted output with titles and clear labels is a common pattern in ChatGPT outputs.
* **Standard library usage:** The code uses standard Java libraries in a predictable way, typical of ChatGPT-generated code.
* **Lack of conciseness:** The code is more verbose than a human-written equivalent might be, another hallmark of AI-generated code.


---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `// Create scanner object to capture user input`
    - **Explanation:** This comment is overly descriptive for such a common operation in Java.  Human developers would rarely add such a basic comment. ChatGPT often over-comments, explaining obvious code functionality.

2. **Key Code Line:** `int checkInYear = Integer.parseInt(checkInDateParts[0]);`
    - **Explanation:** This line, along with similar lines for month and day, demonstrates explicit type conversion.  ChatGPT favors explicit conversions, even if the context might allow for implicit conversion or more concise parsing techniques.

3. **Key Code Line:** `// Calculate the number of nights stayed using the helper method`
    - **Explanation:** This comment precedes the call to `calculateDaysBetweenDates`. While comments about function calls can be helpful, this one is slightly verbose and points towards ChatGPT's tendency to announce its intentions within the code.

4. **Key Code Line:** `// Helper method to calculate the number of days between two dates`
    - **Explanation:** This comment introducing the `calculateDaysBetweenDates` method showcases ChatGPT's tendency to create separate helper functions, even for relatively simple logic that could be embedded within the main function.

5. **Key Code Line:** `System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));`
    - **Explanation:** ChatGPT frequently uses `String.format` for output formatting, even when simpler techniques like `printf` might be more concise. This, combined with the structured output block, points towards AI generation.


**Comparison to Previous Examples**

* **Verbose Comments:** The target code exhibits similar verbosity in comments as seen in the ChatGPT-generated examples. For instance, ""Example 1 (Filename: 0_Exercise02_21.java)"" includes comments like `// Get input from user` and `// Calculate future investment value`. These mirror the target code's comments like `// Create scanner object to capture user input`.

    ```java
    // Target Code
    // Create scanner object to capture user input
    Scanner scanner = new Scanner(System.in);

    // Example 1 (ChatGPT-generated)
    // Get input from user
    System.out.print(""Enter the investment amount: $"");
    double investmentAmount = scanner.nextDouble();
    ```

* **Explicit Type Conversions:**  The explicit conversion from string to integer using `Integer.parseInt`, seen repeatedly in the target code, is reminiscent of similar conversions in ChatGPT Example 2 (0_Exercise05_21.java):

    ```java
    // Target Code
    int checkInYear = Integer.parseInt(checkInDateParts[0]);

    // Example 2 (ChatGPT-generated)
    double loanAmount = input.nextDouble(); 
    int numberOfYears = input.nextInt();
    ```
* **Helper Method Creation:** The target code’s `calculateDaysBetweenDates` and `isLeapYear` functions echo the helper-function style of ChatGPT outputs. While the human-written examples do use functions (`main` itself is a function), they generally lack the specific ""helper function"" pattern seen here. The logic for similar calculations in the human-written examples is often embedded within the `main` method itself.

    ```java
    // Target Code
    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(...) { ... }

    // Example 1 (Human-written)
    // (Leap year and date calculation logic would likely be within main)
    years *= 12;
    monthInterestRate /= 1200;
    ```

* **Structured Output Formatting:**  The target code's formatted output with section titles (""** No STAR Hotel **"", ""== Hotel Invoice =="") resembles the structured output in ChatGPT Example 2 (0_Exercise05_21.java), where a table header and formatted columns are generated. Human-written outputs tend to be more concise.

    ```java
    // Target Code
    System.out.println(""\n** No STAR Hotel **"");
    System.out.println(""== Hotel Invoice =="");

    // Example 2 (ChatGPT-generated)
    System.out.printf(""%-15s%-15s%-15s\n"", ""Interest Rate"", ""Monthly Payment"", ""Total Payment"");
    ```


The cumulative effect of these similarities with the ChatGPT-generated examples, coupled with the absence of certain hallmarks of human-written code (e.g., greater conciseness, more idiomatic expressions), strongly supports the model's classification of the target code as AI-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 5, 3, 53, 450000)}"
kanoksak.wat@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including its specific sorting implementation (descending selection sort with embedded print statements for each pass), the less common `compareTo` method for string comparison, and the overall code structure and style.  The verbose printing within the sorting algorithm, showing each pass and the state of the array, suggests a human developer's debugging or educational intent.  This level of detailed output is less typical in AI-generated code, which often focuses on conciseness and achieving the core functionality without intermediate steps. The use of `compareTo` while functional, is slightly less intuitive for beginners than other comparison methods, which might be favored by LLMs trained on a wider range of simpler code. Finally, the naming conventions and overall structure appear more consistent with human-written code than the typical output of an LLM.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `public static void sorting(String arr[],int n)`
    - **Explanation:** While simple, the method name `sorting` while technically correct, is slightly less descriptive than something like `selectionSort`. Human developers often use shorter, less formal names in internal utility functions. LLMs are trained on a broader codebase and often produce more verbose or standardized names.

- **Key Code Line 2:**  `System.out.print(""Pass ""+ (i+1)+"": ["");`
    - **Explanation:** The embedded print statement within the sorting algorithm is a strong indicator of human-written code. It suggests a developer actively debugging or visualizing the sorting process. AI-generated sorting implementations rarely include such detailed tracking output.

- **Key Code Line 3:** `if(arr[j].compareTo(minStr) > 0)`
    - **Explanation:** Using `compareTo` for string comparison is functionally correct, but perhaps less frequently used by novice programmers or in simpler examples.  LLMs might be more likely to generate code using direct comparisons (e.g.  `arr[j] > minStr`), which is often the first approach taught. The use of `compareTo` suggests slightly more advanced knowledge and possibly human intent.

- **Key Code Line 4:** `if(min_index != i)`
    - **Explanation:**  This check before swapping elements is an optimization common in human-written code to avoid unnecessary swaps. While an LLM *could* generate this, it’s slightly less likely given that a simpler (albeit marginally less efficient) implementation would omit this condition.

- **Key Code Line 5:** `String temp = arr[min_index]; ... arr[i] = temp;`
    - **Explanation:** The classic swap implementation using a `temp` variable is ubiquitous in human-written code.  While LLMs can and do generate this, the presence of a distinct, clearly labeled temporary variable, in combination with the other factors, adds to the overall impression of human authorship.

**Comparison to Previous Examples**

- **Comparison 1 (Verbose Output):**  The target code's extensive print statements within the `sorting` function significantly contrast with the ChatGPT examples.  The ChatGPT examples (like `0_Exercise07_31.java` and `0_BubbleSort3.java`) focus solely on the core logic of merging and sorting, respectively, with output only at the end.

    - **Target Code:**
    ```java
    System.out.print(""Pass ""+ (i+1)+"": [""); // ... print statements inside the sorting loop
    ```

    - **ChatGPT Example (0_BubbleSort3.java):**
    ```java
    System.out.println(""Sorted array:""); // Output only after sorting completes
    for (int i = 0; i < arr.length; i++) {
        System.out.print(arr[i] + "" "");
    }
    ```

- **Comparison 2 (String Comparison):**  The use of `compareTo` is a more ""advanced"" string comparison method compared to the simpler comparison operators potentially used by LLMs. While the human-written example `1_Exercise11_11.java` uses comparisons on integers, the general principle of choosing a specific comparison method (vs. a simpler alternative) aligns with the human-written style observed in the target code.

    - **Target Code:**
    ```java
    if(arr[j].compareTo(minStr) > 0)
    ```

    - **ChatGPT Example (0_Exercise07_31.java):**
    ```java
    if (list1[i] < list2[j])  // Simple comparison operators 
    ```


- **Comparison 3 (Code Structure):**  The target code's structure, while not particularly complex, is slightly more idiosyncratic than the highly standardized structure commonly seen in ChatGPT-generated code.  For instance, the human-written example `1_p02255.java` also shows some stylistic choices in the `print` function that are reminiscent of the less standardized approach seen in the target code.

    - **Target Code:**
    ```java
    public static void sorting(String arr[],int n) // less conventional naming
    ```

    - **ChatGPT Example (0_BubbleSort3.java):**
    ```java
    public static void bubbleSort(int[] arr) // More standard naming
    ```


These differences in code style, output verbosity, and the use of specific methods point to a human developer's hand in creating the target code.  While LLMs are becoming increasingly sophisticated, they still tend to produce more standardized, concise code that prioritizes functional correctness over detailed debugging or pedagogical elements.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 25, 5, 5, 13, 615000)}"
kanoksak.wat@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the use of less common array processing techniques, a specific formatting style in output statements, and a slightly more complex conditional structure for grading. The code doesn't strictly adhere to simplistic or beginner-level patterns often seen in introductory programming exercises common in ChatGPT output. The structure, although solving a basic problem, incorporates more custom elements than typically observed in AI-generated solutions for such straightforward tasks. The targeted formatting, notably in printing the array and grade output, suggests a human touch in presentation.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `System.out.print(""Item Prices: ["");`
    - **Explanation:**  This line introduces a specific formatting choice for outputting the array, using square brackets.  While ChatGPT *can* produce such formatting, it's less common than simply printing comma-separated values.  This custom formatting points towards a human preference.

2. **Key Code Line:**  `if(i!=4) { System.out.print(itemPrices[i]+"", ""); }else { System.out.print(itemPrices[i]); }`
    - **Explanation:** This code handles the trailing comma issue when printing the array elements.  It's a detail often overlooked in simpler, AI-generated code which might just add a comma after every element and have a slightly awkward final output. This level of attention to output formatting suggests a human author.

3. **Key Code Line:** `avg = avg/n;`
    - **Explanation:**  Although a simple calculation, the direct assignment `avg = avg / n;` is stylistically more common in human-written code than creating a separate variable for the result. ChatGPT sometimes introduces extra variables even for simple calculations.

4. **Key Code Line:**  `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Explanation:** This line combines string concatenation and `String.format()` for precise output formatting. The targeted formatting of the dollar amount and inclusion of item number within the output string demonstrates a human's control over output presentation.  ChatGPT often opts for simpler, less styled output.

5. **Key Code Line:**  `if(itemPrices[i] < 15) { g = 'A'; } else if (itemPrices[i] >=15 && itemPrices[i] <20) { g = 'B'; } ...`
   - **Explanation:** The nested `if-else if` structure to assign grades based on price ranges is more elaborate than what's often seen in basic ChatGPT examples. While ChatGPT *can* create such structures, for simpler grading problems, it often defaults to more concise (and sometimes less clear) conditional assignments. This more deliberate, stepped approach indicates human-designed logic.


**Comparison to Previous Examples**

The target code differs significantly from the provided ChatGPT examples in terms of array handling and output formatting. The ChatGPT examples focus on basic input/output operations and simple conditional logic.

* **Target vs. ChatGPT Example 1 (Shipping Cost):** The ChatGPT example uses sequential `if-else if` statements to determine shipping cost based on weight, without any array processing or complex formatting. The target code, however, utilizes arrays and manipulates them for calculating average, printing comma-separated values with specific formatting and assigning grades based on ranges.

```java
// Target Code (Array Handling)
double[] itemPrices = new double[n];
for(int i =0; i< n;i++) { 
   itemPrices[i] = scanner.nextDouble(); 
}

// ChatGPT Example 1 (Sequential if-else)
if (weight > 50) { ... } 
else if (weight > 10) { ... } 
...
```


* **Target vs. ChatGPT Example 2 (Rice Comparison):**  Similar to Example 1, the ChatGPT example here also avoids arrays and intricate output formatting. It only compares two inputs and prints a simple result. The target code, conversely, showcases array processing and distinct output formatting as highlighted above.

```java
// Target Code (Formatted Output)
System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);

// ChatGPT Example 2 (Simple Output)
System.out.println(""Package 1 has a better price.""); 
```

* **Target vs. Human-Written Examples:** The target code shares some similarities with the human-written examples, particularly in using arrays and handling files (though the target code doesn't handle files).  The human-written examples demonstrate more complex structures and organization, such as using packages and multiple functions. While the target code isn't as sophisticated as the human-written examples, its use of arrays and more deliberate formatting puts it closer in style to human-written code than the simpler, more direct approach often found in the ChatGPT examples.

These similarities and differences reinforce the model's classification. The target code’s formatting and array processing indicate a human touch that sets it apart from the basic structure and simplistic presentation seen in the ChatGPT-generated examples. Although not as elaborate as the human-written examples, it carries enough human-like characteristics to be classified as such.","{'ratings': {'overall': 3, 'conciseness': 4, 'clarity': 3, 'actionability': 3, 'selected_line_useful': 3, 'additional_code_useful': 2}, 'feedback_additional': 'confusing occurred!', 'submitted_at': datetime.datetime(2025, 3, 25, 5, 7, 35, 83000)}"
kanoksak.wat@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward, linear structure, the explicit and detailed comments explaining each task, the use of simple loops and conditional statements, and the overall lack of complex logic or advanced programming techniques.  The code resembles the structure of introductory programming exercises often assigned to students learning basic concepts.  It also exhibits a certain ""textbook"" style, which aligns with the output style often observed in ChatGPT-generated code for simple tasks.  Specifically, the highly commented and step-by-step approach to a relatively straightforward problem suggests an AI attempting to explain its reasoning in a human-readable way. The lack of any user interaction or more sophisticated seat reservation logic further reinforces this assessment.

---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `// Task 1: Display the theater's seating layout`
    - **Explanation:**  This type of overly descriptive comment, explicitly labeling each task, is characteristic of ChatGPT. It often structures code in this step-by-step manner, especially when generating code for well-defined, multi-part problems.  Humans tend to use comments more sparingly and for clarifying complex logic, rather than narrating obvious steps.

- **Key Code Line 2:** `for (int row = 1; row <= ROWS; row++) {`
    - **Explanation:** While perfectly valid, the simple nested `for` loops, along with the straightforward array indexing, represent a basic approach to iterating. More experienced programmers might use more concise or efficient methods for similar tasks, especially when dealing with larger datasets or more complex data structures.

- **Key Code Line 3:** `System.out.print(""S"" + col + "" "");`
    - **Explanation:** The repetitive printing of seat numbers with ""S"" prefixed and a space suffix shows a simple string concatenation pattern.  This simplicity again aligns with ChatGPT's tendency to produce functionally correct yet stylistically basic code.

- **Key Code Line 4:** `// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)`
    - **Explanation:** While explaining the condition within the `if` statement is good practice, this level of detail, re-stating what is already evident in the code (`col % 2 == 0`),  suggests ChatGPT's verbose explanatory style.

- **Key Code Line 5:** `System.out.println(""Total Reserved Seats: "" + reservedSeats);`
    - **Explanation:** Similar to the first key code line, this `println` statement, including an explicit label for the output, is indicative of ChatGPT's tendency to generate highly explanatory and self-contained code blocks.


**Comparison to Previous Examples**:


- **Comparison 1: Simple loops and output similar to ChatGPT Example 1 (0_Exercise08_11.java):** Both the target code and the ChatGPT example employ basic `for` loops and `System.out.print` statements to generate formatted output.  They both focus on a very linear execution flow and simple output manipulation, which is typical of AI-generated code for beginner-level problems.

    ```java
    // Target Code
    for (int row = 1; row <= ROWS; row++) {
        System.out.print(""Row "" + row + "": "");
        for (int col = 1; col <= COLUMNS; col++) {
            System.out.print(""S"" + col + "" "");
        }
        System.out.println();
    }

    // ChatGPT Example 1 (0_Exercise08_11.java - Excerpt)
    for (int i = 0; i < binaryString.length(); i++) {
        if (i % 3 == 0) {
            System.out.println(); // Start a new row
        }
        if (binaryString.charAt(i) == '0') {
            System.out.print(""H ""); // Heads
        } else {
            System.out.print(""T ""); // Tails
        }
    }
    ```

- **Comparison 2:  Explicit comments resemble ChatGPT Example 2 (0_Exercise03_24.java):** The abundance of explanatory comments in the target code mirrors the commenting style in the ChatGPT example, where even simple operations are described.  Human-written code, as exemplified in the human examples provided, usually includes fewer comments, reserved for less obvious logic or crucial explanations.

    ```java
    // Target Code
    // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)

    // ChatGPT Example 2 (0_Exercise03_24.java - Excerpt)
    // Create a new random number generator
    Random random = new Random();
    ```


- **Contrast with Human Example 1 (1_Exercise06_15.java) and Human Example 2 (1_Exercise08_09.java):**  The human examples show more sophisticated use of data structures, methods, and control flow. They address more complex problems and demonstrate a higher level of programming expertise.  The code structure is less linear, and the comments are more strategically placed to explain non-trivial logic or design decisions. The lack of these features in the target code further contributes to its classification as AI-generated.

These comparisons and contrasts support the model's classification of the target code as ChatGPT-generated. The code shares several characteristics with known ChatGPT-generated examples, particularly in its simplicity, explicitness, and linear structure, while lacking the complexity and nuanced coding style typically found in human-written code.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': 'none', 'submitted_at': datetime.datetime(2025, 3, 25, 5, 8, 44, 809000)}"
kanoksak.wat@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward structure, explicit comments like ""// Task 1: Define Variables"", and a basic switch case for handling coffee types.  The code also exhibits a common ChatGPT pattern of sequentially numbered comments describing steps, which is less common in human-written code where comments often focus on explaining *why* rather than *how*.  The overly verbose output with lines like ""== Welcome to ICT Coffee Shop =="" also resembles ChatGPT's tendency to generate illustrative and beginner-friendly examples. The code lacks the complexity and nuanced error handling often found in human-written production code.  The use of a single `main` method for all logic further contributes to the simplistic structure characteristic of ChatGPT outputs. Finally, the explicit `scanner.close()` while correct, is often omitted in introductory code examples, but ChatGPT tends to include it meticulously.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line:** `// Task 1: Define Variables`
    - **Explanation:** This type of comment, indicating a numbered task, is very characteristic of ChatGPT-generated code.  It's a way the model structures its output to present a step-by-step solution.  Human developers rarely use such comments, preferring to explain the *purpose* of variables, not just their declaration.

2. **Key Code Line:** `switch (coffeeType.toLowerCase()) {`
    - **Explanation:**  While switch statements are used by humans, ChatGPT often relies on them for simple branching logic where a human might opt for a more concise approach (e.g., a map or strategy pattern, if the logic were more complex).  The `toLowerCase()` call here also suggests a simplistic approach to input validation, typical of generated examples.

3. **Key Code Line:** `discount = totalCost * 0.10; // 10% discount`
    - **Explanation:** The inline comment explaining the already obvious calculation (10%) is another hallmark of ChatGPT.  Human developers typically wouldn't comment on such self-explanatory arithmetic.

4. **Key Code Line:** `System.out.println(""\n== Welcome to ICT Coffee Shop =="");`
    - **Explanation:** This kind of decorative output is commonly seen in ChatGPT's code, especially when generating examples or tutorials.  Human-written applications would likely separate presentational aspects from core logic.

5. **Key Code Line:** `scanner.close();`
    - **Explanation:** While good practice, explicitly closing the scanner is something often omitted in simple tutorial-like code written by humans, but ChatGPT is meticulous about including it, demonstrating a strict adherence to best practices even in trivial examples.


**Comparison to Previous Examples**:

1. **Similarity to ChatGPT Example 1 (0_Exercise05_21.java):**  Both the target code and this example exhibit simple, linear program flow with explanatory comments.
    - **Target Code:** `// Task 2: Calculate and Display Total Cost`
    - **Example 1:** `// Display the table header`
    Both comments announce what the next block of code will do, a characteristic of ChatGPT-generated code.

2. **Similarity to ChatGPT Example 2 (0_Exercise03_18.java):**  Both rely on a chain of `if/else if` or `switch` statements to handle different cases.
    - **Target Code:** `switch (coffeeType.toLowerCase()) { ... }`
    - **Example 2:** `if (weight > 50) { ... } else if (weight > 10) { ... }`
    This simple branching logic is common in generated examples, whereas human code might employ more sophisticated techniques for more complex scenarios.

3. **Difference from Human Example 1 (1_Exercise08_12.java):** The human-written example demonstrates more sophisticated code organization with a separate `calcTax` function.  The target code lacks such modularity.
    - **Target Code:** Entire logic within `main` method.
    - **Example 1:** `static double calcTax(double income, int[] bracket, double[] rates) { ... }`

4. **Difference from Human Example 2 (1_Exercise06_15.java):**  The human example demonstrates concise commenting and code structure focused on functionality, rather than explanatory narration.
    - **Target Code:** `// Task 4: Receive input from the keyboard`
    - **Example 2:** `static final String space = ""       "";` (Comment absent, focusing on functionality)
    The target code's verbose comments contrast with the concise style of human code.

These similarities to the ChatGPT-generated examples and differences from the human-written examples reinforce the model's classification of the target code as being generated by ChatGPT.  The target code's structural simplicity, verbose comments, and illustrative style align more with the characteristics commonly observed in ChatGPT output.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'Good', 'submitted_at': datetime.datetime(2025, 3, 25, 5, 12, 6, 412000)}"
pattaraporn.san@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated is based on several key features and stylistic patterns typical of AI-generated code. These include a structured and consistent commenting style, the use of helper methods for modularity, and a clear and systematic approach to solving the problem. The code demonstrates a propensity for detailed documentation, which is characteristic of AI-generated code aiming to be user-friendly and easy to understand. The presence of a helper method for calculating days between dates and an additional method for checking leap years indicates a level of thoroughness and modularity often seen in AI-generated examples. Additionally, the naming conventions and formatting are consistent and follow best practices, which are typical of AI-generated code aiming for clarity and maintainability.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `// Create scanner object to capture user input`**
   - **Explanation**: This comment is indicative of AI-generated code as it provides explicit documentation for straightforward operations. AI models often include comments to enhance code readability and usability, even for simple statements.
   
2. **Code Line: `int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);`**
   - **Explanation**: The use of a helper method (`calculateDaysBetweenDates`) for calculating the number of nights showcases modularity and abstraction, which are common in AI-generated code to promote reusability and clarity.
   
3. **Code Line: `public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {`**
   - **Explanation**: The presence of a well-defined helper method with clear parameter naming and functionality is a hallmark of AI-generated code. It reflects the model's emphasis on creating modular and reusable code components.
   
4. **Code Line: `System.out.println(""\n** No STAR Hotel **"");`**
   - **Explanation**: The inclusion of formatted output with specific branding or labels is typical of AI-generated code, which often aims to provide complete and polished outputs.
   
5. **Code Line: `public static boolean isLeapYear(int year) {`**
   - **Explanation**: The addition of a separate method to determine leap years demonstrates thoroughness and attention to detail, which are characteristics of AI-generated code designed to handle edge cases and ensure accuracy.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example 1 Code Snippet**:
    ```java
    // Get input from user
    System.out.print(""Enter the investment amount: $"");
    ```
  - **Target Code Snippet**:
    ```java
    // Create scanner object to capture user input
    ```
  - **Analysis**: Both the target and the example include comments for user input operations. The explicit commentary on basic operations is a common feature of AI-generated code, emphasizing clarity and user guidance.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example 2 Code Snippet**:
    ```java
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
    ```
  - **Target Code Snippet**:
    ```java
    int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);
    ```
  - **Analysis**: Both examples use loops or helper methods to modularize and streamline calculations. The structured approach to solving problems and breaking them down into smaller components is typical of AI-generated code, reflecting a systematic methodology.

- **Comparison with Human-written Example 1**:
  - **Human-written Example 1 Code Snippet**:
    ```java
    System.out.printf(""Accumulated Value is $%.2f"",
                investmentAmount * Math.pow(monthInterestRate + 1, years));
    ```
  - **Target Code Snippet**:
    ```java
    System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));
    ```
  - **Analysis**: While both snippets involve formatted output, the target code's use of `String.format` within a `println` statement aligns more with AI-generated patterns for ensuring output precision and readability.

- **Comparison with Human-written Example 2**:
  - **Human-written Example 2 Code Snippet**:
    ```java
    double total = 0;
    for (int i = 1; i <= numberOfMonths; i++) {
        total = (investment + total) * (1 + (interestRate / 12));
    }
    ```
  - **Target Code Snippet**:
    ```java
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {
    ```
  - **Analysis**: The human-written example uses an inline loop for calculations, whereas the target code employs a separate method for calculations, highlighting the AI-generated preference for modular and reusable code.

The target source code's features, such as detailed comments, modular methods, and systematic problem-solving, align with patterns commonly found in AI-generated examples, supporting the model's classification as ChatGPT-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 25, 57, 112000)}"
pattaraporn.san@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The target source code was classified as human-written with a 100% probability due to several key features that align with typical human coding patterns. These include the use of verbose variable names, detailed inline comments, and a structured approach to implementing sorting logic. The code demonstrates clear intent and organization, such as printing intermediate steps during sorting, which is a characteristic often found in educational or illustrative human-written code. Additionally, the code's use of traditional sorting logic without leveraging library functions or AI-generated shortcuts suggests a manual, human approach to problem-solving.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1**: `public static void sorting(String arr[],int n)`
  - **Explanation**: This method signature uses a simple and descriptive name, ""sorting"", which is clear and straightforward. Human-written code often favors readability and clarity over brevity or obfuscation.

- **Code Line 2**: `System.out.print(""Pass ""+ (i+1)+"": ["");`
  - **Explanation**: The inclusion of intermediate prints, such as ""Pass"" followed by the current iteration, suggests a focus on debugging or educational output, which is a common practice in human-written code to understand the sorting process.

- **Code Line 3**: `if(arr[j].compareTo(minStr) > 0)`
  - **Explanation**: The use of `compareTo` for string comparison is a classic approach in Java for lexicographical ordering, indicating a fundamental understanding of Java's string handling, typical of human developers.

- **Code Line 4**: `String minStr = arr[i];`
  - **Explanation**: The use of a temporary variable `minStr` for clarity in comparison operations reflects a human tendency to write code that is easy to understand and maintain.

- **Code Line 5**: `if(min_index != i)`
  - **Explanation**: This conditional check before swapping elements demonstrates a careful approach to avoid unnecessary operations, a hallmark of thoughtful human coding.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code Snippet**: 
    ```java
    public static int[] merge(int[] list1, int[] list2) {
        // ...
    }
    ```
  - **Target Code Snippet**:
    ```java
    public static void sorting(String arr[],int n)
    ```
  - **Analysis**: The ChatGPT-generated code often uses more generic method names like ""merge"", while the target code uses ""sorting"", which is similarly generic but includes additional verbosity and intermediate output, suggesting a deeper focus on the process rather than just the outcome.

- **Comparison with Human-written Example 1**:
  - **Example Code Snippet**:
    ```java
    for (int i = 1; i < length; i++) {
        // ...
    }
    ```
  - **Target Code Snippet**:
    ```java
    for(int i = 0; i < n - 1; i++)
    ```
  - **Analysis**: Both examples demonstrate a clear loop structure with initialization, condition, and increment. The target code similarly uses a zero-based index, which is a common pattern in human-written code for iterating over arrays.

- **Comparison with Human-written Example 2**:
  - **Example Code Snippet**:
    ```java
    System.out.print(""Enter five integers: "");
    ```
  - **Target Code Snippet**:
    ```java
    System.out.print(""Pass ""+ (i+1)+"": ["");
    ```
  - **Analysis**: Both snippets include user-friendly print statements to guide the user through the process. This focus on user interaction and output clarity is a strong indicator of human-written code.

Overall, the target source code's structure, clarity, and focus on process transparency align closely with the characteristics of human-written code, as evidenced by the comparisons with both AI-generated and human-written examples. The verbose and educational style, along with a classic approach to sorting logic, supports the classification as human-written.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 27, 51, 993000)}"
pattaraporn.san@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written is based on several key features that are typically associated with human-written code. These include the use of meaningful comments, structured and coherent logic flow, and the implementation of standard programming practices such as loops and conditionals. The code displays a clear organization and a level of complexity that suggests it was crafted with a specific purpose in mind. Additionally, the use of specific variable names and the overall formatting contribute to the human-written classification. These features collectively indicate a level of intentionality and craftsmanship often associated with human authorship.

---

**Highlight and Explain Key Code Lines**

1. **Line: `System.out.println(""==MUGrocery=="");`**
   - **Explanation**: This line demonstrates a human-written pattern through the use of a custom header for a console application. It suggests that the developer has added a personal touch to the program, which is a common practice among human developers to enhance user interaction.

2. **Line: `for(int i =0; i< n;i++) {`**
   - **Explanation**: The use of a for-loop with a clear counter variable (`i`) and a concise loop condition reflects standard programming practices. Human developers often use such loops to iterate over arrays or lists, demonstrating an understanding of control structures.

3. **Line: `char g = 'A';`**
   - **Explanation**: The initialization of a variable with a default value before entering a loop is a common practice among human programmers. It prepares the variable for use within conditional logic, showing foresight and planning in the code structure.

4. **Line: `System.out.println(""Grades:"");`**
   - **Explanation**: This line indicates a structured approach to output, where the developer explicitly labels sections of the output for clarity. Human developers often do this to make the output more understandable for users.

5. **Line: `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`**
   - **Explanation**: The use of `String.format` for formatting numbers to two decimal places is a sophisticated technique that suggests attention to detail, a hallmark of human-written code. It ensures that the output is neatly presented, aligning with common human coding practices.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example 1 Code Snippet**:
    ```java
    System.out.printf(""The shipping cost is $%.2f\n"", cost);
    ```
  - **Target Code Snippet**:
    ```java
    System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
    ```
  - **Analysis**: Both examples use formatted output for displaying numerical values. However, the target code's use of `String.format` is a more explicit and flexible method compared to the `printf` function, suggesting a deeper understanding and preference for more control over formatting, which is often seen in human-written code.

- **Comparison with Human-written Example 1**:
  - **Example 1 Code Snippet**:
    ```java
    StringBuilder recordBuilder = new StringBuilder();
    ```
  - **Target Code Snippet**:
    ```java
    char[] grades = new char[n];
    ```
  - **Analysis**: Both snippets involve the initialization of data structures (`StringBuilder` and `char[]`). The target code's use of an array to store grades reflects a structured approach to data management, akin to the use of `StringBuilder` for constructing strings, indicating a human's intentional and organized coding style.

- **Comparison with Human-written Example 2**:
  - **Example 2 Code Snippet**:
    ```java
    while (in.hasNextLine()) {
    ```
  - **Target Code Snippet**:
    ```java
    for(int i=0; i<n;i++) {
    ```
  - **Analysis**: Both examples demonstrate the use of loops to process data. The target code uses a `for` loop with a clear iteration pattern, similar to the `while` loop for line reading, showing a structured approach to iterating over collections, a common practice among human developers.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example 2 Code Snippet**:
    ```java
    if (costPerUnitWeight1 < costPerUnitWeight2) {
    ```
  - **Target Code Snippet**:
    ```java
    if(itemPrices[i] < 15) {
    ```
  - **Analysis**: Both examples use conditional statements to determine outcomes based on comparisons. The target code's use of a series of `if-else` statements to assign grades based on price ranges is a complex logic structure that suggests deliberate decision-making, characteristic of human-written code.

Overall, the target source code's structured logic, attention to detail, and sophisticated output formatting align more closely with human-written examples, supporting the classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': 'In this example, the ""read more"" part was not shown.', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 29, 56, 418000)}"
pattaraporn.san@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated with 100% probability stems from several key characteristics. These include a structured and methodical approach to problem-solving, a distinct pattern of comments and code organization, and a simplicity in logic that often indicates AI generation. The code features clear and consistent formatting, with comments that explain each task step-by-step, similar to the examples of ChatGPT-generated code provided. Furthermore, the logical division of tasks into subtasks and the emphasis on readability and clarity are hallmarks of code generated by AI models like ChatGPT.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:**
   ```java
   System.out.println(""== MUTheater Seat Layout =="");
   ```
   - **Explanation:** This line demonstrates a typical pattern in AI-generated code where outputs are clearly labeled and formatted for readability. It mirrors the structured output style seen in many AI-generated examples, aiming for clarity and user-friendliness.

2. **Code Line:**
   ```java
   for (int row = 1; row <= ROWS; row++) {
       System.out.print(""Row "" + row + "": "");
       for (int col = 1; col <= COLUMNS; col++) {
           System.out.print(""S"" + col + "" "");
       }
       System.out.println();
   }
   ```
   - **Explanation:** The nested loop structure with a clear and simple task demonstrates a methodical approach typical of AI-generated code. The use of concise and repetitive patterns, like iterating over rows and columns to print seat numbers, reflects the AI's tendency to use straightforward, systematic logic.

3. **Code Line:**
   ```java
   if (col % 2 == 0) {
       System.out.print(""S"" + col + ""-R "");
   } else {
       System.out.print(""S"" + col + ""-A "");
   }
   ```
   - **Explanation:** This conditional statement exemplifies the AI's approach to problem-solving using simple logic. The use of modulus operation to determine seat status (Reserved or Available) is a straightforward method that AI often employs for its efficiency and clarity.

4. **Code Line:**
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;
   ```
   - **Explanation:** The initialization of counters for reserved and available seats indicates a typical AI pattern of maintaining clarity and explicitness in variable declarations. This aligns with the AI's emphasis on maintaining a clear state throughout the program.

5. **Code Line:**
   ```java
   System.out.println(""\n== Seat Counts =="");
   System.out.println(""Total Reserved Seats: "" + reservedSeats);
   System.out.println(""Total Available Seats: "" + availableSeats);
   ```
   - **Explanation:** The explicit output of results with labeled print statements is a common characteristic of AI-generated code. This ensures that the output is easily interpretable, a priority in AI-generated solutions.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example 1 Code Snippet:**
    ```java
    System.out.print(""Enter a number between 0 and 511: "");
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""== MUTheater Seat Layout =="");
    ```
  - **Analysis:** Both snippets show a clear and direct way of interacting with the user, emphasizing clarity and directness. This pattern of providing straightforward prompts and outputs is typical of ChatGPT-generated code.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example 2 Code Snippet:**
    ```java
    int rankIndex = random.nextInt(13);
    ```
  - **Target Code Snippet:**
    ```java
    int reservedSeats = 0;
    ```
  - **Analysis:** The initialization of variables in a straightforward manner is common in both examples. This reflects the AI's tendency to use simple, clear variable declarations that align with the problem-solving approach.

- **Comparison with Human-written Example 1:**
  - **Human Example 1 Code Snippet:**
    ```java
    System.out.print(""Taxable"" + space + ""Single"" + space + ""Married Joint"" + space + ""Married"" + space + ""Head "" + ""of"");
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""== MUTheater Seat Layout =="");
    ```
  - **Analysis:** While both snippets aim for clarity in output, the human-written example involves more complex concatenation and formatting, which is less typical of AI-generated code that tends to favor simpler, more direct outputs.

- **Comparison with Human-written Example 2:**
  - **Human Example 2 Code Snippet:**
    ```java
    static {
        boxes = new String[][]{{"""", """", """"},
                {"""", """", """"},
                {"""", """", """"}};
    }
    ```
  - **Target Code Snippet:**
    ```java
    for (int row = 1; row <= ROWS; row++) {
        for (int col = 1; col <= COLUMNS; col++) {
            if (col % 2 == 0) {
                reservedSeats++;
            }
        }
    }
    ```
  - **Analysis:** The human-written code shows a more complex initialization block, whereas the target code uses straightforward loops and conditions, reflecting the AI's preference for simplicity and clarity in logic.

These comparisons show that the target code's simplicity, clarity, and structured approach align closely with the characteristics of AI-generated code, supporting the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 31, 57, 861000)}"
pattaraporn.san@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated with a 100% probability is likely influenced by several key features and patterns that align with typical AI-generated code characteristics. These include structured and clear comments, a straightforward and linear logic flow, conventional naming conventions, and a lack of complex or nuanced coding patterns that are often seen in human-written code. The code provides clear instructions and follows a methodical approach to solving the problem, typical of AI-generated outputs. The use of comments to outline tasks, the switch-case for coffee type pricing, and the straightforward application of discounts are indicative of AI models that aim for clarity and simplicity in code generation.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1:** 
  ```java
  // Task 1: Define Variables
  ```
  - **Explanation:** The use of structured comments like ""Task 1"" is a common pattern in AI-generated code, where tasks are clearly demarcated to enhance readability and organization. This approach helps break down the code into logical sections, which is a typical strategy employed by AI to ensure clarity.

- **Code Line 2:** 
  ```java
  switch (coffeeType.toLowerCase()) {
  ```
  - **Explanation:** The use of a `switch` statement for handling multiple cases (e.g., ""espresso"", ""latte"") in a straightforward manner is characteristic of AI-generated code. It highlights the AI's tendency to utilize clear and efficient control structures to handle conditional logic.

- **Code Line 3:** 
  ```java
  if (numberOfCups > 5) {
      discount = totalCost * 0.10; // 10% discount
  }
  ```
  - **Explanation:** This simple conditional logic for applying a discount is indicative of AI-generated code, which often employs direct and uncomplicated logic to achieve the desired outcome. The comment explaining the discount percentage is also a typical AI-generated feature for clarity.

- **Code Line 4:** 
  ```java
  System.out.println(""\n== Welcome to ICT Coffee Shop =="");
  ```
  - **Explanation:** The inclusion of formatted output statements for user interaction reflects a common pattern in AI-generated code, where user experience is enhanced through clear and structured outputs.

- **Code Line 5:** 
  ```java
  scanner.close();
  ```
  - **Explanation:** Proper resource management, such as closing the scanner, is a characteristic often emphasized in AI-generated code to ensure best practices are followed, reflecting the AI's adherence to programming standards.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example 1 Code Snippet:**
    ```java
    // Prompt the user to enter the loan amount and loan period
    System.out.print(""Loan Amount: "");
    ```
  - **Target Code Snippet:**
    ```java
    // Task 4: Receive input from the keyboard
    System.out.print(""Enter customer name: "");
    ```
  - **Analysis:** Both the target and Example 1 use clear, instructional comments to guide the user through input collection, a pattern common in AI-generated code designed for clarity and ease of use.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example 2 Code Snippet:**
    ```java
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Target Code Snippet:**
    ```java
    if (numberOfCups > 5) {
        discount = totalCost * 0.10; // 10% discount
    }
    ```
  - **Analysis:** Both codes implement simple conditional logic to handle specific cases, with accompanying comments explaining the logic, reflecting the AI's preference for straightforward, commented code structures.

- **Comparison with Human-written Example 1:**
  - **Human Example 1 Code Snippet:**
    ```java
    if (income <= bracket[0]) {
        tax = income * rates[0];
    }
    ```
  - **Target Code Snippet:**
    ```java
    switch (coffeeType.toLowerCase()) {
    ```
  - **Analysis:** The human-written example demonstrates more complex logic with nested conditions and calculations, whereas the target code uses a straightforward `switch` statement, emphasizing the simplicity and directness of AI-generated code.

- **Comparison with Human-written Example 2:**
  - **Human Example 2 Code Snippet:**
    ```java
    System.out.print(""Taxable"" + space + ""Single"" + space + ""Married Joint"" + space + ""Married"" + space + ""Head "" +
                ""of"");
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""\n== Welcome to ICT Coffee Shop =="");
    ```
  - **Analysis:** While both examples use formatted output, the human-written example involves more complex formatting logic, whereas the target code uses simple, direct statements, indicative of AI's focus on clarity and simplicity.

The similarities in clear structure, straightforward logic, and detailed comments in the target code align closely with the ChatGPT-generated examples, supporting the classification decision. The AI-generated patterns are evident in the methodical approach and simplicity, contrasting with the more complex and nuanced patterns found in human-written examples.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 33, 39, 434000)}"
pattaraporn.san@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward, almost verbose coding style, typical of AI-generated code. The comprehensive comments, explaining even simple operations, along with the structured approach of breaking down the date parsing and calculation into individual components, are strong indicators. The inclusion of helper methods for date calculation, while good practice, adds to this impression of structured completeness often seen in AI outputs.  The lack of complex logic or any particularly clever optimizations further suggests AI generation.  The explicit closing of the scanner, while good practice, is something frequently emphasized in basic coding tutorials and often appears in ChatGPT output. Finally, the specific output formatting, including the hotel name ""No STAR Hotel"" and the specific invoice format, points towards a likely prompt-based generation scenario, where such details are typically specified.

---

**Highlight and Explain Key Code Lines**

**Key Code Lines:**

1. `// Create scanner object to capture user input`
2. `// Parse the check-in and check-out dates into individual components`
3. `// Convert to integers for calculations`
4. `// Calculate the number of nights stayed using the helper method`
5. `// Close scanner`


**Explain Each Code Line:**

1. **`// Create scanner object to capture user input`**: This comment, while helpful, is excessively explanatory for such a standard operation.  ChatGPT tends to over-comment, explaining even basic steps.
2. **`// Parse the check-in and check-out dates into individual components`**: Similar to the previous point, this describes a straightforward action in detail. This detailed commenting style is a common characteristic of ChatGPT-generated code.
3. **`// Convert to integers for calculations`**: This comment is again very basic.  A human programmer would likely find this implicit in the following `Integer.parseInt()` calls.
4. **`// Calculate the number of nights stayed using the helper method`**: This refers to using the `calculateDaysBetweenDates` function.  While helper functions are good practice, ChatGPT tends to create them even for relatively simple tasks, showcasing its structured code generation capabilities.
5. **`// Close scanner`**:  Explicitly closing the scanner, while good practice, is often emphasized in beginner tutorials and is frequently seen in ChatGPT-generated code. It indicates an adherence to basic principles often observed in AI.

**Comparison to Previous Examples**

* **Over-Commenting**: The target code echoes the detailed commenting style seen in ChatGPT-generated Example 1 (`// Get input from user`, `// Calculate future investment value`, `// Output result`). Both excessively comment on simple operations.

    Target Code: `// Create scanner object to capture user input`
    Example 1 (ChatGPT): `// Get input from user`

* **Structured Approach**: The target code breaks down tasks into smaller, explicit steps similar to ChatGPT-generated Example 2. Both create structured loops and calculate values step-by-step.  This methodical, almost verbose style is common in ChatGPT outputs.

    Target Code: 
    ```java
    // Parse the check-in and check-out dates into individual components
    String[] checkInDateParts = checkInDate.split(""-"");
    // ... (Conversion to integers)
    ```

    Example 2 (ChatGPT):
    ```java
    // Compute and display the monthly and total payments for each interest rate
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
        // ... (Calculations inside the loop)
    }
    ```

* **Helper Functions**:  The target code utilizes a helper function (`calculateDaysBetweenDates`), mirroring ChatGPT's tendency to create functions even for moderately complex tasks. This is different from the human-written examples which tend to incorporate logic directly within the `main` method.

    Target Code: `int numberOfNights = calculateDaysBetweenDates(...)`
    Human Example 1:  *(Calculates future value directly within main)*

* **Basic Logic and Formatting**: The target code lacks the more concise or optimized logic sometimes seen in human-written code. The explicit formatting (e.g.,  `System.out.println(""\n** No STAR Hotel **"");`) resembles the output format often present in prompt-based generated code, as opposed to human-written examples which tend to be less focused on visual presentation in simple programs.


These similarities to the ChatGPT-generated examples and differences from the human-written samples reinforce the model's classification of the target code as likely generated by ChatGPT. The combination of verbose comments, highly structured code, helper functions for simpler tasks, and specific output formatting all contribute to this assessment.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 3, 'actionability': 3, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 42, 17, 791000)}"
pattaraporn.san@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Verbose Comments/Print Statements:** The code contains print statements within the sorting function to output each pass of the algorithm. This is more typical of human-written code, especially for educational or debugging purposes, and less common in concise AI-generated code.
* **Specific Sorting Implementation:**  The code implements a variation of selection sort with a descending order comparison ( `arr[j].compareTo(minStr) > 0`). This level of customization is more characteristic of a human programmer addressing a specific need, as opposed to AI, which often generates more generic sorting implementations (like the bubble sort seen in AI Example 2). 
* **Non-standard Code Structure/Style:** The code uses a non-standard formatting for the print statements within the loops. While functional, it deviates from the typical streamlined output an AI might generate.
* **Lack of Input/Output Handling outside `sorting()`:** The code provides only the sorting function, without the surrounding driver code (main method, input handling) typically found in AI-generated examples.  AI examples frequently include complete, runnable programs.

---

**Highlight and Explain Key Code Lines**

1. **`System.out.print(""Pass ""+ (i+1)+"": ["");`**: This line prints the pass number within the sorting algorithm. This level of verbosity, aimed at visualizing the sorting process, is typical of human-written code used for learning or debugging. AI typically focuses on the core algorithm without such detailed output.

2. **`if(arr[j].compareTo(minStr) > 0)`**: This line uses `compareTo` for string comparison and sorts in descending order (greater than). This suggests a specific sorting requirement, indicating a human programmer's intent rather than a generic AI solution, which would likely default to ascending order numerical sorting if the data type isn't explicitly specified.

3. **`if(min_index != i)`**: This check before swapping elements adds an optimization to prevent unnecessary swaps.  While not exclusive to human code, this optimization detail is more common in code written for efficiency, often a human consideration.

4.  **`String minStr = arr[i];`**:  This line explicitly declares a `minStr` variable to store the current minimum string. AI-generated code might integrate this directly into the comparison within the inner loop, potentially making the code slightly more concise but less readable.

5. **The entire block within the nested loops concerned with printing the array**: This indicates a strong human element because a focus on visualizing the output of each pass suggests a human desire to understand or demonstrate the algorithm's behavior.

**Comparison to Previous Examples**

* **Comparison with ChatGPT Example 1 (Merge Sort):** The ChatGPT example focuses on the complete functionality of merging two arrays, including input and output operations within the main method. The target code isolates only the sorting function. This difference highlights the AI's tendency to provide complete, runnable programs, while the target code presents a more modular, function-specific approach typical of human-written libraries or code snippets.

   ```java
   // ChatGPT Example 1 (snippet)
   public static int[] merge(int[] list1, int[] list2) { ... }

   public static void main(String[] args) { ... } 

   // Target Code
   public static void sorting(String arr[],int n) { ... } // No main method, only the sorting function.
   ```


* **Comparison with ChatGPT Example 2 (Bubble Sort):** The bubble sort in the ChatGPT example is a standard, generic implementation. The target code uses a selection sort variant with descending order string comparison, showing a higher level of specialization compared to the more common sorting algorithm chosen by the AI.

   ```java
   // ChatGPT Example 2 (snippet)
   if (arr[j] > arr[j+1]) { ... } // Standard bubble sort comparison

   // Target Code (snippet)
   if(arr[j].compareTo(minStr) > 0) { ... } // String comparison, descending order
   ```

* **Comparison with Human Example 1 (Insertion Sort):**  Both the Human Example 1 and the target code provide detailed output during the sorting process.  While the target code prints each pass, Human Example 1 prints the entire array after each insertion. Both demonstrate a human's focus on understanding or visualizing algorithm execution.

   ```java
   // Human Example 1 (snippet)
   print(a); // Prints the array after each insertion step

   // Target Code (snippet)
   System.out.print(""Pass ""+ (i+1)+"": [""); ...  // Prints the array after each pass
   ```

* **Comparison with Human Example 2 (Sorting with ArrayList):** Similar to the target code, Human Example 2 also uses a non-standard sorting implementation. The target code’s use of a custom selection sort echoes the Human Example 2’s customized approach using ArrayLists, further suggesting human involvement in the target code's creation. While both sort, they employ different approaches, highlighting the diversity of algorithms and implementations typical of human-written code.

   ```java
   // Human Example 2 (snippet)
   if (list.get(n) > list.get(i)) { ... }  // Custom sort with ArrayList

   // Target Code (snippet)
    if(arr[j].compareTo(minStr) > 0) { ... } // Custom selection sort with string comparison
   ```

These comparisons reinforce the model's classification of the target code as human-written. The verbose output, specialized sorting algorithm, and non-standard style align more with characteristics observed in the human-written examples, while contrasting with the concise, generic solutions typically produced by AI.  The absence of surrounding input/output handling also strengthens the human-written classification, suggesting it is a standalone function snippet rather than a complete, runnable AI-generated program.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 45, 23, 573000)}"
pattaraporn.san@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including its specific formatting choices, the use of less common output formatting (like including the price with the grade), and the slightly more complex logic in the grading section compared to typical introductory programming exercises generated by ChatGPT. The absence of perfect structure and the presence of minor inefficiencies (like recalculating `itemPrices[i]` multiple times) also contribute to the human-written classification. The code resembles a student assignment attempting slightly more complex output than basic ChatGPT examples.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `System.out.print(""Item Prices: ["");`
    - **Explanation:** This line, along with its corresponding closing bracket after the loop, shows an attempt to format output in a way not commonly seen in basic ChatGPT-generated code. While ChatGPT can generate formatted output, it usually sticks to simpler formats. This specific formatting suggests a human touch aiming for a more visually structured output.
- **Key Code Line 2:** `if(i!=4) { System.out.print(itemPrices[i]+"", ""); }else { System.out.print(itemPrices[i]); }`
    - **Explanation:**  Handling the last element of the array differently to avoid a trailing comma demonstrates deliberate formatting, a characteristic more typical of human-written code. ChatGPT tends to prioritize functional correctness over nuanced formatting, often leading to simpler, less polished output.
- **Key Code Line 3:** `avg = avg/n;`
    - **Explanation:** While simple, this line, in conjunction with the prior summing loop, represents a slightly less direct approach than what ChatGPT usually produces. ChatGPT tends to combine calculations and might directly calculate the average within the loop.  This separate averaging step suggests a human thought process, possibly emphasizing clarity over conciseness.
- **Key Code Line 4:**  `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Explanation:**  This complex output line, integrating the item number, formatted price, and grade, further demonstrates human-like attention to detail in presentation.  ChatGPT can generate formatted output, but this level of integration is less common, especially in simpler examples. It suggests a human desire to present information comprehensively.
- **Key Code Line 5:** `grades[i] = g;`
    - **Explanation:**  The use of a temporary variable 'g' within the grading loop, while not strictly necessary, reflects a coding style often seen in human-written code. ChatGPT typically assigns directly to the array element, optimizing for conciseness.  This slightly less optimized approach hints at a human thought process potentially prioritizing code readability.

**Comparison to Previous Examples**

1. **Formatting and Output:**  The target code shows more attention to output formatting compared to the ChatGPT examples.

    - **Target Code:** `System.out.print(""Item Prices: [""); ... System.out.println(""]"");`
    - **ChatGPT Example 1 (0_Exercise03_18.java):**  `System.out.printf(""The shipping cost is $%.2f\n"", cost);`
    - **ChatGPT Example 2 (0_Exercise03_33.java):** `System.out.println(""Package 1 has a better price."");`

    The ChatGPT examples demonstrate basic output functionality, while the target code goes further with custom formatting, like the bracketed list of prices.

2. **Logic and Calculation:** While the core logic is similar to the ChatGPT examples, the target code's grading system is slightly more involved.

    - **Target Code:**  Nested `if-else if` structure for grade assignment based on price ranges.
    - **ChatGPT Example 1 (0_Exercise03_18.java):** Nested `if-else if` for shipping cost based on weight ranges.

    Both use nested `if-else if`, but the target code's grading logic appears slightly more complex than simply assigning values based on ranges, as seen in the shipping cost example.


3. **Code Style:** The target code exhibits minor inefficiencies not typically seen in the highly optimized code produced by ChatGPT.

    - **Target Code:** Repeated access to `itemPrices[i]` in the output loop.
    - **ChatGPT Example 2 (0_Exercise03_33.java):** Variables are used efficiently to store calculated values (`costPerUnitWeight1`, `costPerUnitWeight2`).

    ChatGPT tends to optimize code by storing values in variables to avoid redundant calculations. The target code doesn't adhere to this, suggesting human writing.


4. **Structure:** Compared to the more structured nature of the human-written examples, the target code sits somewhere in between. While it uses an array and iterates over it similar to how the human-written example `1_Exercise12_25.java` parses lines from a file, it lacks the explicit function definitions seen in `1_Exercise12_24.java`. This relative lack of distinct functional blocks, along with the simpler logic than the human examples, contributes to the uncertainty reflected in the probabilities.


These comparisons highlight the subtle differences that likely led the model to classify the target code as human-written. The code's formatting, slight inefficiencies, and more complex output compared to the ChatGPT examples suggest human input, while its lack of extensive structure and reliance on simpler logic distinguishes it from the provided human-written samples, reflecting the close classification probabilities assigned by the model.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 48, 30, 191000)}"
pattaraporn.san@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its simplistic, straightforward structure, typical of beginner-level programming exercises often seen in ChatGPT outputs.  The code demonstrates a basic understanding of loops and conditional statements but lacks the complexity and nuanced logic often present in human-written code.  The repetitive nature of the code, particularly in the nested loops for seat status and counting, further contributes to this classification.  The comments, while present, are rather generic and explanatory of obvious code functionality.  The variable naming is clear, but the overall problem being solved is rudimentary.  The absence of any error handling or more sophisticated data structures also points towards a simpler, AI-generated solution. The hardcoded row and column numbers indicate a lack of flexibility, and the sequential, predictable seat reservation logic (even seats reserved) further solidifies the ChatGPT-generated likelihood. The code's overall structure resembles introductory tutorial examples commonly generated by AI.

---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `final int ROWS = 10;`
    - **Explanation:**  Hardcoded values like this are common in ChatGPT-generated code for simple examples. Human-written code often favors configurable values, either through user input or external configuration, for greater flexibility.

- **Key Code Line 2:** `final int COLUMNS = 15;`
    - **Explanation:** Similar to the previous point, this hardcoded column number reinforces the simplicity and lack of dynamic behavior often found in AI-generated examples.

- **Key Code Line 3:** `// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)`
    - **Explanation:** This comment, while helpful, explains a very simple and predictable logic. Human-written code might have a more complex reservation system and thus more nuanced comments.  The explicitness of this comment hints at AI attempting to demonstrate understanding, a characteristic observed in ChatGPT outputs.

- **Key Code Line 4:** `if (col % 2 == 0) { System.out.print(""S"" + col + ""-R ""); } else { System.out.print(""S"" + col + ""-A ""); }`
    - **Explanation:**  The simplistic even/odd logic for reservation is typical of AI-generated example code. Real-world scenarios would likely involve a more complex reservation mechanism.

- **Key Code Line 5:**  `reservedSeats++; // Even seats are reserved`
    - **Explanation:** This comment is overly explanatory for a straightforward increment operation, another characteristic often seen in AI-generated code aiming for clarity and demonstration of understanding.


**Comparison to Previous Examples**:

- **Simplicity and Structure:** The target code shares the simplistic structure of the ChatGPT-generated examples, particularly Example 1 (NineHeadsAndTails) and Example 2 (CardPicker). Both examples feature simple loops, straightforward logic, and hardcoded values, similar to the target code.  They also solve relatively simple tasks, much like the MUTheater code.

    - **Target Code:**
    ```java
    for (int row = 1; row <= ROWS; row++) {
        System.out.print(""Row "" + row + "": "");
        for (int col = 1; col <= COLUMNS; col++) {
            System.out.print(""S"" + col + "" "");
        }
        System.out.println();
    }
    ```

    - **ChatGPT Example 1 (NineHeadsAndTails):**
    ```java
    for (int i = 0; i < binaryString.length(); i++) {
        if (i % 3 == 0) {
            System.out.println(); // Start a new row
        }
         // ... (rest of the loop)
    }
    ```

- **Lack of Complexity:** Unlike the human-written examples, the target code doesn't demonstrate the complex logic and nuanced problem-solving seen in Example 1 (Exercise06_15) and Example 2 (Exercise08_09).  The human-written examples address more intricate tasks involving tax calculation and game logic, employing a wider range of programming constructs.

    - **Target Code:** (Simple seat reservation logic)
    ```java
    if (col % 2 == 0) {
      reservedSeats++;
    } else {
      availableSeats++;
    }
    ```

    - **Human Example 1 (Exercise06_15):** (Complex tax calculation)
    ```java
    if (taxableIncome <= upBound10)
        tax = taxableIncome * 0.10;
    else if (taxableIncome <= upBound15)
        tax = upBound10 * 0.10 + (taxableIncome - upBound10) * 0.15;
    // ... (rest of the complex tax calculation)
    ```

- **Explanatory Comments:** The target code's comments resemble those in the ChatGPT examples, being more explanatory of basic operations. The human-written examples tend to have comments focusing on higher-level design choices or non-obvious logic.


The similarities with ChatGPT examples and the differences from human-written examples, in terms of simplicity, structure, complexity, and commenting style, all contribute to the model's classification of the target code as ChatGPT-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 52, 46, 926000)}"
pattaraporn.san@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target source code as ChatGPT-generated due to its simple, linear structure and straightforward implementation of a basic billing system.  The code lacks complexity and sophistication, resembling introductory programming exercises often generated by ChatGPT when prompted with simple problem descriptions. Specific indicators include:

* Explicitly numbered tasks (Task 1, Task 2, etc.) embedded in comments, a practice often observed in ChatGPT output when the prompt outlines steps or requirements.
*  Basic input/output operations using `Scanner` and `System.out.println`, typical of beginner-level programs.
*  A simple `switch` statement for price calculation, lacking more nuanced pricing structures.
*  A single, straightforward discount rule, without more complex logic.
*  Concise variable naming conventions and a relatively small code size, further contributing to the perception of simplicity.
*  Lack of error handling beyond the default switch case.
*  No use of custom functions or classes suggesting a lack of abstraction.


---

**Highlight and Explain Key Code Lines**

* **Key Code Line 1:** `// Task 1: Define Variables`
    * **Explanation:** This comment style, explicitly labeling sections with ""Task,"" is frequently observed in ChatGPT output, particularly when the original prompt is structured as a sequence of steps or requirements. It suggests the code was generated in response to a prompt that outlined these specific tasks.
* **Key Code Line 2:** `double totalCost = 0, discount = 0, finalCost;`
    * **Explanation:** Declaring multiple variables of the same type on a single line is a stylistic choice often seen in ChatGPT-generated code.  While not inherently wrong, it can indicate generated code, especially when combined with other factors.
* **Key Code Line 3:**  `switch (coffeeType.toLowerCase()) {`
    * **Explanation:**  The use of a simple `switch` statement for handling different coffee types, without more sophisticated logic or error handling (besides printing ""Invalid coffee type""), aligns with the typical structure of introductory programs often generated by ChatGPT. 
* **Key Code Line 4:**  `if (numberOfCups > 5) {`
    * **Explanation:** The very basic discount logic (a single threshold for a fixed percentage) is indicative of a simple problem description, commonly used in prompts for AI code generation.  Human-written code might incorporate more nuanced discount tiers or other business rules.
* **Key Code Line 5:** `System.out.println(""Total Cost: "" + totalCost + "" Baht"");`
    * **Explanation:**  While perfectly valid, concatenating strings with the '+' operator is frequently seen in ChatGPT output for basic output formatting.  Human developers might favor more advanced formatting techniques (e.g., `String.format()`) for improved readability and flexibility.


**Comparison to Previous Examples**

* **Similarity to ChatGPT Example 1 (0_Exercise05_21.java):**  Both the target code and this example exhibit a linear structure, relying primarily on basic input/output operations and simple calculations within the `main` method.  They both lack more advanced programming constructs like functions or classes.

    ```java
    // Target Code:  Calculating total cost based on coffee type
    switch (coffeeType.toLowerCase()) {
        // ... cases for each coffee type
    }

    // ChatGPT Example 1: Calculating loan payments for different interest rates
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
        // ... calculations for each interest rate
    }
    ```

    Both snippets utilize a basic control flow structure (`switch` and `for`, respectively) to perform a series of calculations based on input values, highlighting the simplistic nature of both programs.


* **Similarity to ChatGPT Example 2 (0_Exercise03_18.java):**  Similar to the previous comparison, both the target code and this example rely heavily on conditional logic (`switch` in the target code, `if-else` in the example) to determine outcomes based on input values. This indicates a similar level of complexity (or lack thereof) in both programs.

    ```java
    // Target Code: Determining price based on coffee type
    switch (coffeeType.toLowerCase()) {
        // ... price calculations
    }

    // ChatGPT Example 2: Calculating shipping cost based on weight
    if (weight > 50) {
        // ... shipping cost calculations
    } else if (weight > 10) {
        // ... more cost calculations
    } // ... etc
    ```


* **Difference from Human-written Example 1 (1_Exercise08_12.java):** This human-written example showcases a higher level of code organization and abstraction through the use of a separate function `calcTax()`. The target code lacks such modularity.

    ```java
    // Target Code: All logic within the main method
    public static void main(String[] args) {
        // ... all calculations and output here
    }


    // Human-written Example 1: Using a separate function for tax calculation
    static double calcTax(double income, int[] bracket, double[] rates) {
        // ... tax calculation logic here
    }
    ```

* **Difference from Human-written Example 2 (1_Exercise06_15.java):** This human-written example demonstrates more advanced formatting techniques using string constants and calculations within `System.out.print` statements.  The target code relies on simpler string concatenation.

    ```java
    // Target Code: Basic string concatenation
    System.out.println(""Total Cost: "" + totalCost + "" Baht"");

    // Human-written Example 2: Advanced formatting in output
    System.out.print(spacex2 + Math.round(computeTax(0, i)));
    ```

These comparisons highlight the target code's resemblance to the ChatGPT-generated examples in terms of structure and complexity, and its difference from human-written examples in terms of organization and coding style. These factors contribute to the model's classification of the target code as ChatGPT-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 2, 54, 51, 124000)}"
suradej.intagorn.llm@gmail.com,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated at 100% probability likely stems from several key features and patterns. These include a structured and consistent coding style, extensive use of comments for clarity, a methodical approach to problem-solving, and a tendency to write self-contained, comprehensive methods. The code's clear structure, use of helper methods, and the precise formatting of outputs are typical characteristics of AI-generated code, which tends to be more standardized and concise compared to human-written code. Additionally, the code's logical flow and the way it handles edge cases, such as leap years, reflect a systematic approach often found in AI-generated code.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: 
   ```java
   // Create scanner object to capture user input
   Scanner scanner = new Scanner(System.in);
   ```
   - **Explanation**: This line demonstrates a common pattern in AI-generated code where comments are used to clearly describe the function of each code segment. The comment is succinct and directly tied to the code, which is a characteristic of ChatGPT-generated code aiming for clarity and readability.

2. **Code Line**:
   ```java
   int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                  checkOutYear, checkOutMonth, checkOutDay);
   ```
   - **Explanation**: The use of a helper method (`calculateDaysBetweenDates`) to encapsulate complex logic is a hallmark of AI-generated code. This approach promotes modularity and reusability, which is often emphasized in AI-generated solutions to maintain clean and organized code.

3. **Code Line**:
   ```java
   System.out.println(""\n** No STAR Hotel **"");
   System.out.println(""== Hotel Invoice =="");
   ```
   - **Explanation**: The formatting of output with decorative elements (like ""**"" and ""=="") is typical of AI-generated code, which often includes such embellishments to enhance user experience and output readability.

4. **Code Line**:
   ```java
   int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
   ```
   - **Explanation**: The explicit declaration of a fixed-size array to handle month days reflects a structured and predefined approach to handling data, a characteristic frequently found in AI-generated code. This methodical setup is indicative of AI's approach to problem-solving by preemptively addressing potential edge cases.

5. **Code Line**:
   ```java
   return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   ```
   - **Explanation**: This concise and efficient leap year calculation demonstrates the algorithmic efficiency typical of AI-generated code. The use of a single-line return statement for complex logic is a common pattern in AI-generated solutions to maintain brevity and clarity.

**Comparison to Previous Examples**

- **Example 1 (ChatGPT-generated)**:
  ```java
  // Calculate future investment value
  double monthlyInterestRate = annualInterestRate / 1200.0; // 12 months in a year, 100 to convert percentage to decimal
  ```
  - **Comparison**: Similar to the target code, this example uses comments to elucidate the calculation process, reflecting AI's tendency to include explanatory comments for clarity.

- **Example 2 (ChatGPT-generated)**:
  ```java
  double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
  ```
  - **Comparison**: The use of precise mathematical formulas in a single line mirrors the target code's approach to calculating leap years and days between dates, showcasing AI's preference for compact and efficient expressions.

- **Example 1 (Human-written)**:
  ```java
  System.out.printf(""Accumulated Value is $%.2f"",
                    investmentAmount * Math.pow(monthInterestRate + 1, years));
  ```
  - **Comparison**: While similar in functionality, the human-written example lacks the extensive use of comments and structured helper methods seen in the target code, highlighting AI's emphasis on modularity and clarity.

- **Example 2 (Human-written)**:
  ```java
  for (int i = 1; i <= numberOfMonths; i++) {
      total = (investment + total) * (1 + (interestRate / 12));
  }
  ```
  - **Comparison**: The iterative approach here contrasts with the target code's use of helper methods, demonstrating AI's preference for encapsulating logic in reusable functions rather than inline loops.

The similarities in structured comments, modular design, and efficient calculations between the target source code and ChatGPT-generated examples support the classification decision, while the differences in approach and style compared to human-written examples further reinforce the model's assessment.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 4}, 'feedback_additional': 'Additional provided code example should compare with the target source code.', 'submitted_at': datetime.datetime(2025, 3, 26, 4, 36, 58, 898000)}"
suradej.intagorn.llm@gmail.com,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification model determined the target source code as human-written with 100% probability. This classification is likely due to several influential features and patterns that are typically associated with human-written code. These include verbose and detailed print statements, manual string manipulation, and the use of traditional sorting algorithms with explicit control structures. The code also contains manual index tracking, which is often a sign of human-written code as AI-generated code tends to use more abstracted or higher-level functions. Additionally, the presence of comments and a lack of overly generic code patterns contribute to this classification.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1:**
  ```java
  for(int i = 0; i < n - 1; i++)
  ```
  - **Explanation:** This loop is clearly structured for a selection sort implementation, which is a straightforward and traditional sorting algorithm. The explicit use of nested loops and manual index management are characteristics often seen in human-written code, as AI-generated code might opt for more complex or less verbose methods.

- **Code Line 2:**
  ```java
  System.out.print(""Pass ""+ (i+1)+"": ["");
  ```
  - **Explanation:** The detailed print statement, which provides insights into the sorting process at every pass, suggests a human touch. This level of verbosity and the effort to make the program's execution transparent is typical of human-written code, aimed at debugging or educational purposes.

- **Code Line 3:**
  ```java
  if(arr[j].compareTo(minStr) > 0)
  ```
  - **Explanation:** This conditional statement uses the `compareTo` method for string comparison, which is a direct and explicit approach. Human programmers often use such straightforward methods for clarity and simplicity, especially when dealing with string comparisons.

- **Code Line 4:**
  ```java
  if(min_index != i)
  ```
  - **Explanation:** This check ensures that a swap only occurs when necessary, which is a subtle optimization. This kind of attention to detail and efficiency is a hallmark of human-written code, as it reflects an understanding of algorithmic efficiency.

- **Code Line 5:**
  ```java
  String temp = arr[min_index];
  ```
  - **Explanation:** The use of a temporary variable for swapping elements is a classic programming technique. This explicit handling of swaps is more detailed than what might be generated by AI, which could use more abstracted methods or built-in functions.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  ```java
  int[] result = new int[list1.length + list2.length];
  ```
  - **Target Code Excerpt:**
    ```java
    String temp = arr[min_index];
    ```
  - **Analysis:** The ChatGPT-generated example uses more abstract data handling, whereas the target code uses explicit, low-level data manipulation with temporary variables. This suggests a human-written approach due to the manual and straightforward handling of swaps.

- **Comparison with ChatGPT-generated Example 2:**
  ```java
  boolean swapped;
  ```
  - **Target Code Excerpt:**
    ```java
    if(min_index != i)
    ```
  - **Analysis:** The ChatGPT-generated code uses a boolean flag for control flow, which is a more modern and abstract approach. In contrast, the target code uses a direct comparison and swap method, indicative of a human's step-by-step problem-solving approach.

- **Comparison with Human-written Example 1:**
  ```java
  int ind = a[i];
  ```
  - **Target Code Excerpt:**
    ```java
    int min_index = i;
    ```
  - **Analysis:** Both examples show manual index tracking and manipulation, a common practice in human-written code to maintain control over the algorithm's execution.

- **Comparison with Human-written Example 2:**
  ```java
  loop = false; //Reset to check if can remain false
  ```
  - **Target Code Excerpt:**
    ```java
    System.out.print(""Pass ""+ (i+1)+"": ["");
    ```
  - **Analysis:** Both examples include detailed comments or print statements to elucidate the program's logic, a characteristic feature of human-written code aimed at improving readability and understanding.

These comparisons highlight the target code's alignment with human-written examples through its explicit control structures, detailed print statements, and traditional algorithm implementations, supporting the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 13, 50, 820000)}"
suradej.intagorn.llm@gmail.com,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model's classification of the target source code as human-written is influenced by several key features. The code demonstrates a structured and methodical approach to problem-solving, evident in its clear task division and detailed comments. The use of standard Java libraries and idiomatic constructs, such as arrays and loops, reflects conventional programming practices. The code's logic is straightforward, focusing on user input, calculations, and conditional checks, which are typical of human-written code. The absence of overly verbose comments or unnecessarily complex constructs, often seen in AI-generated code, further supports its classification as human-written. The code also lacks the uniform style and patterns often associated with AI-generated examples.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `System.out.println(""==MUGrocery=="");`
   - **Explanation**: This line shows a simple and direct approach to displaying a message, a common practice in human-written code. The use of ""==MUGrocery=="" as a header is a straightforward and human-like way to denote the start of a program section, lacking the overly formal or generic style seen in AI-generated outputs.

2. **Code Line**: `for(int i =0; i< n;i++) {`
   - **Explanation**: The loop structure here is typical of human programmers who use loops to iterate over arrays. The concise and efficient use of a `for` loop to process input data is a hallmark of human-written code, focusing on clarity and simplicity without unnecessary complexity.

3. **Code Line**: `if(itemPrices[i] < 15) {`
   - **Explanation**: The use of conditional statements to categorize data (in this case, assigning grades based on price) is a conventional programming technique. The straightforward logic and clear thresholds for grading are indicative of human reasoning, where simplicity and directness are preferred.

4. **Code Line**: `System.out.println(""Average Price: ""+ avg);`
   - **Explanation**: This line demonstrates a clear and direct way of outputting calculated results, typical in human-written code. The use of string concatenation to form a coherent output message is a common practice among human developers.

5. **Code Line**: `char[] grades = new char[n];`
   - **Explanation**: The declaration and initialization of an array to store grades is a standard practice in Java. This approach reflects an understanding of data structures and their efficient use, which is characteristic of human-written code.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Code (Example 1)**:
  - **ChatGPT Example**: 
    ```java
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Target Code**:
    ```java
    if(itemPrices[i] < 15) {
        g = 'A';
    }
    ```
  - **Analysis**: Both snippets use conditional statements, but the target code's conditions are part of a grading system, which reflects a more nuanced and human-like decision-making process compared to the straightforward checks in the ChatGPT example.

- **Comparison with Human-written Code (Example 1)**:
  - **Human Example**:
    ```java
    StringBuilder recordBuilder = new StringBuilder();
    ```
  - **Target Code**:
    ```java
    char[] grades = new char[n];
    ```
  - **Analysis**: Both lines exhibit a clear understanding of Java's data structures. The target code's use of an array for storing grades is similar to the human example's use of `StringBuilder`, indicating efficient data handling and storage practices typical of human programmers.

- **Comparison with ChatGPT-generated Code (Example 2)**:
  - **ChatGPT Example**:
    ```java
    System.out.print(""Enter weight and price for package 1: "");
    ```
  - **Target Code**:
    ```java
    System.out.print(""Enter price for item "" + (i+1) +"": "");
    ```
  - **Analysis**: Both examples involve user input prompts. However, the target code's use of a loop to dynamically adjust the prompt message (e.g., ""item "" + (i+1)) demonstrates a level of adaptability and efficiency more commonly seen in human-written code.

- **Comparison with Human-written Code (Example 2)**:
  - **Human Example**:
    ```java
    if (employeeRecord[2].equals(ASSISTANT)) {
        countAssistant++;
        totalSalaryAssistant += Double.parseDouble(employeeRecord[3]);
    }
    ```
  - **Target Code**:
    ```java
    if(itemPrices[i] < 15) {
        g = 'A';
    }
    ```
  - **Analysis**: Both examples use conditional logic to process data. The human example processes employee records, while the target code assigns grades based on price. The logical structure and clarity in both cases reflect human-like problem-solving skills.

Overall, the target source code's characteristics align more closely with the human-written examples, demonstrating clear logic, efficient use of constructs, and straightforward problem-solving, supporting its classification as human-written.","{'ratings': {'overall': 3, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': 'Comparison between StringBuilder recordBuilder = new StringBuilder(); and char[] grades = new char[n]; is quite not useful', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 6, 3, 25000)}"
suradej.intagorn.llm@gmail.com,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model classifies the target source code as ChatGPT-generated with 100% probability due to several key features. The code exhibits a structured and systematic approach to solving the problem, with clear, repetitive patterns that are characteristic of AI-generated content. The use of comments to explain each section, the consistent formatting, and the straightforward logic without unnecessary complexity are typical indicators of ChatGPT-generated code. Additionally, the code's task-oriented nature, focusing on a step-by-step solution, aligns with the patterns observed in AI-generated samples.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** 
   ```java
   System.out.println(""== MUTheater Seat Layout =="");
   ```
   - **Explanation:** This line demonstrates a clear and descriptive output message, a common feature in ChatGPT-generated code. AI models often use explicit and informative print statements to enhance readability and user understanding.

2. **Code Line:** 
   ```java
   for (int col = 1; col <= COLUMNS; col++) {
       System.out.print(""S"" + col + "" "");
   }
   ```
   - **Explanation:** The loop structure and concatenation of strings for seat labels show a systematic approach typical of AI-generated code. The use of simple iteration and string manipulation reflects the model's tendency to implement straightforward logic.

3. **Code Line:** 
   ```java
   if (col % 2 == 0) {
       System.out.print(""S"" + col + ""-R "");
   } else {
       System.out.print(""S"" + col + ""-A "");
   }
   ```
   - **Explanation:** The conditional logic to determine seat status (reserved or available) is direct and efficient. This type of explicit condition handling is a hallmark of AI-generated code, aiming for clarity and simplicity.

4. **Code Line:** 
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;
   ```
   - **Explanation:** The initialization of counters is a common pattern in AI-generated code, where variables are clearly defined and used systematically to keep track of counts or states.

5. **Code Line:** 
   ```java
   System.out.println(""Total Reserved Seats: "" + reservedSeats);
   System.out.println(""Total Available Seats: "" + availableSeats);
   ```
   - **Explanation:** The final output of calculated results with descriptive text is typical of AI-generated code, which often includes comprehensive output statements for clarity.

**Comparison to Previous Examples**

The target source code shares several features with the ChatGPT-generated examples, such as the use of straightforward logic and clear output messages. For instance, in Example 1 of the ChatGPT-generated samples:

- **Example Code Snippet:**
  ```java
  System.out.print(""Enter a number between 0 and 511: "");
  ```
  - **Comparison:** Similar to the target code's use of descriptive print statements, this line from the example also aims to guide the user with clear instructions, a common AI-generated trait.

- **Example Code Snippet:**
  ```java
  for (int i = 0; i < binaryString.length(); i++) {
      if (i % 3 == 0) {
          System.out.println();
      }
  }
  ```
  - **Comparison:** The use of loops and conditionals to manage output format in this example aligns with the target code's approach to seating layout and status display.

In contrast, the human-written examples exhibit more complex logic and less repetitive patterns. For example, in Example 1 of the human-written samples:

- **Example Code Snippet:**
  ```java
  public static double computeTax(int status, double taxableIncome) {
      // Complex logic for tax computation
  }
  ```
  - **Comparison:** The complex logic and multiple conditional branches in the human-written example differ from the straightforward and repetitive patterns in the target code, supporting its classification as AI-generated.

Overall, the target source code's structured and clear approach, alignment with AI-generated patterns, and differences from the more complex human-written examples support the model's classification decision.","{'ratings': {'overall': 2, 'conciseness': 4, 'clarity': 4, 'actionability': 2, 'selected_line_useful': 2, 'additional_code_useful': 2}, 'feedback_additional': 'The explanation is unconvincing and contradictory to previous explanations', 'submitted_at': datetime.datetime(2025, 3, 26, 4, 56, 26, 490000)}"
suradej.intagorn.llm@gmail.com,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with 100% probability due to several distinctive features and patterns commonly associated with AI-generated code. These include highly structured and clear comments, consistent variable naming conventions, and a systematic approach to problem-solving, which are hallmarks of AI-generated code. The code's logical flow, task-oriented structure, and the presence of comprehensive comments suggest an AI-generated origin. Additionally, the use of specific programming constructs and the overall style align closely with the patterns observed in the ChatGPT-generated examples provided. The model likely identified these features as indicative of AI-generated code, leading to the classification decision.

---

**Highlight and Explain Key Code Lines**

1. **Line: `// Task 1: Define Variables`**
   - **Explanation**: The use of numbered tasks and descriptive comments is a common pattern in AI-generated code. ChatGPT often structures code with explicit task delineations to ensure clarity and organization. This comment serves as a clear indicator of AI-generated content due to its instructional style.

2. **Line: `switch (coffeeType.toLowerCase())`**
   - **Explanation**: The use of `toLowerCase()` in conjunction with a switch statement demonstrates a comprehensive approach to handling user input variations. This is typical of AI-generated code, which often anticipates and accounts for user input discrepancies to enhance robustness.

3. **Line: `if (numberOfCups > 5) { discount = totalCost * 0.10; // 10% discount }`**
   - **Explanation**: The inclusion of a discount logic with a specific threshold and a comment explaining the discount percentage is indicative of ChatGPT's systematic and educational approach to code generation. The comment provides clarity and is characteristic of AI-generated explanations.

4. **Line: `System.out.println(""\n== Welcome to ICT Coffee Shop =="")`**
   - **Explanation**: The use of formatted strings for user interaction, including decorative elements like ""=="", reflects an AI's tendency to generate user-friendly and aesthetically pleasing output. This attention to output formatting is prevalent in ChatGPT-generated code.

5. **Line: `scanner.close();`**
   - **Explanation**: The explicit closing of the `Scanner` object is a best practice often emphasized in AI-generated code to prevent resource leaks. While human-written code may sometimes omit this, AI-generated code tends to adhere strictly to best practices.

**Comparison to Previous Examples**

- **Structured Comments and Task Orientation:**
  - **Target Code**: `// Task 1: Define Variables`
  - **Example 1 (ChatGPT-generated)**: The structured comments in ""LoanCalculator"" such as ""// Prompt the user to enter the loan amount and loan period"" reflect a similar approach to task-oriented comments.
  - **Comparison**: Both the target code and the ChatGPT-generated examples utilize clear, structured comments to delineate tasks, a common feature in AI-generated code.

- **Input Handling and Robustness:**
  - **Target Code**: `switch (coffeeType.toLowerCase())`
  - **Example 2 (ChatGPT-generated)**: In ""ShippingCost"", the code includes robust input handling with multiple conditions for weight categories.
  - **Comparison**: The target code's use of `toLowerCase()` for input normalization aligns with the robust input handling found in the ChatGPT-generated example, showcasing AI's focus on comprehensive input management.

- **Logical Flow and Comments:**
  - **Target Code**: `if (numberOfCups > 5) { discount = totalCost * 0.10; // 10% discount }`
  - **Example 1 (ChatGPT-generated)**: The ""LoanCalculator"" example uses comments to explain interest rate calculations, similar to the discount explanation in the target code.
  - **Comparison**: Both codes provide explanatory comments alongside logical operations, a characteristic often seen in AI-generated code to enhance readability and understanding.

- **Output Formatting:**
  - **Target Code**: `System.out.println(""\n== Welcome to ICT Coffee Shop =="")`
  - **Example 2 (ChatGPT-generated)**: The ""ShippingCost"" example uses formatted strings to present output messages clearly.
  - **Comparison**: The attention to output formatting in both the target and example codes is indicative of AI-generated code's focus on user-friendly interfaces.

- **Best Practices:**
  - **Target Code**: `scanner.close();`
  - **Example 1 (Human-written)**: The human-written example ""Exercise08_12"" also closes the `Scanner` object, showing adherence to best practices.
  - **Comparison**: While both AI-generated and human-written codes may adhere to best practices, the consistent application of such practices in AI-generated code, as seen in the target code, supports its classification as AI-generated.

These comparisons highlight the alignment of the target source code's features with those typical of ChatGPT-generated examples, reinforcing the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 4, 44, 15, 827000)}"
suradej.intagorn.llm@gmail.com,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors including its verbose commenting style, straightforward variable naming, and the inclusion of a helper function (calculateDaysBetweenDates) for a relatively simple task.  The structure, while functional, lacks the conciseness and potential optimization a human programmer might employ.  The comments often state the obvious action of the code immediately following, a common characteristic of AI-generated code trained on heavily commented datasets.  The date handling, while thorough, also exhibits a step-by-step approach that might be seen as less efficient than utilizing built-in date/time libraries, something a human programmer would be more inclined to use.  The overall impression is of code generated to fulfill a specific prompt with detailed instructions, rather than code written by a human focusing on efficiency and reusability.
---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `// CODE HERE`
    - **Explanation:** This placeholder comment is a telltale sign of AI generation, often appearing when a prompt specifies a particular structure or function to be filled in later. Human programmers rarely leave such comments, especially in a finished code submission.

- **Key Code Line 2:** `// Create scanner object to capture user input` followed immediately by `Scanner scanner = new Scanner(System.in);`
    - **Explanation:** This overly descriptive comment immediately preceding the code it describes is typical of ChatGPT output. Human programmers would assume the purpose is clear from the code itself.

- **Key Code Line 3:** `// Parse the check-in and check-out dates into individual components` followed by `String[] checkInDateParts = checkInDate.split(""-"");` and  `String[] checkOutDateParts = checkOutDate.split(""-"");`
    - **Explanation:**  Again, the comment explains the obvious.  This redundancy is characteristic of AI-generated code trained on datasets with detailed comments, often mirroring instructional materials.

- **Key Code Line 4:** `// Convert to integers for calculations` followed by `int checkInYear = Integer.parseInt(checkInDateParts[0]);` etc.
    - **Explanation:** The comment restates the code's function redundantly. Human programmers would likely combine these steps or assume the type conversion is understood from the context.

- **Key Code Line 5:** `// Helper method to calculate the number of days between two dates`
    - **Explanation:** While helper functions are common, the task of calculating days between dates is readily achievable with library functions in most languages. The creation of a custom function for this relatively basic operation suggests an AI attempting to fulfill a prompt's explicit instructions rather than leveraging existing tools.


**Comparison to Previous Examples**:

- **Verbose Comments:** The target code's excessive commenting mirrors the ChatGPT example (0_Exercise02_21.java):

    **Target Code:**
    ```java
    // Calculate the total rent
    double totalRent = roomPricePerNight * numberOfNights;
    ```

    **ChatGPT Example (0_Exercise02_21.java):**
    ```java
    // Calculate future investment value
    double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);
    ```

    Both snippets have comments that describe exactly what the code does, a hallmark of ChatGPT.  In contrast, the human examples (e.g., 1_Exercise02_21.java) demonstrate more concise and purposeful commenting, often explaining *why* a particular calculation is done rather than *what* is being calculated.

- **Basic Variable Naming:**  The target code uses straightforward variable names like `checkInDate`, `checkOutDate`, etc., similar to the ChatGPT example (0_Exercise05_21.java):

    **Target Code:**
    ```java
    double roomPricePerNight = 900.50;
    String checkInDate, checkOutDate;
    ```

    **ChatGPT Example (0_Exercise05_21.java):**
    ```java
    double loanAmount = input.nextDouble();
    int numberOfYears = input.nextInt();
    ```

    Human-written code (like 1_Exercise05_30.java) might employ slightly more concise or context-specific names, like `investment`, `interestRate`, reflecting a higher level of coding maturity.

- **Explicit, Step-by-Step Logic:** The target code breaks down calculations into very explicit steps, as seen in its date parsing and calculation, resembling the approach in the ChatGPT Example (0_Exercise05_21.java) which explicitly calculates the monthly and total payment in separate steps within the loop.  Human-written examples often combine steps or use more concise library functions where possible.


These similarities to the ChatGPT examples, coupled with the absence of features often seen in human-written code (conciseness, library usage, insightful comments), strongly contribute to the model's classification of the target code as AI-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 17, 13, 31000)}"
suradej.intagorn.llm@gmail.com,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including its specific sorting implementation (descending selection sort with embedded print statements for each pass), verbose commenting style within the sorting logic, the use of `compareTo` for string comparison, and the overall structure resembling a coding exercise or demonstration rather than a concise, optimized solution typically generated by LLMs. The code also focuses on a specific task with a limited scope, which is more characteristic of human-written examples in educational contexts. The absence of common LLM patterns like extensive use of built-in library functions or overly simplified solutions further contributes to the human-written classification.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `public static void sorting(String arr[],int n)`
    - **Explanation:**  The function name `sorting` is slightly less conventional than `sort`, which might be preferred by an LLM or in professional codebases. The explicit parameter `n` for array length, while functional, is also less common in typical LLM-generated code which often relies on `arr.length`.

2. **Key Code Line:** `System.out.print(""Pass ""+ (i+1)+"": ["");`
    - **Explanation:**  This print statement within the sorting loop suggests a pedagogical or demonstrative intent, typical of a human demonstrating the sorting process step-by-step.  LLMs rarely produce such verbose output for sorting algorithms unless explicitly prompted to do so.

3. **Key Code Line:** `if(arr[j].compareTo(minStr) > 0)`
    - **Explanation:** The use of `compareTo` for string comparison, while standard practice, indicates a developer's conscious decision. LLMs might sometimes opt for simpler comparisons (e.g., using `<` or `>`) directly on strings if the context doesn't strictly require lexicographical ordering.

4. **Key Code Line:** `if(min_index != i)`
    - **Explanation:** This explicit check before swapping adds a minor optimization, common in human-written code where efficiency might be considered. LLMs often prioritize code simplicity over these minor optimizations, potentially performing the swap unconditionally.

5. **Key Code Line:** `String temp = arr[min_index]; ... arr[i] = temp;`
    - **Explanation:** The explicit use of a `temp` variable for swapping is a very common pattern in human-written code, although LLMs are capable of generating it.


**Comparison to Previous Examples**

* **Verbose Output (Target vs. ChatGPT Example 1):** The target code’s print statements within the `sorting` function contrast sharply with the ChatGPT example's focus on just the final output. This verbose output is reminiscent of the human-written example (Example 1) which provides intermediate print outputs demonstrating the insertion sort progress.

    ```java
    // Target Code
    System.out.print(""Pass ""+ (i+1)+"": [""); // ... print array contents

    // ChatGPT Example 1 (0_Exercise07_31.java) - Excerpt showing only final output
    System.out.print(""The merged list is "");
    for (int i = 0; i < mergedList.length; i++) {
        System.out.print(mergedList[i] + "" "");
    }
    ```
    ```java
    // Human-written Example 1 (1_p02255.java) - Excerpt showing intermediate outputs
    print(a); //Prints the unsorted Array
    System.out.println();
    // ... inside sorting loop
    print(a); // Show the array as it's sorted
    System.out.println();
    ```


* **Explicit Looping and Indexing (Target vs. ChatGPT Example 2):**  The target code uses explicit `for` loops and index manipulation, similar to both ChatGPT Example 2 and human-written examples. However, the presence of the verbose output within the loops differentiates it from the typical LLM-generated example, leaning more toward a human-written style.
    ```java
    // Target Code (excerpt from sorting loop)
    for(int j = i+1; j < n; j++) { /* ... */ }

    // ChatGPT Example 2 (0_BubbleSort3.java) - Excerpt from sorting loop
    for (int j = 0; j < n - i - 1; j++) { /* ... */ }
    ```

* **Algorithm Choice and Structure (Target vs. Human-written Example 2):** The target code implements a descending selection sort with embedded printing, a specific and somewhat unusual choice. This resonates more with the human-written examples, which tend to showcase various sorting algorithms or implement them with slight modifications like the bubble sort with an optimization in ChatGPT Example 2 or the insertion sort with step-by-step output in Human-written Example 1.  LLMs, unless specifically prompted, are likely to generate more common or readily available sorting methods using library functions.

    ```java
    // Target Code (excerpt showing selection sort logic)
    int min_index = i;
    // ... find min element in the remaining unsorted part

    // Human-written Example 2 (1_Exercise11_11.java) -  Excerpt showing use of ArrayList and custom sorting
    public static void sort(ArrayList<Integer> list) { /* ... Custom sorting logic ...*/ } 
    ```

In summary, the combination of the target code’s algorithm implementation, the embedded print statements for demonstration, and the detailed index manipulation within loops align more closely with the characteristics observed in the human-written examples, contributing to its classification as such. The code lacks the hallmarks of typical LLM-generated code like concise library usage or generic, optimized solutions.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 42, 32, 786000)}"
suradej.intagorn.llm@gmail.com,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including a less structured approach to formatting and output, and a slightly less straightforward coding style compared to typical ChatGPT output.  Specifically, the manual formatting of the array output, the slightly convoluted way of assigning grades (using a single `char g` and reassigning it in each loop iteration), and the use of `String.format()` within a `System.out.println()` statement are all indicators that contribute to the ""human-written"" classification. These subtle nuances are less common in initial code generation from LLMs, which tend to favor more concise and standardized output formats.  The relatively simple nature of the overall program also makes it harder to discern definitive patterns.  The model may have struggled to find strong AI-generated signals due to the lack of complex logic or advanced data structures.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `if(i!=4) { System.out.print(itemPrices[i]+"", ""); }else { System.out.print(itemPrices[i]); }`
    - **Explanation:** This code snippet shows a manual approach to formatting the output of the array, adding a comma after each element except the last. ChatGPT typically generates code that uses loop constructs and conditional logic more efficiently, often opting for a cleaner approach like joining array elements with a delimiter using a library function or a more streamlined loop structure. This manual handling suggests human intervention.

2. **Key Code Line:** `char g = 'A';` followed by its reassignment within the loop.
    - **Explanation:** Declaring `g` outside the loop and reassigning it within each iteration is less efficient than declaring and assigning it directly within the conditional blocks.  ChatGPT generally favors more localized variable declarations for better code clarity.  This slightly less direct approach hints at human coding style.

3. **Key Code Line:** `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Explanation:** While ChatGPT *can* use `String.format()`, it often prefers simpler string concatenation when dealing with relatively straightforward formatting tasks like this.  Combining `String.format()` with direct string concatenation within a `println()` statement is more indicative of human-written code.

4. **Key Code Line:**  `avg = avg/n;`
    - **Explanation:** This line, while functionally correct, is slightly less concise than `avg /= n;` which ChatGPT is more likely to produce. This minor stylistic difference might be another signal for human-written code.

5. **Key Code Line:**  `double avg =0;`
   - **Explanation:**  Initializing `avg` to 0.0 instead of just 0 is slightly more explicit, a tendency sometimes seen in human-written code where developers may emphasize type correctness even for default initializations.

**Comparison to Previous Examples**

- **Comparison 1 (Array Output):** The target code's manual array printing contrasts with the more structured approach often seen in ChatGPT-generated code. For example, ChatGPT might use a loop and a conditional to handle the comma placement more elegantly, similar to its handling of conditional output in Example 2 (ChatGPT-generated):

    ```java
    // Target Code
    if(i!=4) {
               System.out.print(itemPrices[i]+"", "");
           }else {
               System.out.print(itemPrices[i]);
           }

    // ChatGPT Example 2 (Snippet - Conceptual Similarity)
    if (costPerUnitWeight1 < costPerUnitWeight2) {
            System.out.println(""Package 1 has a better price."");
        } else if (costPerUnitWeight2 < costPerUnitWeight1) {
            System.out.println(""Package 2 has a better price."");
        } else {
            System.out.println(""Both packages have the same price."");
        } 
    ```

    While the ChatGPT example doesn't handle arrays, it demonstrates a more structured approach to conditional output than the target code. This difference suggests a less automated, more human-like approach in the target code.


- **Comparison 2 (Variable Declaration and Usage):** The use of the `g` variable in the target code differs from the more direct style observed in ChatGPT examples. ChatGPT tends to declare and initialize variables within the scope where they are used, as seen in Example 1 (ChatGPT-generated):

    ```java
    // Target Code
    char g = 'A'; // Declared outside the loop
    // ... later inside the loop ...
    g = 'B'; 

    // ChatGPT Example 1 (Snippet)
    double cost;
    if (weight > 10) {
        cost = 10.5; 
        // ...
    ```

    The ChatGPT example declares `cost` just before its use within the `if` block. This localized declaration is more typical of ChatGPT than the target code's broader scope declaration of `g`.


- **Comparison 3 (String Formatting):**  While both human-written and ChatGPT examples use `String.format()`, the target code combines it with direct concatenation in a way that is more characteristic of human-written code. The human-written examples tend to use `String.format()` in a more focused manner, as illustrated in Example 1 (Human-written):

    ```java
    // Target Code
    System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);

    // Human-written Example 1 (Snippet)
    .append(String.format(""%.2f"", salary)).append("" ""); 
    ```

    The human-written example uses `String.format()` for specific formatting within a larger string building process, which is more organized than the target code's mixed approach. This difference, while subtle, might have contributed to the classification decision.  


These comparisons highlight the nuanced differences between the target code and the provided examples, reinforcing the model's assessment of the target code as human-written. The target code exhibits several characteristics that, while functional, deviate slightly from the more optimized and structured patterns often seen in ChatGPT-generated code. These deviations, combined with similarities to some aspects of the human-written examples, likely led the model to its classification.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 33, 52, 124000)}"
suradej.intagorn.llm@gmail.com,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its simplistic and straightforward nature, typical of code produced when given basic programming prompts.  The code exhibits a structured, almost formulaic, approach to problem-solving, resembling the output of an AI trained on common coding patterns. The use of basic looping constructs, simple arithmetic (like the modulo operator), and straightforward output formatting contribute to this classification. The lack of complex logic or advanced programming techniques, along with the highly structured and repetitive code blocks, aligns with the characteristics often found in ChatGPT-generated code. The code also solves a relatively simple task, creating a seating chart, which is a common introductory programming exercise. Finally, the extensive comments, explaining obvious code functionality, also suggests potential AI generation aimed at providing clear explanations.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `// Task 1: Display the theater's seating layout`
    - **Explanation**: This comment, and similar ones throughout the code, are excessively descriptive for simple operations.  ChatGPT often over-comments, explaining obvious code functionality as if instructing a beginner.  Human-written code often assumes a higher level of reader comprehension.

- **Key Code Line 2**: `for (int row = 1; row <= ROWS; row++) {`
    - **Explanation**: Basic nested `for` loops are frequently used by ChatGPT for tasks involving grids or matrices, like this seating chart. This, combined with the predictable and simple loop structure, aligns with typical ChatGPT code generation patterns.

- **Key Code Line 3**:  `System.out.print(""S"" + col + "" "");`
    - **Explanation**:  This straightforward string concatenation and output reflects ChatGPT's tendency to favor simple and direct methods, even when more elegant solutions might be available to a human programmer.

- **Key Code Line 4**: `// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)`
    - **Explanation**: Again, over-commenting on a simple `if` condition.  A human programmer would likely just write the `if` statement without explicitly stating what the modulo operator is doing in this context.

- **Key Code Line 5**: `if (col % 2 == 0) {`
    - **Explanation**: The use of the modulo operator for alternating assignments (reserved/available) is a common pattern in ChatGPT-generated code, often employed when dealing with even/odd or cyclical patterns.

**Comparison to Previous Examples**


- **Comparison 1: Simple Looping Constructs**: The target code's nested `for` loops are similar to the loops used in the ChatGPT-generated example ""0_Exercise08_11.java"":

    ```java
    // Target Code
    for (int row = 1; row <= ROWS; row++) {
        for (int col = 1; col <= COLUMNS; col++) { 
            // ...
        }
    }

    // 0_Exercise08_11.java
    for (int i = 0; i < binaryString.length(); i++) {
       // ...
    }

    ```
    Both code snippets utilize simple nested loops for iterative operations, a characteristic frequently observed in AI-generated code designed for straightforward tasks. Human-written code, like Example  ""1_Exercise06_15.java"", might still use loops but often integrates them with more complex logic and data structures.


- **Comparison 2:  Explanatory Comments:** The target code's extensive commenting is akin to ""0_Exercise03_24.java"" (ChatGPT-generated), which includes comments like  `// Create a new random number generator`.  In contrast, the human-written example ""1_Exercise08_09.java"" uses comments more sparingly, focusing on clarifying complex logic rather than explaining basic operations.

    ```java
    // Target Code
    // Task 3: Count and display total reserved and available seats

    // 0_Exercise03_24.java
    // Create a new random number generator
    Random random = new Random();

    // 1_Exercise08_09.java (Less verbose comments)
    static {
        boxes = new String[][]{{"""", """", """"},
                {"""", """", """"},
                {"""", """", """"}}; //Tic tac toe board empty 
    }
    ```

- **Comparison 3: Basic String Manipulation**:  The target code uses simple string concatenation, similar to the ChatGPT example ""0_Exercise03_24.java"" (`System.out.println(rank + "" of "" + suit);`).  Human-written code might employ more sophisticated string formatting techniques, especially when dealing with larger outputs.

    ```java
    // Target Code
    System.out.print(""S"" + col + ""-A "");

    // 0_Exercise03_24.java
    System.out.println(rank + "" of "" + suit);
    ```


These similarities to the ChatGPT-generated examples and differences from the human-written examples provide further evidence supporting the model's classification of the target code as AI-generated.  The simplicity, the repetitive patterns, the over-commenting, and the basic string manipulation all point towards the hallmarks of code generated by an AI language model like ChatGPT.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 5, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 28, 50, 727000)}"
suradej.intagorn.llm@gmail.com,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward, linear structure, explicit comments outlining each step (""Task 1"", ""Task 2"", etc.), and the use of a simple `switch` statement for handling different coffee types.  The code lacks the complexity and nuanced error handling often seen in human-written code.  The prompt-response style, where the program requests input and then immediately processes it, is characteristic of ChatGPT outputs. The variable naming conventions, while clear, are also typical of generated code. The handling of discounts and the final output formatting further contribute to the AI-generated classification.  The code's overall simplicity and lack of advanced features likely triggered the model's prediction. Finally, the use of `toLowerCase()` before the switch suggests handling multiple input formats, a common practice in generated code aiming for robustness based on simple prompts.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line**: `// Task 1: Define Variables`
   - **Explanation**: This type of comment, explicitly labeling sections of code by task number, is a common pattern in ChatGPT-generated code, especially when given structured prompts asking it to perform specific steps. Human-written code usually uses comments to clarify complex logic or document non-obvious behavior.
2. **Key Code Line**: `switch (coffeeType.toLowerCase()) {`
   - **Explanation**: While `switch` statements are used by both humans and AI, ChatGPT often utilizes them for simple input categorization. This is consistent with code generated from prompts describing distinct cases (Espresso, Latte, Cappuccino).  Human-written code dealing with similar scenarios might employ more flexible or extensible approaches, such as a map or strategy pattern, particularly if anticipated future additions.
3. **Key Code Line**: `discount = totalCost * 0.10; // 10% discount`
   - **Explanation**:  This line includes an inline comment that restates the already evident calculation. This type of redundant comment is often present in ChatGPT-generated code. Human-written code would generally avoid such redundancy.
4. **Key Code Line**: `System.out.println(""Total Cost: "" + totalCost + "" Baht"");`
   - **Explanation**: The explicit concatenation of strings and variables for output formatting is common in generated code. While humans sometimes use this style, they tend to favor more concise approaches like formatted strings (e.g., `printf`) for cleaner and more efficient output.
5. **Key Code Line**: `// Close scanner`
   - **Explanation**: Similar to ""Task 1"" comment, this comment stating the obvious action of closing the scanner is a frequent occurrence in generated code. Human-written code typically omits such comments, as the `close()` function itself is self-explanatory within the context.


**Comparison to Previous Examples**:

* **Target Code vs. ChatGPT Example 1 (LoanCalculator):** Both share a similar linear structure and detailed comments. For example, the target code's  `// Task 1: Define Variables` echoes ChatGPT Example 1's `// Prompt the user to enter the loan amount and loan period`.  Both code snippets favor basic looping and input-output operations.

   ```java
   // Target Code
   // Task 1: Define Variables
   String customerName, coffeeType;

   // ChatGPT Example 1
   // Prompt the user to enter the loan amount and loan period
   System.out.print(""Loan Amount: "");
   ```

* **Target Code vs. ChatGPT Example 2 (ShippingCost):**  Both rely on simple conditional logic (`switch` in the target and `if-else` in the example). They handle input in a straightforward manner, processing it immediately after receiving it. This prompt-response pattern is characteristic of ChatGPT-generated code.

   ```java
   // Target Code
   switch (coffeeType.toLowerCase()) {
       // ... cases ...
   }

   // ChatGPT Example 2
   if (weight > 50) {
       // ...
   } else if (weight > 10) {
       // ...
   } // ... more else-if blocks ...
   ```

* **Target Code vs. Human Example 1 (Exercise08_12):** The human-written example demonstrates more structured code with a separate function (`calcTax`) for tax calculation. The target code lacks this level of organization. The human example also includes a package declaration (`package ch_08;`) which is absent in generated code.

   ```java
   // Target Code (No function calls other than built-in methods)
   finalCost = totalCost - discount;


   // Human Example 1 (Separate function for tax calculation)
   System.out.printf(""Tax is $%.2f"", calcTax(income, brackets[status], rates));
   ```

* **Target Code vs. Human Example 2 (Exercise06_15):** The human-written example shows more sophisticated handling of output formatting with reusable spacing variables (`space`, `spacex2`). The target code employs simpler, more repetitive output statements.

   ```java
   // Target Code
   System.out.println(""Customer Name: "" + customerName);

   // Human Example 2
   System.out.print(spacex2 + Math.round(computeTax(0, i))); 
   ```

These comparisons demonstrate the key differences between ChatGPT-generated code and human-written code. The target source code shares numerous similarities with the ChatGPT examples, including its linear structure, simplistic comments, and direct handling of input, ultimately contributing to the model's high confidence in its classification.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 26, 5, 22, 51, 396000)}"
morakot@gmail.com,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**
The model classifies the target source code as ChatGPT-generated with a 100% probability. Several features contribute to this classification: the structured and verbose commenting style, the use of helper methods for modularity, and the comprehensive input handling and output formatting. These characteristics are often indicators of ChatGPT-generated code, as they reflect a systematic and instructional approach typical of AI-generated content. The code's logical flow and attention to detail, such as handling leap years and formatting outputs, align with patterns observed in AI-generated examples.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: 
   ```java
   String[] checkInDateParts = checkInDate.split(""-"");
   ```
   - **Explanation**: This line demonstrates a systematic approach to parsing input, indicative of ChatGPT's tendency to use clear and straightforward methods for string manipulation. The use of `split` to handle date parsing is a common pattern in AI-generated code for its simplicity and effectiveness.

2. **Code Line**: 
   ```java
   int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);
   ```
   - **Explanation**: The use of a helper method (`calculateDaysBetweenDates`) to encapsulate complex logic is typical in AI-generated code, promoting modularity and readability. This pattern reflects a design choice often seen in AI outputs to maintain clean and organized code.

3. **Code Line**: 
   ```java
   System.out.println(""\n** No STAR Hotel **"");
   ```
   - **Explanation**: The structured and formatted output, including decorative text like ""** No STAR Hotel **"", shows an AI-generated style where presentation and user interface considerations are emphasized, often seen in ChatGPT-generated examples.

4. **Code Line**: 
   ```java
   public static boolean isLeapYear(int year) {
       return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   }
   ```
   - **Explanation**: The inclusion of a utility function to determine leap years indicates a comprehensive handling of edge cases, a characteristic of AI-generated code where completeness and accuracy are prioritized.

5. **Code Line**: 
   ```java
   System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));
   ```
   - **Explanation**: The use of `String.format` for precise output formatting reflects a typical AI-generated pattern where attention to detail, especially regarding user-facing outputs, is prioritized to ensure clarity and professionalism.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code Snippet**:
    ```java
    double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);
    ```
  - **Target Code Snippet**:
    ```java
    int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);
    ```
  - **Analysis**: Both examples show the use of mathematical calculations and helper methods to encapsulate logic, a common pattern in ChatGPT-generated code, emphasizing modularity and clarity.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Code Snippet**:
    ```java
    System.out.printf(""%-15s%-15s%-15s\n"", ""Interest Rate"", ""Monthly Payment"", ""Total Payment"");
    ```
  - **Target Code Snippet**:
    ```java
    System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));
    ```
  - **Analysis**: Both snippets focus on formatted output, showcasing a shared emphasis on user-friendly presentation and precise formatting, which are indicative of AI-generated patterns.

- **Comparison with Human-written Example 1**:
  - **Example Code Snippet**:
    ```java
    years *= 12;
    monthInterestRate /= 1200;
    ```
  - **Target Code Snippet**:
    ```java
    String[] checkInDateParts = checkInDate.split(""-"");
    ```
  - **Analysis**: The human-written code exhibits more compact and less verbose manipulation of variables, contrasting with the AI-generated code's more explicit and detailed handling of input parsing and processing.

- **Comparison with Human-written Example 2**:
  - **Example Code Snippet**:
    ```java
    total = (investment + total) * (1 + (interestRate / 12));
    ```
  - **Target Code Snippet**:
    ```java
    double totalRent = roomPricePerNight * numberOfNights;
    ```
  - **Analysis**: The human-written example shows a more direct approach to calculations, while the target code's use of helper methods and structured logic reflects a more AI-generated pattern, focusing on modularity and clarity.

Overall, the target source code's systematic approach, modular structure, and attention to detail align closely with ChatGPT-generated examples, supporting the model's classification.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 5}, 'feedback_additional': 'Comparison to Previous Examples >> should be better rephrase to something more clearer e.g., comparison with existing code the dataset.', 'submitted_at': datetime.datetime(2025, 3, 27, 6, 53, 35, 657000)}"
morakot@gmail.com,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with 100% probability, primarily due to its structure, style, and certain coding patterns typically associated with human authorship. Key influential features include the verbose and methodical approach to outputting intermediate sorting steps, the use of specific variable naming conventions, and manual string manipulation for printing, which often suggests a more human-centric approach to coding. Additionally, the absence of typical AI code generation traits, such as overly optimized or generic patterns, further supports this classification.

---

**Highlight and Explain Key Code Lines**

1. **Line: `System.out.print(""Pass ""+ (i+1)+"": ["");`**
   - **Explanation**: This line demonstrates a human approach to debugging or logging, where the programmer outputs each sorting pass. This kind of detailed, step-by-step logging is often seen in educational or exploratory coding by humans.

2. **Line: `for(int k =0; k<n;k++) { if( k != n-1) { System.out.print(arr[k]+"",""); } else { System.out.print(arr[k]); } }`**
   - **Explanation**: The manual handling of array printing, specifically checking for the last element to avoid a trailing comma, is a pattern that suggests a human touch. AI-generated code often uses built-in functions or libraries to handle such tasks more succinctly.

3. **Line: `String minStr = arr[i];`**
   - **Explanation**: The use of descriptive variable names like `minStr` indicates a human's tendency to write self-explanatory code, which helps in understanding and maintaining the code.

4. **Line: `if(arr[j].compareTo(minStr) > 0)`**
   - **Explanation**: This line uses `compareTo` for string comparison, which is a more explicit and verbose method than other available options. Human-written code often opts for clarity over brevity, especially when dealing with string manipulations.

5. **Line: `String temp = arr[min_index]; arr[min_index] = arr[i]; arr[i] = temp;`**
   - **Explanation**: The manual swapping of array elements using a temporary variable is a straightforward and educational approach often taught in programming courses, reflecting a human's learning or teaching style.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Target Code**: `System.out.print(""Pass ""+ (i+1)+"": ["");`
  - **Example 1 Code**: `System.out.print(""Enter list1: "");`
  - **Analysis**: Both codes involve user interaction, but the target code's detailed pass-by-pass output reflects a human's educational or debugging intent, unlike the more functional input prompt in the AI-generated example.

- **Comparison with ChatGPT-generated Example 2**:
  - **Target Code**: `for(int k =0; k<n;k++) { if( k != n-1) { System.out.print(arr[k]+"",""); } else { System.out.print(arr[k]); } }`
  - **Example 2 Code**: `for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + "" ""); }`
  - **Analysis**: The target code's manual handling of commas suggests a human's attention to detail, unlike the AI-generated code's straightforward iteration.

- **Comparison with Human-written Example 1**:
  - **Target Code**: `String minStr = arr[i];`
  - **Example 1 Code**: `int ind = a[i];`
  - **Analysis**: Both examples use descriptive variable names, indicative of human-written code, focusing on clarity and self-documentation.

- **Comparison with Human-written Example 2**:
  - **Target Code**: `if(arr[j].compareTo(minStr) > 0)`
  - **Example 2 Code**: `if (list.get(n) > list.get(i))`
  - **Analysis**: Both examples use explicit comparison methods, a hallmark of human-written code where clarity is prioritized over brevity.

- **Comparison with Human-written Example 2**:
  - **Target Code**: `String temp = arr[min_index]; arr[min_index] = arr[i]; arr[i] = temp;`
  - **Example 2 Code**: `Integer temp = list.get(idx1); list.set(idx1, list.get(idx2)); list.set(idx2, temp);`
  - **Analysis**: The manual swap operation in both examples is a common educational pattern, reinforcing the human-written classification.

The target source code's detailed logging, descriptive variables, and manual operations are characteristics of human-written code, aligning closely with the human-written examples and contrasting with the more functional and succinct AI-generated examples. These aspects collectively underpin the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 6, 59, 37, 353000)}"
morakot@gmail.com,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model has classified the target source code as 100% human-written. The primary reasons for this classification likely include the code's structure, the use of conventional programming patterns, and the presence of certain coding styles that are typically associated with human developers. Specifically, the code demonstrates a clear and organized approach to solving a problem, with detailed comments, explicit variable naming, and a structured flow of logic. These characteristics, combined with the absence of overly verbose or redundant code that might be indicative of AI generation, contribute to the model's decision.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** 
    ```java
    System.out.println(""==MUGrocery=="");
    ```
   - **Explanation:** This line demonstrates a simple but effective use of a print statement to introduce a section of the program. The use of a specific and meaningful string (""==MUGrocery=="") suggests a human touch, as it serves as a clear identifier for the program's context.

2. **Code Line:** 
    ```java
    for(int i =0; i< n;i++) {
        System.out.print(""Enter price for item "" + (i+1) +"": "");
        itemPrices[i] = scanner.nextDouble();
    }
    ```
   - **Explanation:** The loop structure here is straightforward and efficiently collects user input. The use of `i+1` for item numbering is a common human practice to make output more user-friendly, as it avoids starting from zero, which is a more intuitive approach for users.

3. **Code Line:** 
    ```java
    System.out.print(""Item Prices: ["");
    ```
   - **Explanation:** This line, along with the following loop, demonstrates a human-like approach to formatting output. The use of brackets and comma-separated values is a typical human style for displaying lists, indicating attention to readability.

4. **Code Line:** 
    ```java
    char[] grades = new char[n];
    ```
   - **Explanation:** The declaration of an array to store grades shows a logical approach to organizing data, a hallmark of human-written code. The choice of a `char` array for grades is both efficient and semantically appropriate.

5. **Code Line:** 
    ```java
    System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
    ```
   - **Explanation:** This line combines several elements: string concatenation, formatted output, and indexing. The use of `String.format(""%.2f"", itemPrices[i])` for price formatting shows attention to detail and presentation, which are common in human-written code to enhance clarity and precision.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example Code:** 
    ```java
    System.out.printf(""The shipping cost is $%.2f\n"", cost);
    ```
  - **Target Code:** 
    ```java
    System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
    ```
  - **Analysis:** Both examples use formatted output to present numerical data. However, the target code employs a more complex structure with string concatenation and multiple variables, showing a nuanced understanding of formatting that is more characteristic of human-written code.

- **Comparison with Human-written Example 1:**
  - **Example Code:** 
    ```java
    StringBuilder recordBuilder = new StringBuilder();
    recordBuilder.append(FNAME + numLines).append("" "") //First name
    ```
  - **Target Code:** 
    ```java
    System.out.print(""Item Prices: ["");
    ```
  - **Analysis:** Both examples demonstrate an attention to detail in output formatting. The use of `StringBuilder` in the human-written example and the use of brackets in the target code both reflect a human tendency to format output for clarity and readability.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example Code:** 
    ```java
    if (costPerUnitWeight1 < costPerUnitWeight2) {
        System.out.println(""Package 1 has a better price."");
    }
    ```
  - **Target Code:** 
    ```java
    if(itemPrices[i] < 15) {
        g = 'A';
    }
    ```
  - **Analysis:** Both examples use conditional logic to determine an output. The target code uses a series of `if-else` statements to assign grades, a common human practice for categorizing data based on thresholds, showing a structured decision-making process.

- **Comparison with Human-written Example 2:**
  - **Example Code:** 
    ```java
    if (employeeRecord[2].equals(ASSISTANT)) {
        countAssistant++;
    }
    ```
  - **Target Code:** 
    ```java
    if(itemPrices[i] < 15) {
        g = 'A';
    }
    ```
  - **Analysis:** Both examples use conditional logic to modify variables based on conditions. The target code's use of `if-else` chains to assign grades based on price is similar to the human-written example's use of conditions to increment counters, reflecting a logical and systematic approach to problem-solving.

These comparisons highlight the human-like characteristics of the target code, such as structured logic, attention to detail, and user-friendly output, which align with the patterns observed in human-written examples and differ from the more straightforward, less nuanced patterns in AI-generated examples.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 6, 58, 35, 989000)}"
morakot@gmail.com,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with a 100% probability due to several key features and patterns commonly associated with AI-generated code. These features include highly structured and repetitive patterns, explicit comments explaining straightforward logic, and a clear, systematic approach to solving the problem. The code is well-organized and follows a logical sequence, with comments and formatting that are often characteristic of AI-generated content. The presence of these patterns, which align closely with the style and structure of the ChatGPT-generated examples, strongly influenced the model's classification decision.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: 
   ```java
   System.out.println(""== MUTheater Seat Layout =="");
   ```
   - **Explanation**: This line uses a clear, descriptive print statement to denote the start of a specific task. AI-generated code often includes such explicit markers to delineate sections of code, enhancing readability and clarity.

2. **Code Line**: 
   ```java
   for (int row = 1; row <= ROWS; row++) {
   ```
   - **Explanation**: The loop structure is straightforward and methodical, a hallmark of AI-generated code. The use of constants for loop boundaries and the sequential iteration over rows and columns reflect a systematic approach typical of AI.

3. **Code Line**: 
   ```java
   if (col % 2 == 0) {
   ```
   - **Explanation**: This conditional logic is simple and directly tied to a clear pattern (even/odd column differentiation). AI-generated code often uses such straightforward conditionals to implement basic logic.

4. **Code Line**: 
   ```java
   System.out.println(""Total Reserved Seats: "" + reservedSeats);
   ```
   - **Explanation**: The use of detailed output statements to display results is common in AI-generated code. These statements are often included to ensure clarity and completeness in presenting the output of the program.

5. **Code Line**: 
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;
   ```
   - **Explanation**: The initialization of variables at the start of a task is a common pattern in AI-generated code. This approach ensures that all necessary variables are declared and initialized before use, reflecting a structured coding style.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Target Code**: 
    ```java
    System.out.println(""== MUTheater Seat Layout =="");
    ```
  - **Example 1**:
    ```java
    System.out.print(""Enter a number between 0 and 511: "");
    ```
  - **Analysis**: Both lines involve clear, descriptive print statements that guide the user through the program. This explicit communication is a common trait in AI-generated code to ensure user understanding and interaction.

- **Comparison with ChatGPT-generated Example 2**:
  - **Target Code**: 
    ```java
    if (col % 2 == 0) {
    ```
  - **Example 2**:
    ```java
    int rankIndex = random.nextInt(13);
    ```
  - **Analysis**: Both examples use straightforward logic to achieve a specific task. The use of simple conditionals and random number generation reflects the AI's tendency to apply clear, logical operations to solve problems.

- **Comparison with Human-written Example 1**:
  - **Target Code**: 
    ```java
    int reservedSeats = 0;
    int availableSeats = 0;
    ```
  - **Example 1**:
    ```java
    double tax = 0;
    ```
  - **Analysis**: While both initialize variables, the human-written example involves more complex logic and calculations, whereas the target code maintains a simpler, more structured approach typical of AI-generated code.

- **Comparison with Human-written Example 2**:
  - **Target Code**: 
    ```java
    for (int row = 1; row <= ROWS; row++) {
    ```
  - **Example 2**:
    ```java
    for (int i = 0; i < 3; i++) {
    ```
  - **Analysis**: Both examples use loops, but the human-written example involves more complex logic within the loop. The target code's loop is straightforward and methodical, reflecting AI's preference for simplicity and clarity.

Overall, the similarities in structure, clarity, and systematic approach between the target code and the ChatGPT-generated examples support the model's classification decision. The differences in complexity and style compared to human-written examples further reinforce the likelihood of the code being AI-generated.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 6, 56, 56, 673000)}"
morakot@gmail.com,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated is primarily influenced by certain stylistic patterns and structural elements that are typical of AI-generated code. These include a clear and structured approach to problem-solving, a focus on user interaction via console input/output, and the use of comments to segment tasks. The code's simplicity, readability, and the presence of common programming constructs such as switch-case statements and conditional logic further align with known patterns of AI-generated code. Additionally, the use of specific phrases and variable naming conventions are indicative of AI generation. The model likely identified these features as they are consistent with patterns observed in the ChatGPT-generated examples provided.

---

**Highlight and Explain Key Code Lines**

1. **`switch (coffeeType.toLowerCase()) {`**  
   - **Explanation**: The use of a `switch` statement to handle different coffee types is a common pattern in AI-generated code, where clear and straightforward logic is implemented to manage multiple conditions. The conversion to lowercase before the switch is a typical AI approach to ensure case-insensitivity, reflecting a meticulous attention to detail in handling user input.

2. **`if (numberOfCups > 5) { discount = totalCost * 0.10; }`**  
   - **Explanation**: This conditional statement applies a discount, showcasing a pattern where AI-generated code often includes simple, direct calculations for business logic. The straightforward arithmetic and conditional logic are characteristic of AI-generated code, which frequently implements basic logic with clear, concise syntax.

3. **`System.out.println(""Invalid coffee type."");`**  
   - **Explanation**: The presence of input validation and error messaging is a common feature in AI-generated code. This line demonstrates a simplistic approach to error handling, which is typical of AI-generated solutions that prioritize basic user feedback mechanisms.

4. **`System.out.println(""\n== Welcome to ICT Coffee Shop =="");`**  
   - **Explanation**: The structured and formatted output, including decorative headers and consistent formatting, is a hallmark of AI-generated code. This attention to user interface detail is often seen in ChatGPT-generated examples, where presentation is as emphasized as functionality.

5. **`scanner.close();`**  
   - **Explanation**: The explicit closing of the scanner object indicates a thoroughness in resource management, a pattern often found in AI-generated code. This suggests an adherence to best practices, which is a common trait in code generated by AI models trained on large datasets.

**Comparison to Previous Examples**

- **ChatGPT-generated Example 1**: 
  - **Code Snippet**: 
    ```java
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
        // Logic
    }
    ```
  - **Comparison**: The use of loops and structured logic in the example aligns with the switch-case structure in the target code. Both demonstrate a methodical approach to handling multiple scenarios, a common feature in AI-generated code.

- **ChatGPT-generated Example 2**:
  - **Code Snippet**: 
    ```java
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Comparison**: Similar to the target code's error handling for invalid coffee types, this example uses straightforward conditional statements for user feedback, reflecting a shared pattern of simple, direct error messaging.

- **Human-written Example 1**:
  - **Code Snippet**: 
    ```java
    if (income <= bracket[0]) {
        tax = income * rates[0];
    }
    ```
  - **Comparison**: While both codes use conditional logic, the human-written example features more complex calculations and data structures, such as arrays for tax brackets and rates, indicating a higher level of complexity and domain-specific knowledge than typically seen in AI-generated code.

- **Human-written Example 2**:
  - **Code Snippet**: 
    ```java
    for (int i = 50000; i <= 60000; i += 50) {
        // Logic
    }
    ```
  - **Comparison**: The human-written example uses a loop for tax computation across a range, demonstrating a more complex and nuanced approach compared to the straightforward logic in the target code. This complexity is less common in AI-generated code, which often opts for simpler, more direct solutions.

The similarities in structure, simplicity, and style between the target source code and the ChatGPT-generated examples strongly support the classification decision. The target code's straightforward logic and emphasis on user interaction are consistent with the patterns identified in the AI-generated examples, distinguishing it from the more complex and nuanced human-written samples.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 5, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 6, 55, 58, 287000)}"
morakot@gmail.com,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors: its verbose commenting style, which includes explanations of basic Java concepts (e.g., ""Create scanner object to capture user input""); its straightforward, almost procedural approach to problem-solving, including breaking down date parsing into very granular steps; and its inclusion of helper functions that, while functional, demonstrate a common ChatGPT tendency to create separate functions for relatively simple tasks (like leap year checking).  The extensive use of `System.out.println()` for intermediate outputs and calculations also suggests a ChatGPT-generated pattern, as it often provides detailed step-by-step outputs, mimicking the way it would present information in a conversational setting. The overall structure, while correct, lacks the conciseness and efficiency typically found in human-written code, especially for the date manipulation part.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `// Create scanner object to capture user input`
    - **Explanation:** This comment is excessively explanatory for experienced programmers.  ChatGPT frequently includes such basic explanatory comments, even for standard library functionalities. Humans would generally omit such obvious explanations.

- **Key Code Line 2:**  `// Parse the check-in and check-out dates into individual components` followed by the splitting of the dates.
    - **Explanation:**  While not incorrect, the granular breakdown of these steps, combined with the prior comment, signals a ChatGPT tendency to over-explain and decompose tasks into smaller, more explicit units. Human developers might combine some of these actions or use libraries to achieve this more concisely.

- **Key Code Line 3:** `// Convert to integers for calculations` followed by parsing individual date parts.
    - **Explanation:** Again, the overly verbose commenting and explicit type conversions are characteristic of ChatGPT's step-by-step, didactic approach. Humans would likely perform these conversions directly within the calculation without explicit comments.

- **Key Code Line 4:** `// Calculate the number of nights stayed using the helper method`
    - **Explanation:** While the comment itself is innocuous, calling `calculateDaysBetweenDates` a ""helper method"" when its implementation is substantial points towards ChatGPT's tendency to compartmentalize code even when not strictly necessary for complexity management.  This is visible in ChatGPT-generated responses where it often creates functions even for moderately simple operations.

- **Key Code Line 5:** `System.out.println(""Number of Nights: "" + numberOfNights);` among other similar `println` statements.
    - **Explanation:** The frequent use of `System.out.println()` for reporting intermediate calculations and values reflects ChatGPT's inclination towards verbose output, similar to how it would interact in a conversational setting.  Human developers would likely optimize for cleaner output, possibly combining these prints or focusing on the final results.


**Comparison to Previous Examples**


- **Target Code vs. ChatGPT Example 1 (0_Exercise02_21.java): Verbose Commenting**
    - **Target Code:** `// Create scanner object to capture user input`
    - **ChatGPT Example 1:**  `// Get input from user` followed by several `System.out.print` statements with explanatory prompts.
    - **Discussion:** Both code snippets display overly verbose comments, a characteristic commonly seen in ChatGPT-generated code. These comments explain straightforward operations that an experienced programmer would understand without explicit explanation.


- **Target Code vs. ChatGPT Example 2 (0_Exercise05_21.java):  Iterative Output with System.out.println()**
    - **Target Code:**  `System.out.println(""Number of Nights: "" + numberOfNights);` (and other similar print statements)
    - **ChatGPT Example 2:**  `System.out.printf(""%-15.3f%-15.2f%-15.2f\n"", annualInterestRate, monthlyPayment, totalPayment);` within a loop.
    - **Discussion:** Both examples use `System.out.println()` (or printf) within loops or after individual calculations to present results step-by-step. This aligns with the tendency of ChatGPT to produce detailed, conversational-style outputs for every stage of computation.

- **Target Code vs. Human Example 1 (1_Exercise02_21.java): Conciseness**
    - **Target Code:**  Extensive code for date manipulation and calculations.
    - **Human Example 1:**  Concise and compact code for a similar financial calculation.
    - **Discussion:** The target code demonstrates a less efficient and more verbose approach to date manipulation compared to the human-written example, which achieves a similar result with fewer lines and less explicit decomposition.


- **Target Code vs. Human Example 2 (1_Exercise05_30.java): Commenting Style**
    - **Target Code:**  Comments explain basic operations (e.g., ""Convert to integers"").
    - **Human Example 2:**  Comments are minimal and focus on higher-level logic.
    - **Discussion:** The target code's commenting style, like the ChatGPT examples, leans towards explaining fundamental Java elements, whereas the human-written example uses comments sparingly and only where necessary to clarify complex logic or non-obvious intent.

The overall verbosity in comments, explicit step-by-step calculations, detailed intermediate output through `System.out.println()`, and creation of a “helper” function for relatively simple tasks, combined with its comparison to the provided examples, reinforce the model's classification of the target code as ChatGPT-generated. It exhibits several stylistic and structural patterns commonly associated with AI-generated code, contrasting with the more concise and less verbose patterns observed in the human-written examples.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 7, 4, 30, 869000)}"
morakot@gmail.com,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:  verbose in-line comments, specific print statements for visualizing the sorting process within the `sorting` method, and the use of `compareTo` for string comparison combined with a descending sort implementation.  The provided ChatGPT examples favor conciseness, lacking the explanatory print statements and detailed commenting. The human-written examples exhibit more varied coding styles, including detailed comments and interactive input, aligning more with the target code's verbosity and educational nature. The descending sort logic and the string comparison approach further suggest a specific human intent not typically found in basic sorting examples generated by AI.  The absence of common AI-generated patterns like perfect adherence to standard library sorting methods and conciseness strengthens the human-written classification.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `public static void sorting(String arr[],int n)`
    - **Explanation:**  The method name `sorting` is slightly less conventional than `sort`, which might be preferred by AI.  The explicit inclusion of `n` for the array size, while functional, is less common in AI-generated code which often relies on `arr.length`.
- **Key Code Line 2:** `System.out.print(""Pass ""+ (i+1)+"": ["");`
    - **Explanation:** This print statement is highly indicative of human-written code, specifically for educational or debugging purposes.  It provides a step-by-step visualization of the sorting process, a feature not typically found in concise AI-generated sorting algorithms.
- **Key Code Line 3:**  `if(arr[j].compareTo(minStr) > 0)`
    - **Explanation:** The use of `compareTo` for string comparison points towards human-written code. It demonstrates awareness of string-specific comparison methods. While AI *could* generate this, it often defaults to simpler comparisons if possible, especially in basic sorting examples.
- **Key Code Line 4:** `if(min_index != i)`
    - **Explanation:** This check optimizes the swap, avoiding unnecessary operations. This minor optimization is more common in human-written code which sometimes prioritizes these small efficiencies.  AI is less prone to these types of fine-grained optimizations in basic examples.
- **Key Code Line 5:**  The entire inner loop structure within the sorting function, with its specific descending sort implementation: 
      ```java
       int min_index = i;
       String minStr = arr[i];
       for(int j = i+1; j < n; j++) { ... }
       if(min_index != i) { ... }
      ```
    - **Explanation:** The choice of a descending sort using `compareTo` is a distinct human-driven design decision. AI would more likely implement a standard ascending sort or use library functions. This specific implementation indicates a targeted human intention not generally reflected in generic AI code.

**Comparison to Previous Examples**

- **Comparison 1: Verbosity and Explanatory Output**
    - **Target Code:** `System.out.print(""Pass ""+ (i+1)+"": ["");` and related print statements for visualizing the sort.
    - **ChatGPT Example 1 (0_Exercise07_31.java):**  Contains print statements only for the final merged result, not intermediate steps.
    - **Human-Written Example 1 (1_p02255.java):** `print(a); System.out.println();` within the sorting loop.
    - **Discussion:** The target code's detailed output aligns more with the human-written example's tendency to provide intermediate progress information.  ChatGPT examples are generally more concise, focusing on the final outcome.

- **Comparison 2: Sorting Algorithm Choice and Implementation**
    - **Target Code:** Custom descending sort implementation using `compareTo` for strings.
    - **ChatGPT Example 2 (0_BubbleSort3.java):**  Standard bubble sort implementation for integers.
    - **Human-Written Example 2 (1_Exercise11_11.java):** Custom sorting algorithm using ArrayList and swap for integers.
    - **Discussion:** Both the target code and the human-written example showcase custom sorting logic, suggesting a human's deliberate implementation. The ChatGPT example uses a standard, textbook bubble sort.

- **Comparison 3: Conciseness and Use of Standard Libraries**
    - **Target Code:** Does not use built-in sorting functions.  Includes explanatory prints.
    - **ChatGPT Examples:**  Generally concise, potentially using standard library functions (not applicable in this particular sorting example).
    - **Human-Written Examples:**  Vary in conciseness. Sometimes favor explicit implementations over standard library calls.
    - **Discussion:** The target code's avoidance of standard library sorting and the inclusion of the explanatory print statements contrast with the typical conciseness seen in AI-generated code.  It leans more towards the human-written examples in terms of demonstrating a specific implementation.


The cumulative effect of these features—verbose output, custom descending string sort, and absence of AI-typical conciseness—strongly supports the model's classification of the target code as human-written. It reflects specific human intentions not typically found in automatically generated code for basic sorting tasks.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 7, 8, 36, 907000)}"
morakot@gmail.com,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including a less structured approach to output formatting, specifically in the array printing. The code lacks explicit resource closing, which while not best practice, is more common in human-written quick examples.  The nested `if/else if` structure for grade assignment, combined with the formatting choices within the print statements, also point towards human-written code. The comments are concise and explanatory, serving as clarifying notes rather than structured documentation.  The variable naming, while descriptive, lacks the consistent formatting sometimes observed in AI-generated code. Finally, the specific approach to calculating and displaying the average, while functional, isn't as optimized as one might expect from AI.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `if(i!=4)`
    - **Explanation:** This specific condition to handle the last element in the array print suggests a human approach.  AI-generated code often favors more general solutions like loop conditions or string manipulation to avoid this type of specific numerical check. This is often seen as less efficient and less elegant than alternative approaches, suggesting a human wrote the code.
- **Key Code Line 2:** `avg = avg/n;`
    - **Explanation:** While functionally equivalent to `avg /= n;`, this slightly more verbose calculation is more typical of human-written code. AI tends towards conciseness.
- **Key Code Line 3:** `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Explanation:**  The combination of string concatenation and `String.format()` in a single print statement indicates a human-driven approach. AI-generated code often favors cleaner string formatting methods, and is more likely to assemble the output string before printing it for readability. 
- **Key Code Line 4:** `char g = 'A';`
    - **Explanation:** Declaring a character variable and re-assigning it within the loop, rather than assigning it directly inside the conditional blocks, hints at human-written code. AI typically optimizes variable scope more aggressively.
- **Key Code Line 5:**  `// Task 1: Input and display item prices`
    - **Explanation:**  Concise comments that describe the functionality of a section of code are more common in human-written samples. AI models tend to create more comprehensive or JavaDoc-style comments.

**Comparison to Previous Examples**

- **Array Printing (Target vs. ChatGPT Example 1):**

   ```java
   // Target Code
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
   ```

   ```java
   // ChatGPT Example 1 (Snippet relevant to conditional output)
        if (weight > 50) {
            System.out.println(""The package cannot be shipped."");
        } else if (weight > 10) {
            // ... other conditions
        } //...
   ```

   ChatGPT Example 1 primarily uses clean `if/else` blocks for conditional output.  The target code's approach to array printing, with a specific check for the last element, contrasts with the more structured approach favored by AI.  While the ChatGPT example demonstrates conditional output, it does so in a structured and consistent manner for each branch, unlike the target code's special handling within the loop.

- **Variable Naming and Scope (Target vs. Human-Written Example 1):**

   ```java
   // Target Code
   char g = 'A';
   // ... later inside a loop ...
   g = 'B'; // Reassignment
   ```

   ```java
   // Human-Written Example 1 (Snippet with constant declarations)
    final static String FNAME = ""FirstName"";
    final static String LNAME = ""LastName"";
    // ... other constants
   ```

   While Human-written Example 1 demonstrates the use of constants, it also showcases a more organized approach typical of human developers. The target code reassigns the `g` variable within the loop. This less strict approach to variable scope is more aligned with human-written quick examples and less characteristic of AI-generated code.


- **Comments (Target vs. ChatGPT Example 2):**

   ```java
   // Target Code
   // Task 1: Input and display item prices
   ```

   ```java
   // ChatGPT Example 2 (Snippet with comment)
       // Prompt user to enter weight and price of first package
       System.out.print(""Enter weight and price for package 1: "");
       // ... other prompts
   ```

   ChatGPT Example 2 uses comments to explain the purpose of code blocks. The target code, while having comments, keeps them more concise. This aligns more closely with human coding styles where comments often serve as quick notes or reminders rather than comprehensive explanations.  AI-generated code often features more descriptive comments.



These comparisons highlight the nuances that likely influenced the model's classification.  The target code, while functional, exhibits characteristics more closely associated with quickly written human code than the structured, often optimized style observed in AI-generated examples.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 7, 7, 27, 489000)}"
morakot@gmail.com,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its simplistic and straightforward nature, typical of code produced when given basic coding prompts. The code lacks complex logic, sophisticated data structures, or advanced programming techniques, suggesting a beginner-level approach.  The very explicit comments, especially those describing rather obvious code functionality (e.g., ""// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)""), are highly characteristic of ChatGPT's output. The iterative approach for counting reserved and available seats, while functional, lacks the conciseness and efficiency a human programmer might employ.  The overall structure, while organized, follows a predictable and somewhat rigid pattern, further suggesting automated generation. The variable naming conventions are simple and descriptive, aligning with ChatGPT's tendency to prioritize clarity over brevity.  The absence of error handling or input validation also contributes to the classification.


---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `// Task 1: Display the theater's seating layout`
    - **Explanation:** This comment, while helpful, is excessively descriptive for such a simple operation.  ChatGPT often over-comments, explaining self-evident code actions.
- **Key Code Line 2:** `for (int row = 1; row <= ROWS; row++) {`
    - **Explanation:** Nested loops are a common pattern in ChatGPT code, especially for tasks involving 2D structures like matrices or grids.  While humans use them too, the context and simplicity of the overall code contribute to the AI classification.
- **Key Code Line 3:** `System.out.print(""S"" + col + "" "");`
    - **Explanation:** The basic string concatenation for output is typical of ChatGPT's approach to generating strings. While not exclusive to AI, combined with other factors, it adds to the likelihood.
- **Key Code Line 4:**  `// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)`
    - **Explanation:** This comment explains an extremely simple and obvious condition. Such redundant comments are a strong indicator of ChatGPT-generated code.
- **Key Code Line 5:** `reservedSeats++; // Even seats are reserved`
    - **Explanation:** Again, over-commenting a simple increment operation.  This level of explicitness is often seen in ChatGPT output.



**Comparison to Previous Examples**:

- **Target Code vs. ChatGPT Example 1 (NineHeadsAndTails):** Both the target code and the ""NineHeadsAndTails"" example utilize nested loops for iterating and printing a grid-like structure.
    ```java
    // Target Code:
    for (int row = 1; row <= ROWS; row++) {
        System.out.print(""Row "" + row + "": "");
        for (int col = 1; col <= COLUMNS; col++) {
            System.out.print(""S"" + col + "" ""); 
        }
        System.out.println();
    }

    // Example 1 (NineHeadsAndTails):
    for (int i = 0; i < binaryString.length(); i++) {
        if (i % 3 == 0) {
            System.out.println(); 
        }
        // ... (printing H or T based on binaryString)
    }
    ```
    Both demonstrate a similar structural pattern and output format.

- **Target Code vs. Human-written Example 1 (Exercise06_15):**  The human-written example demonstrates more complex logic with nested `if-else` statements for tax calculation, in contrast to the target code's simple conditional for seat reservation. 
    ```java
    // Target Code:
    if (col % 2 == 0) {
        reservedSeats++; 
    } else {
        availableSeats++; 
    }

    // Example 1 (Exercise06_15 - Snippet):
    if (taxableIncome <= upBound10)
        tax = taxableIncome * 0.10;
    else if (taxableIncome <= upBound15)
        tax = upBound10 * 0.10 + (taxableIncome - upBound10) * 0.15;
    // ... (more complex tax calculations)
    ```
    The human-written example has a more sophisticated structure and addresses a more intricate problem domain.

- **Target Code vs. Human-written Example 2 (Exercise08_09):** The human-written Tic-Tac-Toe example demonstrates more advanced program flow control and logic compared to the linear progression in the target code.  The Tic-Tac-Toe code incorporates methods, game state management, and input handling.
    ```java
    // Target Code (Linear progression):
    // Task 1: ...
    // Task 2: ...
    // Task 3: ...

    // Example 2 (Exercise08_09 - Snippet):
    while (status.equals(""continue"")) {
        // ... (game logic and user interaction)
    }
    if (status.equals(""win"")) {
        // ... (win condition handling)
    } else {
        // ... (draw condition handling)
    }
    ```
    This difference in complexity and structure further supports the classification of the target code as AI-generated.

The comparisons to the examples highlight the target code's relative simplicity, repetitive nature, and over-reliance on explicit comments, all of which align with characteristics typically observed in code generated by ChatGPT. These factors, taken together, strongly suggest that the model correctly identified the code's origin as AI-generated.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 7, 6, 23, 857000)}"
morakot@gmail.com,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward structure, explicit comments explaining each step (""Task 1"", ""Task 2"", etc.), the use of a simple `switch` statement for handling different coffee types, and a basic discount calculation.  The code lacks the complexity and nuanced error handling often seen in human-written code.  The formatting and variable naming conventions, while correct, are also typical of code generated by AI models trained on large datasets of beginner-level code examples. The calculation of the total cost and discount, and the output format are very direct and lack the flexibility or robustness a human developer might incorporate.  The prompt-like nature of the comments suggests an adherence to specific instructions, a common characteristic of AI-generated outputs. The overall simplicity and didactic style align more closely with ChatGPT's typical output than with more sophisticated, human-written code.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `// Task 1: Define Variables`
    - **Explanation**: This comment is overly explicit and resembles instructions given to a code generation model. Human developers rarely comment on such obvious actions as defining variables. This structured, step-by-step approach is very common in ChatGPT outputs.

- **Key Code Line 2**: `double totalCost = 0, discount = 0, finalCost;`
    - **Explanation**: Declaring multiple variables of the same type on one line, while not inherently wrong, is less common in human-written code, where developers often prefer declaring each variable separately for clarity. ChatGPT tends to favor this condensed declaration style.

- **Key Code Line 3**: `switch (coffeeType.toLowerCase()) {`
    - **Explanation**: The use of a `switch` statement for a simple price lookup, while functional, lacks the flexibility and scalability that a human developer might consider. A `Map` or other data structure might be preferred for easier maintenance and extensibility in human-written code.  ChatGPT, however, often defaults to `switch` statements for straightforward conditional logic.

- **Key Code Line 4**: `// Task 2: Calculate and Display Total Cost`
    - **Explanation**: Similar to the first key code line, this comment is excessively descriptive for a simple calculation.  It reinforces the impression of following a set of predefined steps, indicative of AI-generated code.

- **Key Code Line 5**: `if (numberOfCups > 5) {`
    - **Explanation**:  The discount logic is very basic and lacks the nuance of real-world scenarios. A human might consider tiered discounts or other more complex pricing models. ChatGPT tends to generate simpler solutions that directly address the immediate requirements without considering broader context.

**Comparison to Previous Examples**

- **Comments and Structure:** The target code shares similarities with the ChatGPT-generated Example 1 (0_Exercise05_21.java) in terms of comment style.  Both feature comments that explain straightforward actions. 

    - **Target Code:** `// Task 1: Define Variables`
    - **ChatGPT Example 1:** `// Prompt the user to enter the loan amount and loan period`

    Both explain very basic steps, a characteristic more common in AI-generated code.  Human-written code, like Example 1 (1_Exercise08_12.java), tends to have comments that offer higher-level explanations or clarify complex logic, rather than stating the obvious.

    - **Human-written Example 1:** `// Prompt the user to enter taxable income` (This comment precedes a user input operation, but does not explain *that* it's getting user input. It explains *why*.)


- **Variable Declarations:** The target code mirrors ChatGPT Example 2 (0_Exercise03_18.java) in its declaration of variables. 

    - **Target Code:** `double totalCost = 0, discount = 0, finalCost;`
    - **ChatGPT Example 2:**  While not identical, this example also initializes variables at declaration: `double weight = input.nextDouble();`

    Human-written code, like Example 2 (1_Exercise06_15.java), sometimes initializes variables later or separately.

    - **Human-written Example 2:**  `double tax = 0;` (Declared and initialized separately from other variables within the method)

- **Simplicity of Logic:** The target code's simple `switch` statement is somewhat similar to the cascading `if-else` structure in the ChatGPT Example 2.  Both handle a limited set of conditions directly.  Human-written examples often exhibit more complex or adaptable logic.


The combination of these features—the overly descriptive comments, the combined variable declarations, the simple `switch` statement for pricing, the basic discount logic, and the overall straightforward structure—strongly suggests that the target code is ChatGPT-generated. This aligns with the model's prediction and contrasts with the characteristics observed in the human-written code examples.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 7, 5, 39, 40000)}"
jidapa.kra@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model predicts the target source code as ChatGPT-generated with a 100% probability. This classification is primarily influenced by specific coding patterns and stylistic choices commonly found in AI-generated code. These include a structured and verbose style, comprehensive input prompts, detailed comments, and the use of helper methods for modularity. The target code's organization, such as the explicit parsing of date components and the structured calculation of days between dates, mirrors the systematic approach often seen in AI-generated examples. The presence of detailed comments and descriptive variable naming further aligns with AI-generated patterns, contributing to the model's classification.

---

**Highlight and Explain Key Code Lines**

1. **Line: `String[] checkInDateParts = checkInDate.split(""-"");`**
   - **Explanation**: This line demonstrates the AI's tendency to break down tasks into smaller, manageable components. The explicit parsing of date strings into arrays is a structured approach that reflects a systematic problem-solving method typical of AI-generated code.

2. **Line: `int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);`**
   - **Explanation**: The use of a helper method to calculate the number of nights indicates modularity and abstraction, which are characteristic of AI-generated code. This approach enhances code readability and reusability, aligning with the AI's methodical style.

3. **Line: `System.out.println(""\n** No STAR Hotel **"");`**
   - **Explanation**: The inclusion of formatted output with specific stylistic choices, such as decorative elements, suggests an AI-generated pattern. The emphasis on presentation and structured output is a common trait in AI-generated examples.

4. **Line: `int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};`**
   - **Explanation**: The explicit declaration of an array to store the number of days in each month reflects the AI's preference for clarity and explicitness in handling data. This approach is systematic and avoids assumptions, which is typical in AI-generated code.

5. **Line: `return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);`**
   - **Explanation**: The concise implementation of the leap year calculation demonstrates the AI's ability to encapsulate logic in a straightforward manner. The use of logical operators in a single return statement showcases the AI's efficiency in coding style.

**Comparison to Previous Examples**

- **Example 1 (ChatGPT-generated)**:
  - **Target**: `String[] checkInDateParts = checkInDate.split(""-"");`
  - **Example**: `double monthlyInterestRate = annualInterestRate / 1200.0;`
  - **Comparison**: Both lines demonstrate a clear, step-by-step breakdown of tasks, such as parsing strings or converting interest rates, reflecting the AI's systematic approach.

- **Example 2 (ChatGPT-generated)**:
  - **Target**: `int numberOfNights = calculateDaysBetweenDates(...);`
  - **Example**: `double monthlyPayment = loanAmount * monthlyInterestRate / ...;`
  - **Comparison**: The use of helper methods in the target code parallels the modular calculations in the example, indicating a shared emphasis on abstraction and reusability.

- **Example 1 (Human-written)**:
  - **Target**: `int[] daysInMonth = {31, 28, 31, ...};`
  - **Example**: `years *= 12;`
  - **Comparison**: The target's explicit array declaration contrasts with the human example's inline calculations, highlighting the AI's preference for explicit data handling.

- **Example 2 (Human-written)**:
  - **Target**: `System.out.println(""\n** No STAR Hotel **"");`
  - **Example**: `System.out.println(""After the "" + numberOfMonths + ""th month, ...);`
  - **Comparison**: While both use formatted output, the target's decorative style suggests AI influence compared to the straightforward human example.

- **Example 2 (ChatGPT-generated)**:
  - **Target**: `return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);`
  - **Example**: `for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; ...);`
  - **Comparison**: Both examples showcase the AI's ability to implement concise logic, whether in loops or return statements, indicating efficiency in coding style.

These comparisons illustrate how the target source code aligns with AI-generated patterns through its structured, modular, and explicit coding style, supporting the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 4}, 'feedback_additional': 'I would like to see only few (2-3) Examples which is enough to conclude', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 0, 2, 725000)}"
jidapa.kra@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with 100% probability, likely due to several key features and patterns that are characteristic of AI-generated code. These include a structured and methodical approach to problem-solving, clear and consistent commenting, and a tendency to use straightforward logic with simple control structures. The code uses clear variable naming conventions and follows a predictable pattern, which is common in AI-generated code. Additionally, the code includes repetitive structures and systematic processing, which are often seen in AI-generated outputs. These features collectively contribute to the classification as ChatGPT-generated.

---

**Highlight and Explain Key Code Lines**

1. **Line:**
   ```java
   System.out.println(""== MUTheater Seat Layout =="");
   ```
   - **Explanation:** This line demonstrates a clear and informative output statement, which is a common characteristic of AI-generated code. The use of consistent and descriptive output messages is typical of AI-generated code, as it aims to be user-friendly and self-explanatory.

2. **Line:**
   ```java
   for (int row = 1; row <= ROWS; row++) {
   ```
   - **Explanation:** The use of a straightforward loop structure with clear variable naming (e.g., `row`, `ROWS`) is indicative of AI-generated code. The structured and predictable pattern of iterating over a range of values is a common feature in AI-generated code, which often employs simple and effective logic.

3. **Line:**
   ```java
   if (col % 2 == 0) {
       System.out.print(""S"" + col + ""-R "");
   } else {
       System.out.print(""S"" + col + ""-A "");
   }
   ```
   - **Explanation:** This conditional statement uses a simple modulus operation to determine seat status, showcasing the AI's tendency to use straightforward logic. The use of concise and efficient logic to achieve a task is a hallmark of AI-generated code.

4. **Line:**
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;
   ```
   - **Explanation:** The initialization of counters for reserved and available seats reflects a systematic approach to problem-solving, a common trait of AI-generated code. The clear and logical initialization of variables is typical in AI-generated code, which often emphasizes clarity and simplicity.

5. **Line:**
   ```java
   System.out.println(""\n== Seat Counts =="");
   ```
   - **Explanation:** The use of clear section headings in output (e.g., ""== Seat Counts =="") is a pattern often seen in AI-generated code, as it aims to make the output easily understandable. This structured approach to output presentation is characteristic of AI-generated code.

**Comparison to Previous Examples**

In comparing the target source code to the examples provided:

- **Similarity in Structured Output:**
  - **Target Code:**
    ```java
    System.out.println(""== MUTheater Seat Layout =="");
    ```
  - **Example 1 (ChatGPT-generated):**
    ```java
    System.out.print(""Enter a number between 0 and 511: "");
    ```
  - **Analysis:** Both the target code and the ChatGPT-generated example use clear, structured output statements to guide the user, indicative of AI-generated code.

- **Use of Simple Control Structures:**
  - **Target Code:**
    ```java
    for (int row = 1; row <= ROWS; row++) {
    ```
  - **Example 2 (ChatGPT-generated):**
    ```java
    for (int i = 0; i < binaryString.length(); i++) {
    ```
  - **Analysis:** The use of straightforward loop structures is evident in both the target and ChatGPT-generated examples, highlighting the AI's preference for simple, effective logic.

- **Repetitive and Systematic Logic:**
  - **Target Code:**
    ```java
    if (col % 2 == 0) {
        System.out.print(""S"" + col + ""-R "");
    } else {
        System.out.print(""S"" + col + ""-A "");
    }
    ```
  - **Example 1 (ChatGPT-generated):**
    ```java
    if (binaryString.charAt(i) == '0') {
        System.out.print(""H ""); // Heads
    } else {
        System.out.print(""T ""); // Tails
    }
    ```
  - **Analysis:** Both codes use simple conditional logic to determine output, a common pattern in AI-generated code that favors clear and repetitive logic.

- **Comparison to Human-Written Example:**
  - **Human-Written Example:**
    ```java
    System.out.print(""\nIncome"" + space + ""     "" + space + ""  Or Qualifying"" + space + ""Separate"" + ""      "" + ""a "" +
                ""House"");
    ```
  - **Analysis:** The human-written example tends to use more complex and less structured formatting, which contrasts with the more straightforward and methodical approach of the target and ChatGPT-generated codes.

Overall, the similarities in structured output, simple control structures, and repetitive logic between the target source code and ChatGPT-generated examples support the classification decision. The differences in complexity and formatting compared to human-written examples further reinforce the classification of the target code as AI-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 5}, 'feedback_additional': 'From the above example, there are two explanation belongs to the same topic (clear section headings in output -#1 and #5) which could be summarized into 1 judgement. Also, the formate of the code (MD format) is easier to read compared to the Q1', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 3, 41, 790000)}"
jidapa.kra@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with 100% probability. This decision likely stems from several factors common to AI-generated code, such as the structured and systematic approach to solving the problem, the use of clear and descriptive variable names, and the overall simplicity and clarity of the code. These characteristics are often present in AI-generated code as they are designed to be easily understandable and follow best practices. Additionally, the specific task decomposition and logical flow in the code align with patterns seen in AI-generated examples.

---

**Highlight and Explain Key Code Lines**

1. **Variable Initialization and Input Handling**
   ```java
   String customerName, coffeeType;
   int numberOfCups;
   double totalCost = 0, discount = 0, finalCost;
   ```
   - **Explanation**: The clear and descriptive naming of variables (`customerName`, `coffeeType`, `numberOfCups`) and the initialization of `totalCost` and `discount` to `0` reflect a systematic and structured approach typical of AI-generated code. AI models often employ this style to ensure code clarity and prevent uninitialized variable errors.

2. **Switch Statement for Pricing**
   ```java
   switch (coffeeType.toLowerCase()) {
       case ""espresso"":
           totalCost = 50 * numberOfCups;
           break;
       case ""latte"":
           totalCost = 70 * numberOfCups;
           break;
       case ""cappuccino"":
           totalCost = 60 * numberOfCups;
           break;
       default:
           System.out.println(""Invalid coffee type."");
           return;
   }
   ```
   - **Explanation**: The use of a switch statement with `toLowerCase()` for case-insensitive comparison is a common pattern in AI-generated code. It demonstrates a comprehensive approach to handling user input variations, which AI models are adept at incorporating.

3. **Discount Calculation**
   ```java
   if (numberOfCups > 5) {
       discount = totalCost * 0.10; // 10% discount
   }
   ```
   - **Explanation**: This conditional logic is straightforward and aligns with the AI-generated style of implementing simple business logic. The comment explaining the discount calculation also reflects the clarity and documentation style typical of AI-generated code.

4. **Output Formatting and Summary Display**
   ```java
   System.out.println(""\n== Welcome to ICT Coffee Shop =="");
   System.out.println(""** Billing **"");
   System.out.println(""Customer Name: "" + customerName);
   System.out.println(""Coffee Type: "" + coffeeType);
   System.out.println(""Number of Cups: "" + numberOfCups);
   ```
   - **Explanation**: The formatted output and structured presentation of information are characteristic of AI-generated code, which often emphasizes readability and user-friendly output.

5. **Scanner Closure**
   ```java
   scanner.close();
   ```
   - **Explanation**: Explicitly closing the scanner is a best practice that AI-generated code often follows to ensure resource management and avoid potential memory leaks, reflecting attention to detail in code quality.

**Comparison to Previous Examples**

- **Similarity in Structure and Clarity**:
  - **Example 1 (ChatGPT-generated)**: The code for `LoanCalculator` uses a similar structured approach with clear variable names and a loop for calculations.
    ```java
    double loanAmount = input.nextDouble();
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
    ```
  - **Comparison**: Both the target code and this example demonstrate a clear, structured approach to problem-solving, with logical flow and descriptive variable names.

- **Handling User Input and Conditional Logic**:
  - **Example 2 (ChatGPT-generated)**: The `ShippingCost` example uses structured input handling and conditional logic for decision-making.
    ```java
    double weight = input.nextDouble();
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Comparison**: The target code similarly uses structured input handling and conditional logic to determine pricing and discounts, reflecting AI-generated patterns.

- **Differences from Human-Written Examples**:
  - **Example 1 (Human-written)**: The `Exercise08_12` example uses more complex logic with nested conditions and multiple data structures.
    ```java
    double[] rates = {0.10, 0.15, 0.25, 0.28, 0.33, 0.35};
    if (income <= bracket[0]) {
        tax = income * rates[0];
    }
    ```
  - **Comparison**: The human-written example contains more intricate logic and data manipulation, which is less typical of AI-generated code that tends to favor straightforward logic.

Overall, the target source code's simplicity, clarity, and structured approach align closely with the ChatGPT-generated examples, supporting the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 5, 10, 938000)}"
jidapa.kra@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classifies the target source code as human-written with 100% probability due to several distinguishing features. Key characteristics include the use of verbose and clear variable names, structured and detailed comments, and a more manual approach to sorting logic that suggests a human touch. The presence of debugging or informational print statements (e.g., ""Pass X: [...]"") also indicates a human-centric focus on understanding and tracing the code’s execution. Additionally, the overall structure and flow of the code exhibit a level of complexity and nuance often associated with human authorship, such as the manual implementation of a selection sort algorithm.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1: `public static void sorting(String arr[],int n)`**
  - **Explanation**: The method signature uses clear and descriptive parameter names (`arr` and `n`), which is typical of human-written code. While concise, the naming conveys the purpose and type of each parameter effectively, reflecting a human tendency to write self-documenting code.

- **Key Code Line 2: `System.out.print(""Pass ""+ (i+1)+"": ["");`**
  - **Explanation**: This line includes a print statement for debugging or tracing, a common practice among human developers to track the progress and state of the program. Such statements are often added to understand the flow of execution, which is less likely to be generated by AI models without explicit instruction.

- **Key Code Line 3: `if(arr[j].compareTo(minStr) > 0)`**
  - **Explanation**: The use of `compareTo` for string comparison suggests a nuanced understanding of string operations, indicating a human's attention to detail and correctness. AI-generated code might opt for simpler or more generic comparisons unless specifically guided.

- **Key Code Line 4: `String minStr = arr[i];`**
  - **Explanation**: The initialization of `minStr` with a descriptive name reflects a human’s inclination towards clarity and readability. This line also demonstrates a manual approach to tracking the minimum string, showcasing a human-like method of implementing algorithms.

- **Key Code Line 5: `if(min_index != i) { ... }`**
  - **Explanation**: The conditional check and subsequent swapping logic represent a human's manual implementation of a selection sort algorithm. This approach, while straightforward, involves a level of algorithmic thinking and step-by-step logic construction typical of human developers.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**: 
    ```java
    public static int[] merge(int[] list1, int[] list2) {
        ...
    }
    ```
  - **Target Snippet**:
    ```java
    public static void sorting(String arr[],int n)
    ```
  - **Analysis**: Both snippets define methods with clear parameter names, but the target code’s use of string arrays and manual sorting logic contrasts with the more straightforward merging operation in the AI-generated example. The target code reflects more algorithmic complexity, indicative of human authorship.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Snippet**:
    ```java
    public static void bubbleSort(int[] arr) {
        ...
    }
    ```
  - **Target Snippet**:
    ```java
    public static void sorting(String arr[],int n)
    ```
  - **Analysis**: While both snippets implement sorting algorithms, the target code uses a selection sort with explicit tracking and swapping of minimum values, showcasing a detailed and manual approach. The AI-generated example focuses on bubble sort, a simpler and more direct algorithm.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**:
    ```java
    for (int i = 1; i < length; i++) {
        ...
    }
    ```
  - **Target Snippet**:
    ```java
    for(int i = 0; i < n - 1; i++)
    ```
  - **Analysis**: Both snippets use loop constructs for sorting, but the target code’s use of a selection sort algorithm and detailed print statements for each pass align closely with human-written patterns, emphasizing clarity and debugging.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**:
    ```java
    System.out.print(""Enter five integers: "");
    ```
  - **Target Snippet**:
    ```java
    System.out.print(""Pass ""+ (i+1)+"": ["");
    ```
  - **Analysis**: Both snippets include print statements for user interaction or debugging. The target code’s print statements for each sorting pass demonstrate a human-like approach to program tracing and debugging, similar to the user prompts in the human-written example.

Overall, the target source code aligns more closely with human-written examples due to its structured, detailed, and manually crafted approach, particularly in algorithm implementation and debugging practices.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'Quite clear examples', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 9, 9, 90000)}"
jidapa.kra@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The target source code was classified as human-written with a probability of 100.0000%. This classification is likely due to several factors that are characteristic of human-written code. Firstly, the code contains a structured and logical flow, with clear segmentation into tasks such as input handling, average calculation, and grading. The use of loops and conditional statements is typical of human logic in problem-solving. Additionally, the presence of comments and the formatting style, including spacing and indentation, suggest a human touch. The methodical approach to solving the problem, including the initialization of variables and the use of arrays, further indicates human authorship.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `System.out.println(""==MUGrocery=="");`

   - **Explanation**: The use of a simple print statement to denote the beginning of a program or section is a common practice among human programmers to enhance readability and user interaction. It shows an awareness of user interface, which is a typical human consideration.

2. **Code Line**: `for(int i =0; i< n;i++) {`

   - **Explanation**: The loop structure here is straightforward, with consistent formatting and spacing, indicating manual coding practices. Human-written code often features such loops for iterating over arrays or collections, reflecting logical problem-solving.

3. **Code Line**: `System.out.print(""Enter price for item "" + (i+1) +"": "");`

   - **Explanation**: The concatenation of strings and variables in print statements is a common human practice to create dynamic output messages. This line shows attention to detail in user interaction, which is a hallmark of human-written code.

4. **Code Line**: `char[] grades = new char[n];`

   - **Explanation**: The use of arrays to store data, such as grades, reflects a typical approach by human programmers to manage and manipulate collections of data efficiently. It shows an understanding of data structures.

5. **Code Line**: `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`

   - **Explanation**: This line combines formatted output with data from arrays, demonstrating a nuanced understanding of both formatting and data handling. The use of `String.format` for precise output is a sophisticated touch often seen in human-written code.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code**: 
    ```java
    System.out.print(""Enter the weight of the package in pounds: "");
    double weight = input.nextDouble();
    ```
  - **Target Code**: 
    ```java
    System.out.print(""Enter price for item "" + (i+1) +"": "");
    ```
  - **Analysis**: Both examples use print statements for user prompts, but the target code includes dynamic string concatenation, which is more typical in human-written code for enhancing user interaction.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Code**: 
    ```java
    double costPerUnitWeight1 = price1 / weight1;
    ```
  - **Target Code**: 
    ```java
    avg = avg/n;
    ```
  - **Analysis**: Both lines perform arithmetic operations, but the target code’s use of average calculation reflects a more comprehensive problem-solving approach, indicative of human logic.

- **Comparison with Human-written Example 1**:
  - **Example Code**: 
    ```java
    StringBuilder recordBuilder = new StringBuilder();
    ```
  - **Target Code**: 
    ```java
    char[] grades = new char[n];
    ```
  - **Analysis**: Both examples demonstrate the use of data structures to manage data. The target code’s use of arrays for grades is a straightforward and efficient choice, reflecting human-written characteristics.

- **Comparison with Human-written Example 2**:
  - **Example Code**: 
    ```java
    if (!file.exists()) {
        System.out.println(""Could not find the Salary.txt file to read from.."");
    }
    ```
  - **Target Code**: 
    ```java
    if(itemPrices[i] < 15) {
    ```
  - **Analysis**: Both examples use conditional statements to handle different scenarios. The target code’s grading logic is a typical human approach to categorization tasks.

The target source code exhibits characteristics such as structured logic, user-focused output, and efficient data handling, all of which align with patterns found in human-written examples. These similarities strongly support the classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'It would be nice to have the dark markdown format for reading codes', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 10, 22, 356000)}"
jidapa.kra@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its verbose commenting style, explicit type declarations and conversions (especially with dates), a somewhat rigid and predictable code structure, and a tendency to decompose the problem into smaller, more explicit functions (like `calculateDaysBetweenDates` and `isLeapYear`).  While functionally correct, the code exhibits an over-reliance on explanatory comments and intermediate variables, a pattern often observed in ChatGPT-generated code. The inclusion of a ""helper method"" comment before `calculateDaysBetweenDates` further reinforces this suspicion.  The straightforward, almost textbook-like approach to date manipulation, while not incorrect, lacks the conciseness and potential use of libraries that a human programmer might employ.  The handling of leap years, while accurate, contributes to the perception of an AI meticulously following a prescribed set of rules.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line:** `// Create scanner object to capture user input`
    - **Explanation:** This comment is overly descriptive.  Human programmers would likely simply write `Scanner scanner = new Scanner(System.in);` without the preceding explanatory comment.  ChatGPT tends to over-comment, explaining even obvious steps.

2. **Key Code Line:** `String[] checkInDateParts = checkInDate.split(""-"");`
    - **Explanation:** While functional, this and subsequent lines demonstrate a very explicit step-by-step approach.  A human programmer might utilize libraries or more streamlined date parsing methods instead of manually splitting and converting.

3. **Key Code Line:**  `// Convert to integers for calculations`
    - **Explanation:**  This comment is again overly explanatory. The subsequent code makes the conversion obvious. ChatGPT often adds these types of comments before simple operations.

4. **Key Code Line:** `// Helper method to calculate the number of days between two dates`
    - **Explanation:**  The phrase ""Helper method"" is frequently used by ChatGPT when defining functions.  While not inherently wrong, its prevalence in generated code makes it a potential indicator.

5. **Key Code Line:** `int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay, checkOutYear, checkOutMonth, checkOutDay);`
     - **Explanation:**  The explicit passing of six individual integer arguments, derived from previously parsed date strings, further illustrates the verbose and somewhat rigid style typical of ChatGPT output.


**Comparison to Previous Examples**:

1. **Verbose commenting**: The target code's commenting style is similar to the ChatGPT examples.  Compare the target's `// Create scanner object to capture user input` to the numerous comments in Example 1 (ChatGPT):  `// Get input from user`, `// Calculate future investment value`, `// Output result`. Human-written Example 1, in contrast, comments less frequently and focuses on less obvious aspects like the formula used (`//futureInvestmentValue = investmentAmount * (1 + monthlyInterestRate)^(numberOfYears*12)`).


   ```java
   // Target Code
   // Create scanner object to capture user input
   Scanner scanner = new Scanner(System.in);

   // ChatGPT Example 1 (0_Exercise02_21.java)
   // Get input from user
   System.out.print(""Enter the investment amount: $"");
   double investmentAmount = scanner.nextDouble();
   ```


2. **Explicit type conversions:**  Similar to ChatGPT Example 2, the target code performs explicit conversions (`int checkInYear = Integer.parseInt(checkInDateParts[0]);`).  Human-written code, while not excluding explicit conversions, tends to be more concise where possible.


   ```java
   // Target Code
   int checkInYear = Integer.parseInt(checkInDateParts[0]);

   // ChatGPT Example 2 (0_Exercise05_21.java)
   double monthlyInterestRate = annualInterestRate / 1200.0; 
   ```


3. **Step-by-step decomposition:** The breakdown of the date difference calculation into separate functions (`calculateDaysBetweenDates`, `isLeapYear`) mirrors the structured, modular approach often seen in ChatGPT examples. While human-written code can also use functions, the target code's decomposition feels more mechanistic.


   ```java
   // Target Code
   int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                  checkOutYear, checkOutMonth, checkOutDay);

   //  No direct equivalent in provided ChatGPT examples, but the overall tendency
   //  towards breaking down problems into smaller, explicit functions is a
   //  common ChatGPT trait.
   ```

4. **Lack of library usage (for dates):** Unlike the human-written examples, the target code and the ChatGPT examples do not use any specialized libraries. The target code's date manipulation is handled manually, similar to the basic arithmetic operations in the ChatGPT examples, suggesting a lack of awareness of more efficient methods.


   ```java
   // Target Code
   String[] checkInDateParts = checkInDate.split(""-"");

   // ChatGPT Example 1 (0_Exercise02_21.java) - Demonstrates basic arithmetic without library use.
   double monthlyInterestRate = annualInterestRate / 1200.0; 
   ```


These similarities with ChatGPT-generated examples and differences from human-written code strengthen the model's classification of the target code as AI-generated. The code, while correct, exhibits characteristics of an AI meticulously following instructions and generating verbose, explicit code rather than a human programmer's more concise and idiomatic approach.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'The word choice is little complicate to understand (more academic writing) However, the style of writing is more detailed (i.e. given the line of codes in the explanation) compared to GPT', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 16, 6, 78000)}"
jidapa.kra@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including the specific implementation of the sorting algorithm, the inclusion of print statements for debugging/visualization within the sorting logic, and the overall code structure. The choice of a less common sorting algorithm (selection sort, implemented somewhat unconventionally with descending order) deviates from the typical optimized algorithms frequently observed in ChatGPT-generated code. The embedded print statements for each pass, showing the state of the array, suggest a human developer's approach to understanding and verifying the algorithm's behavior.  The code's structure, with its focus on a single sorting method within a class, and the absence of input/output handling in the provided snippet, also contributes to the human-written classification.  The style of comments and variable naming conventions further suggest human authorship. The lack of a `main` method also suggests this snippet might be part of a larger project, something less common in quickly generated AI examples.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `public static void sorting(String arr[],int n)`
    - **Explanation:**  The method signature suggests a deliberate design choice for a specific sorting function. ChatGPT-generated code often uses more generic names like `sort` and includes input/output handling within the same function.

2. **Key Code Line:**  `System.out.print(""Pass ""+ (i+1)+"": ["");`
    - **Explanation:**  The inclusion of print statements to track the progress of the sorting algorithm indicates a human-like debugging approach. ChatGPT-generated code rarely includes such detailed intermediary output for visualization within the core algorithm.

3. **Key Code Line:** `if(arr[j].compareTo(minStr) > 0)`
    - **Explanation:** Using `compareTo` for strings and implementing a descending sort is less common in automatically generated sorting examples. ChatGPT tends towards simpler comparisons (e.g., `>` for integers) and ascending order.

4. **Key Code Line:**  `if(min_index != i)`
    - **Explanation:**  This check before swapping elements optimizes the algorithm slightly.  While ChatGPT sometimes includes similar optimizations, the overall context of the code suggests a deliberate design, which is more human-like.

5. **Key Code Line:** `String temp = arr[min_index];`
    - **Explanation:** The use of a temporary variable for swapping is standard practice but, in combination with other factors, strengthens the human-written impression.  ChatGPT occasionally uses in-place swaps without a `temp` variable, especially for numeric sorting.


**Comparison to Previous Examples**

* **Target Code vs. ChatGPT Example 1 (0_Exercise07_31.java):**
    - **Target Code:** `public static void sorting(String arr[],int n)`
    - **ChatGPT Example 1:** `public static int[] merge(int[] list1, int[] list2)`
    - **Analysis:** The target code focuses solely on the sorting algorithm. The ChatGPT example includes both the merging algorithm and the main method with input/output handling. This comprehensive structure is characteristic of ChatGPT-generated code, aiming to provide a complete working example.

* **Target Code vs. ChatGPT Example 2 (0_BubbleSort3.java):**
    - **Target Code:** `System.out.print(""Pass ""+ (i+1)+"": ["");`
    - **ChatGPT Example 2:** `System.out.println(""Sorted array:"");`
    - **Analysis:** The target code's verbose in-process printing contrasts with the ChatGPT example, which only prints the final result. This difference suggests a human developer's effort to visualize the sorting steps.

* **Target Code vs. Human-Written Example 1 (1_p02255.java):**
    - **Target Code:**  `System.out.println(""]"");` inside the sorting loop
    - **Human-Written Example 1:** `print(a);` inside the sorting loop
    - **Analysis:**  Both the target code and the human-written example share the characteristic of printing intermediate states within the sorting process, which is indicative of human debugging techniques.

* **Target Code vs. Human-Written Example 2 (1_Exercise11_11.java):**
    - **Target Code:** `if(arr[j].compareTo(minStr) > 0)`
    - **Human-Written Example 2:**  `if (list.get(n) > list.get(i))`
    - **Analysis:** While the target code uses `compareTo` for string comparison, the human-written example uses direct comparison for integers. Both code snippets demonstrate a specific comparison tailored to the data type, suggesting human-authored code.


The analysis of the target code against the provided examples reveals a stronger resemblance to human-written coding practices. The distinctive features, such as in-process debugging prints, a focused sorting function, and the particular implementation of a sorting algorithm, contributed to the model's classification. These features are more aligned with human-written code, especially when compared to the comprehensive and self-contained structure of ChatGPT-generated examples.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 22, 1, 477000)}"
jidapa.kra@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the specific formatting choices, the presence of minor inefficiencies (like the repetitive `if/else if` block and manual array printing), and the overall structure of the code.  The code feels like a student assignment or practice exercise, exhibiting some slightly less polished elements that a seasoned developer might refine.  The absence of perfect optimization, combined with a straightforward, almost procedural approach, contributes to the human-written classification. The embedded formatting within the output statements and the lack of included libraries (beyond basic ones like `Scanner`) also point towards a human origin.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**:  `System.out.print(""Item Prices: ["");`
    - **Explanation**: This line, along with the subsequent loop for printing array elements, demonstrates a manual approach to formatting array output.  While functional, it's less concise than using `Arrays.toString()`. This manual handling is more characteristic of beginners or someone focused on very specific formatting control, hinting towards human-written code.

- **Key Code Line 2**: `if(i!=4) { System.out.print(itemPrices[i]+"", ""); }else { System.out.print(itemPrices[i]); }`
    - **Explanation**:  This code handles the comma placement in the array output specifically. This slightly clunky implementation, instead of a more elegant loop condition or external method, is indicative of human thought processes and a potential beginner’s approach to solving the problem.

- **Key Code Line 3**: `avg = avg/n;`
    - **Explanation**: While functionally correct, `avg /= n;` is a more common and concise way to express this calculation. The slightly less optimized approach in the target code could be interpreted by the model as a sign of human writing.

- **Key Code Line 4**: The entire `if/else if` block for grade assignment.
    - **Explanation**:  A chained `if/else if` block like this, especially for assigning grades based on ranges, often suggests a direct translation of human logic into code.  While efficient enough, it lacks the conciseness or elegance that might be generated by an AI focused on optimal or compact solutions.

- **Key Code Line 5**: `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Explanation**: This line demonstrates formatting directly within the `println` statement. While clear, it's arguably less readable than building the output string separately. This style can be common in human-written code, especially for simpler outputs.



**Comparison to Previous Examples**

- **Formatting and Verbosity**:  The target code's manual array printing and formatting within `println` statements contrasts with the more concise output in the ChatGPT examples.  ChatGPT Example 1 uses `printf` effectively for formatted output, suggesting an awareness of more efficient approaches.

    ```java
    // Target Code
    System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);

    // ChatGPT Example 1 (using printf)
    System.out.printf(""The shipping cost is $%.2f\n"", cost);
    ```

- **Structure and Optimization**: The target code's longer `if/else if` block for grade assignment contrasts with the more streamlined approach potentially taken by an AI. The human-written example (Example 1) also contains a similar `switch` statement, albeit for a different purpose, demonstrating a comparable structural complexity.

    ```java
    // Target Code (excerpt from if/else block)
    if(itemPrices[i] < 15) {
        g = 'A';
    } else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        g = 'B';
    } // ... and so on

    // Human-written Example 1 (excerpt from switch statement)
    switch (rank) {
        case RANK_ASSISTANT:
           salary = 50_000 + Math.random() * 30_000;
           break;
       // ... other cases
    }
    ```

- **Simplicity of Logic**:  The target code performs relatively straightforward calculations and operations. This aligns with both ChatGPT examples, which also address basic programming tasks. However, the target code's slightly less efficient implementations (e.g., the array printing) differentiate it from the cleaner, often more optimized code generated by ChatGPT.


The cumulative effect of these small differences, combined with the observed patterns in the human-written examples, contributes to the model's high confidence in classifying the target code as human-written. It suggests a human programmer who prioritizes direct implementation of logic over perfectly optimized code, potentially characteristic of a learning or practice scenario.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 23, 24, 258000)}"
jidapa.kra@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its straightforward, illustrative style, typical of code produced when given simple instructions.  The code lacks complexity and advanced techniques, sticking to basic loops and conditional statements for a simple seat reservation system.  The repetitive nature of the code, especially in the nested loops for displaying and assigning seat status, reinforces the impression of a basic, generated solution.  The predictable ""even/odd"" reservation logic and the lack of error handling or user input further contribute to this classification. The clear, verbose comments and explicit variable names (ROWS, COLUMNS) also align with the tendency of LLMs to generate well-commented, explanatory code. The lack of any custom data structures or algorithms and the overall simplicity points towards a novice-level implementation, which aligns with typical ChatGPT outputs for beginner programming exercises.

---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `final int ROWS = 10;`
    - **Explanation:**  LLMs often define constants like this at the beginning of the program, mirroring introductory programming tutorials and examples.  Human-written code might handle sizes more dynamically or through configuration.

- **Key Code Line 2:**  `// Task 1: Display the theater's seating layout`
    - **Explanation:**  ChatGPT frequently generates excessively descriptive comments, breaking down code into obvious ""tasks."" This level of granularity in comments is less common in professional or even student-written code where the purpose is often clear from the context.

- **Key Code Line 3:** `for (int row = 1; row <= ROWS; row++) {`
    - **Explanation:**  The use of simple nested `for` loops, while common in programming, is characteristic of ChatGPT’s approach to basic iterative tasks. More complex code might use collections or more sophisticated data structures to manage and display the seating arrangement.

- **Key Code Line 4:** `if (col % 2 == 0) {`
    - **Explanation:** The simplistic ""even/odd"" logic for seat reservation points towards a generated solution based on a simple prompt.  Human code would likely include more realistic reservation logic, perhaps involving user input or a more complex booking system.

- **Key Code Line 5:** `System.out.println(""Total Available Seats: "" + availableSeats);`
    - **Explanation:** Similar to the comments, ChatGPT tends to produce very explicit output statements, mirroring the detailed instructions typically provided in prompts. Human-written code might condense output or present information in a more concise way.

**Comparison to Previous Examples**:

- **Repetitive Loop Structure:**  The target code’s nested loop structure for displaying seats is very similar to the loop in the ChatGPT-generated `NineHeadsAndTails` (Example 1) example. Both use simple nested `for` loops for a straightforward presentation of data.

    ```java
    // Target Code
    for (int row = 1; row <= ROWS; row++) {
        System.out.print(""Row "" + row + "": "");
        for (int col = 1; col <= COLUMNS; col++) {
            System.out.print(""S"" + col + "" ""); 
        }
        System.out.println();
    }
    ```

    ```java
    // ChatGPT Example 1 (NineHeadsAndTails)
    for (int i = 0; i < binaryString.length(); i++) {
        if (i % 3 == 0) {
            System.out.println(); // Start a new row
        }
        // ... (displaying H or T)
    }
    ```

- **Simple Conditional Logic:** The target code's use of `if (col % 2 == 0)`  is analogous to the simple conditional checks found in ChatGPT Example 2 (`CardPicker`), where `random.nextInt()`  determines output. Both examples demonstrate a basic level of conditional logic without complex branching or decision-making.

    ```java
    // Target Code
    if (col % 2 == 0) {
        System.out.print(""S"" + col + ""-R "");
    } else {
        System.out.print(""S"" + col + ""-A "");
    }
    ```

    ```java
    // ChatGPT Example 2 (CardPicker)
    // ... (picking random rank and suit indices)
    String rank = ranks[rankIndex];
    String suit = suits[suitIndex];
    System.out.println(rank + "" of "" + suit); // Output based on random selection
    ```

- **Contrast with Human-Written Example:**  The human-written examples, especially `Exercise06_15`, demonstrate more complex logic and data handling.  For instance, `Exercise06_15` uses nested `if-else` structures and calculations for tax computation. This level of complexity is absent in the target code, further supporting its classification as ChatGPT-generated.

    ```java
    // Human-written Example 1 (Exercise06_15)
    if (taxableIncome <= upBound10)
        tax = taxableIncome * 0.10;
    else if (taxableIncome <= upBound15)
        tax = upBound10 * 0.10 + (taxableIncome - upBound10) * 0.15;
    // ... (more complex tax calculations)
    ```

The combined effect of these features – simple loops, predictable logic, verbose comments, and explicit output – leads the model to classify the target code as ChatGPT-generated.  The code lacks the sophistication and nuances typically found in human-written code, particularly when compared to the more complex structures and algorithms present in the provided human-written examples.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'In the detail section, the use of words is quite hard to understand for students (and instructors sometimes)', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 19, 1, 841000)}"
jidapa.kra@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors including its simple, straightforward structure, explicit comments indicating task breakdowns (e.g., ""// Task 1: Define Variables""), and a common ChatGPT pattern of sequentially numbered tasks.  The use of a `switch` statement for a relatively simple price differentiation, combined with the basic discount application, also contributes to this classification.  The code lacks the complexity and potential nuances often found in human-written code, aligning more closely with the predictable patterns exhibited by ChatGPT.  The greeting message ""== Welcome to ICT Coffee Shop =="" adds to the impression of a generated example scenario, often found in introductory programming exercises. The closing of the scanner (`scanner.close()`) although good practice, is often emphasized in online tutorials and introductory courses, aligning with ChatGPT's training data.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line:** `// Task 1: Define Variables`
    - **Explanation:** This explicit comment, along with similarly structured comments like ""// Task 4: Receive input from the keyboard"", strongly resembles the step-by-step approach often taken by ChatGPT when generating code for basic problem descriptions. Human-written code typically employs comments more strategically, focusing on clarifying complex logic or design choices rather than outlining obvious steps.

2. **Key Code Line:** `switch (coffeeType.toLowerCase()) {`
    - **Explanation:** While `switch` statements are legitimate constructs, ChatGPT frequently utilizes them for simple branching logic where an `if-else if` structure might be more concise and readable in human-written code. This overuse of `switch` statements is a recognizable pattern.

3. **Key Code Line:** `if (numberOfCups > 5) {`
    - **Explanation:** The discount logic is very basic and stereotypical of introductory programming exercises often used to train LLMs.  Human-written code might involve more complex discount structures or tie into a broader pricing model.

4. **Key Code Line:** `System.out.println(""\n== Welcome to ICT Coffee Shop =="");`
    - **Explanation:**  This welcome message, along with the ""** Billing **"" output, suggests a contrived example scenario commonly found in generated code.  Human-written code is less likely to include such generic greetings.

5. **Key Code Line:**  `scanner.close();`
    - **Explanation:** Though correct and good practice, the explicit closing of the scanner, particularly in simple programs, is often a point of emphasis in tutorials and beginner-level resources from which ChatGPT learns. Experienced programmers might omit it in such concise programs, relying on the JVM's garbage collection.


**Comparison to Previous Examples**:

- **Similarity to ChatGPT-Generated Example 1 (0_Exercise05_21.java):** Both the target code and this example feature structured output with formatted strings (e.g., `System.out.printf(""%-15.3f%-15.2f%-15.2f\n"", annualInterestRate, monthlyPayment, totalPayment);` in the example and various `System.out.println()` statements in the target code). This structured output and straightforward structure, coupled with clear commenting, is characteristic of generated code.

    ```java
    // Target Code
    System.out.println(""Total Cost: "" + totalCost + "" Baht"");

    // Example 1
    System.out.printf(""%-15.3f%-15.2f%-15.2f\n"", annualInterestRate, monthlyPayment, totalPayment); 
    ```

- **Similarity to ChatGPT-Generated Example 2 (0_Exercise03_18.java):**  Both utilize a chain of `if-else if` or a `switch` statement for relatively simple branching logic. This overuse of conditional structures, rather than more efficient methods, is common in generated code.

    ```java
    // Target Code
    switch (coffeeType.toLowerCase()) { // switch used for basic branching

    // Example 2
    if (weight > 50) { // Chain of if-else ifs
        // ...
    } else if (weight > 10) {
        // ...
    } // ... and so on
    ```

- **Difference from Human-Written Example 1 (1_Exercise08_12.java):** The human-written example demonstrates more complex logic and the use of arrays and helper functions (`calcTax`), indicating a more planned and modular design. This contrasts with the target code's linear, simple approach.

    ```java
    // Target Code - simple calculation
    finalCost = totalCost - discount;

    // Example 1 - more complex logic and function call
    System.out.printf(""Tax is $%.2f"", calcTax(income, brackets[status], rates));
    ```

- **Difference from Human-Written Example 2 (1_Exercise06_15.java):** The human-written example, while also dealing with formatted output, addresses a more nuanced problem and handles multiple tax brackets, showcasing more complex logic than the target code. It also uses constants effectively (`space`, `spacex2`).

    ```java
    // Target Code - simple output
    System.out.println(""Coffee Type: "" + coffeeType);

    // Example 2 - more complex output formatting and logic
    System.out.print(spacex2 + Math.round(computeTax(0, i))); 
    ```

The combination of simpler logic, explicit step-by-step comments, overuse of basic conditional structures, and a generic example scenario strongly suggests that the target code aligns more with the patterns found in ChatGPT-generated code than human-written code, supporting the model's classification.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': 'The overview is quite clear', 'submitted_at': datetime.datetime(2025, 3, 27, 9, 20, 33, 526000)}"
aniqua@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated with a probability of 100% is likely influenced by several key features and patterns typical of AI-generated code. These include the presence of detailed comments, structured input/output handling, and helper methods with clear, descriptive names. The code demonstrates a systematic approach to problem-solving, with a focus on clarity and completeness. The model may have identified these characteristics as indicative of AI-generated code due to their similarity to patterns found in other AI-generated examples, such as consistent commenting, methodical input processing, and well-defined helper functions.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** 
   ```java
   // Create scanner object to capture user input
   Scanner scanner = new Scanner(System.in);
   ```
   - **Explanation:** This line includes a comment that clearly describes the purpose of the code. AI-generated code often contains such comments to enhance readability and comprehension, which is a common pattern in ChatGPT-generated code.

2. **Code Line:** 
   ```java
   // Parse the check-in and check-out dates into individual components
   String[] checkInDateParts = checkInDate.split(""-"");
   ```
   - **Explanation:** The use of comments to describe the parsing of input data into components is a pattern seen in AI-generated code. This level of detail in commenting is typical of ChatGPT-generated code, which aims to provide clarity at each step.

3. **Code Line:** 
   ```java
   // Calculate the number of nights stayed using the helper method
   int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                  checkOutYear, checkOutMonth, checkOutDay);
   ```
   - **Explanation:** The use of a helper method with a descriptive name suggests a modular and organized approach to coding, which is characteristic of AI-generated code. This reflects a design pattern often used by AI to break down complex tasks into simpler, reusable components.

4. **Code Line:** 
   ```java
   // Helper method to calculate the number of days between two dates
   public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                               int endYear, int endMonth, int endDay) {
   ```
   - **Explanation:** The presence of a helper method with a clear and descriptive comment indicates a structured approach to coding. AI-generated code frequently uses such methods to encapsulate functionality, making the code easier to understand and maintain.

5. **Code Line:** 
   ```java
   // Adjust for leap years
   if (isLeapYear(startYear)) {
       daysInMonth[1] = 29; // February has 29 days in a leap year
   }
   ```
   - **Explanation:** The detailed handling of edge cases, such as leap years, with comments explaining the logic, is a hallmark of AI-generated code. This demonstrates a thoroughness and attention to detail typical of ChatGPT-generated solutions.

**Comparison to Previous Examples**

- **Similarity with ChatGPT-generated Example 1:**
  - **Target Code Snippet:**
    ```java
    // Calculate future investment value
    double monthlyInterestRate = annualInterestRate / 1200.0; // 12 months in a year, 100 to convert percentage to decimal
    ```
  - **Comparison:** Both examples include detailed comments explaining the purpose and logic of the code. This pattern of comprehensive commenting is common in AI-generated code, aiming to enhance understanding.

- **Similarity with ChatGPT-generated Example 2:**
  - **Target Code Snippet:**
    ```java
    // Compute and display the monthly and total payments for each interest rate
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
    ```
  - **Comparison:** The use of loops with clear comments explaining their purpose is another characteristic of AI-generated code. This systematic approach to iterating over data is evident in both the target and example codes.

- **Difference from Human-written Example 1:**
  - **Target Code Snippet:**
    ```java
    // futureInvestmentValue = investmentAmount * (1 + monthlyInterestRate)^(numberOfYears*12)
    ```
  - **Comparison:** Human-written code often contains less detailed comments and may include commented-out code snippets or less structured logic. The target code's structured and well-commented approach contrasts with the more informal style of human-written code.

- **Difference from Human-written Example 2:**
  - **Target Code Snippet:**
    ```java
    System.out.print(""Enter the amount you would like to invest each month: "");
    ```
  - **Comparison:** The human-written example shows a more conversational style in user prompts, whereas the target code focuses on clarity and precision. AI-generated code tends to prioritize clear, direct communication.

These comparisons highlight the systematic, well-commented, and organized nature of the target source code, aligning with patterns typical of ChatGPT-generated examples. The detailed handling of logic and edge cases further supports the classification decision.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 8, 27, 61000)}"
aniqua@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",ChatGPT,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model predicts the target source code as human-written with a 100% probability. This classification is likely influenced by several factors, including the structure and complexity of the code, the use of specific programming constructs, and the overall style and organization. The target code demonstrates a clear, logical flow with well-defined tasks, such as input handling, array manipulation, and conditional logic for grading. The code also uses a straightforward approach to display outputs, which is characteristic of human-written code. Additionally, the lack of comments and the use of simple, yet effective, variable names contribute to this classification.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `int n = 5;`
   - **Explanation**: This line sets a fixed size for the array, which is a common practice in human-written code when the number of elements is known beforehand. The simplicity and clarity of this approach suggest a human touch, as AI-generated code often tries to be more generic or dynamic.

2. **Code Line**: `for(int i =0; i< n;i++) {`
   - **Explanation**: The usage of a basic `for` loop to iterate over a fixed number of items is indicative of human-written code. It reflects a straightforward and efficient method for processing arrays, which is typical in human coding practices.

3. **Code Line**: `System.out.print(""Item Prices: ["");`
   - **Explanation**: The manual formatting for displaying the array contents, including the use of brackets and commas, suggests a human's attention to detail. This kind of manual formatting is less common in AI-generated code, which might use built-in functions for similar tasks.

4. **Code Line**: `avg = avg/n;`
   - **Explanation**: The calculation of an average by summing values and dividing by the count is a basic mathematical operation. The direct and simple implementation here is characteristic of human coding, focusing on clarity and functionality.

5. **Code Line**: `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
   - **Explanation**: The use of `String.format` for precise output formatting, especially with financial values, shows a human's concern for readability and precision. This attention to detail in presentation is a hallmark of human-written code.

**Comparison to Previous Examples**

- **Target Code vs. ChatGPT-generated Example 1:**
  - **Target Code**: Uses a fixed-size array and manual formatting for output.
  - **Example 1**: Uses conditional logic for decision making, similar to the target. However, the target code's manual formatting and straightforward approach to handling arrays and outputs differ from the AI-generated example's more generic structure.
  - **Comparison**: The human-written code's manual formatting and clear, task-focused structure contrast with the more generic, template-like approach of the AI-generated code.

- **Target Code vs. Human-written Example 1:**
  - **Target Code**: Displays a clear structure with specific tasks, such as input handling and grading.
  - **Example 1**: Also demonstrates a structured approach with defined tasks and a focus on functionality, such as file operations and random data generation.
  - **Comparison**: Both codes share a clear, logical flow and task-oriented structure, supporting the classification of the target code as human-written.

- **Target Code vs. ChatGPT-generated Example 2:**
  - **Target Code**: Uses simple loops and conditionals for grading.
  - **Example 2**: Employs similar decision-making structures but lacks the manual formatting and straightforward handling of arrays seen in the target.
  - **Comparison**: The target code's simplicity and manual formatting differ from the AI-generated example's tendency towards more complex or verbose solutions.

- **Target Code vs. Human-written Example 2:**
  - **Target Code**: Focuses on input/output and basic calculations.
  - **Example 2**: Involves more complex operations like file reading and data aggregation but shares a similar attention to detail and task-oriented coding.
  - **Comparison**: Both examples exhibit human-like attention to detail and task management, reinforcing the target code's classification as human-written.

The similarities between the target code and human-written examples, particularly in terms of structure, attention to detail, and task clarity, strongly support the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 11, 3, 190000)}"
aniqua@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",ChatGPT,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The classification of the target source code as ChatGPT-generated is influenced by several key features and patterns that align with typical outputs from AI language models like ChatGPT. These include consistent and structured formatting, clear and verbose comments, systematic logic flow, and a tendency to use straightforward, conventional coding approaches. The code demonstrates a methodical approach to solving the problem, with tasks broken down into clearly defined sections, which is a common characteristic of AI-generated code. Additionally, the use of comments to explain each step of the process is indicative of AI-generated content, as these models often include comments to enhance code readability and understanding.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:**
   ```java
   System.out.println(""== MUTheater Seat Layout =="");
   ```

   - **Explanation:** This line is part of a pattern where the code uses clear and descriptive output statements to label sections of the output. AI-generated code often includes such statements to ensure clarity and organization in the output, making it easier for users to understand the program's functionality.

2. **Code Line:**
   ```java
   for (int row = 1; row <= ROWS; row++) {
   ```

   - **Explanation:** The use of loop constructs with descriptive variable names like `ROWS` and `COLUMNS` is typical in AI-generated code. This reflects a systematic approach to iterating over data structures, which is a hallmark of AI models trained to produce readable and maintainable code.

3. **Code Line:**
   ```java
   if (col % 2 == 0) {
       System.out.print(""S"" + col + ""-R "");
   } else {
       System.out.print(""S"" + col + ""-A "");
   }
   ```

   - **Explanation:** The conditional logic here is straightforward and follows a clear pattern. AI-generated code often employs simple, direct logic to solve problems, which can be seen in this even-odd seat reservation logic.

4. **Code Line:**
   ```java
   System.out.println(""\n== Seat Counts =="");
   ```

   - **Explanation:** Similar to the first highlighted line, this statement is part of a pattern that uses organized output sections. AI-generated code frequently includes such statements to enhance the readability and structure of the output.

5. **Code Line:**
   ```java
   int reservedSeats = 0;
   int availableSeats = 0;
   ```

   - **Explanation:** The initialization of counters with descriptive names is a common practice in AI-generated code. This reflects a methodical approach to problem-solving, where variables are clearly defined and used to track specific metrics.

**Comparison to Previous Examples**

- **Comparison to ChatGPT-generated Example 1:**

  **Example Code Snippet:**
  ```java
  System.out.print(""Enter a number between 0 and 511: "");
  int number = input.nextInt();
  ```

  **Target Code Snippet:**
  ```java
  System.out.println(""== MUTheater Seat Layout =="");
  ```

  - **Analysis:** Both snippets use clear and direct output statements to guide the user, a common feature in AI-generated code. This reflects the AI's tendency to produce user-friendly and structured outputs.

- **Comparison to ChatGPT-generated Example 2:**

  **Example Code Snippet:**
  ```java
  Random random = new Random();
  int rankIndex = random.nextInt(13);
  ```

  **Target Code Snippet:**
  ```java
  for (int row = 1; row <= ROWS; row++) {
  ```

  - **Analysis:** Both examples utilize loops and randomization with clear variable names. The AI-generated code often employs such constructs to handle iterative tasks or random processes systematically.

- **Comparison to Human-written Example 1:**

  **Example Code Snippet:**
  ```java
  System.out.print(""\nIncome"" + space + ""     "" + space + ""  Or Qualifying"" + space + ""Separate"" + ""      "" + ""a "" +
                ""House"");
  ```

  **Target Code Snippet:**
  ```java
  System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
  ```

  - **Analysis:** The human-written code uses more complex string concatenations and formatting, whereas the AI-generated code opts for simpler, more direct statements. This simplicity is a characteristic of AI-generated outputs, aiming for clarity and straightforwardness.

Overall, the target source code's structured approach, clear logic, and descriptive comments align with patterns seen in the ChatGPT-generated examples, supporting its classification as AI-generated. The differences in complexity and style compared to human-written examples further reinforce this classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 11, 54, 24000)}"
aniqua@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**
The model's classification of the target source code as ChatGPT-generated is likely influenced by several key features. These include the structured and systematic approach to problem-solving, the use of clear and concise comments, and a logical flow that mirrors common AI-generated patterns. Additionally, the use of specific constructs, such as the `switch` statement for handling multiple conditions, and the overall clarity and simplicity in variable naming and code organization, are indicative of AI-generated code. These traits align with the characteristics often found in ChatGPT-generated examples, where clarity, structure, and adherence to programming best practices are prevalent.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1: `switch (coffeeType.toLowerCase()) {`**
  - **Explanation**: The use of a `switch` statement to handle multiple conditions is a common pattern in AI-generated code. It provides a clear and structured way to manage different cases, which is often preferred in AI-generated solutions for its readability and efficiency.
  - **Features**: The transformation of the input to lowercase before the switch statement ensures case-insensitivity, a best practice that AI models often incorporate to handle user input robustly.

- **Code Line 2: `if (numberOfCups > 5) { discount = totalCost * 0.10; }`**
  - **Explanation**: This line demonstrates a straightforward conditional logic to apply discounts, a pattern frequently used in AI-generated code to maintain simplicity and clarity. The use of a percentage for discounts is a typical approach in AI-generated examples.
  - **Features**: The simplicity and directness of the logic, without additional complexity, reflect the AI's tendency to solve problems in the most efficient way possible.

- **Code Line 3: `System.out.println(""\n== Welcome to ICT Coffee Shop =="");`**
  - **Explanation**: The formatted string output is indicative of AI-generated code, where clear and structured user interaction is prioritized. The use of decorative lines for output is a common pattern in AI-generated code to enhance readability.
  - **Features**: The inclusion of decorative elements in the output reflects an AI-generated style, aiming to improve user experience.

- **Code Line 4: `System.out.println(""Invalid coffee type.""); return;`**
  - **Explanation**: The immediate return upon an invalid input is a pattern seen in AI-generated code to handle errors efficiently and prevent further execution. This reflects a defensive programming style often used in AI-generated solutions.
  - **Features**: The direct handling of invalid input with a message and early exit is a common pattern in AI-generated code to ensure robustness.

- **Code Line 5: `scanner.close();`**
  - **Explanation**: The explicit closing of resources, such as the scanner, demonstrates an AI-generated pattern of ensuring resource management and avoiding potential memory leaks. This attention to detail is characteristic of AI-generated code.
  - **Features**: The inclusion of resource management practices, such as closing scanners, is a hallmark of AI-generated code, reflecting adherence to programming best practices.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**: 
  - **Target Code**: `switch (coffeeType.toLowerCase()) {`
  - **Example 1 Code**: `for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {`
  - **Analysis**: Both examples use structured control flow statements to handle multiple conditions or iterations. The use of `switch` in the target code and `for` loop in Example 1 reflects a systematic approach to problem-solving, a common trait in AI-generated code.

- **Comparison with ChatGPT-generated Example 2**: 
  - **Target Code**: `if (numberOfCups > 5) { discount = totalCost * 0.10; }`
  - **Example 2 Code**: `if (weight > 50) { System.out.println(""The package cannot be shipped.""); }`
  - **Analysis**: Both lines employ simple conditional logic to handle specific cases, such as applying discounts or rejecting invalid inputs. The straightforward and clear logic is indicative of AI-generated patterns.

- **Comparison with Human-written Example 1**: 
  - **Target Code**: `System.out.println(""\n== Welcome to ICT Coffee Shop =="");`
  - **Example 1 Code**: `System.out.print(""\n(0-single filer, 1-married jointly or ""`
  - **Analysis**: While both codes use formatted output, the AI-generated code tends to include decorative elements for clarity and user engagement, whereas the human-written code focuses more on functionality.

- **Comparison with Human-written Example 2**: 
  - **Target Code**: `scanner.close();`
  - **Example 2 Code**: `System.exit(1);`
  - **Analysis**: Both lines demonstrate resource management or control flow termination. However, the AI-generated code explicitly manages resources, which is a more subtle and best-practice-oriented approach compared to the abrupt termination in the human-written example.

The similarities in structured approach, clarity, and adherence to best practices between the target code and ChatGPT-generated examples support the classification decision. The target code's systematic handling of input, output, and resource management aligns closely with AI-generated patterns, distinguishing it from the more varied styles observed in human-written examples.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 12, 47, 943000)}"
aniqua@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",ChatGPT,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written primarily due to several characteristics that are commonly found in human-written code but less frequently in AI-generated code. These include the presence of detailed print statements for debugging and tracking the sorting process, the use of a traditional selection sort algorithm with manual string comparison, and a more verbose and explicit coding style. The code also lacks some of the more generic or templated structures that are often generated by AI models like ChatGPT. Additionally, the code's structure, including the methodical approach to sorting and the detailed output formatting, suggests an educational or illustrative purpose, which is often indicative of human authorship.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** `System.out.print(""Pass ""+ (i+1)+"": ["");`
   - **Explanation:** This line demonstrates a human-written pattern as it includes a detailed print statement to track the progress of each pass in the sorting algorithm. AI-generated code often lacks such detailed, human-like commentary, which suggests an educational or debugging intent.

2. **Code Line:** `for(int k =0; k<n;k++) { if( k != n-1) { System.out.print(arr[k]+"",""); } else { System.out.print(arr[k]); } }`
   - **Explanation:** The explicit handling of print formatting, ensuring no trailing comma, indicates a human touch. This attention to detail in output formatting is typical of human-written code, aiming for readability and correctness in displayed results.

3. **Code Line:** `int min_index = i; String minStr = arr[i];`
   - **Explanation:** The declaration and initialization of variables in separate statements, with a clear naming convention (`min_index`, `minStr`), is a common practice among human programmers for clarity and maintainability, contrasting with the more compact style often seen in AI-generated code.

4. **Code Line:** `if(arr[j].compareTo(minStr) > 0) { minStr = arr[j]; min_index = j; }`
   - **Explanation:** The use of `compareTo` for string comparison, along with the logic for finding the maximum string, reflects a human's careful consideration of sorting logic. This manual implementation of a sorting algorithm is less common in AI-generated code, which often uses built-in methods.

5. **Code Line:** `if(min_index != i) { String temp = arr[min_index]; arr[min_index] = arr[i]; arr[i] = temp; }`
   - **Explanation:** The explicit swapping mechanism is indicative of a human programmer's approach to implementing sorting algorithms. AI-generated code might use more abstracted or less verbose methods, whereas this line shows a clear, step-by-step process typical of human-written code.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example Snippet:** 
    ```java
    while (i < list1.length && j < list2.length) {
        if (list1[i] < list2[j]) {
            result[k++] = list1[i++];
        } else {
            result[k++] = list2[j++];
        }
    }
    ```
  - **Target Code Snippet:** 
    ```java
    if(arr[j].compareTo(minStr) > 0) { 
        minStr = arr[j];
        min_index = j;
    }
    ```
  - **Analysis:** The ChatGPT-generated example uses a more compact and efficient merging logic, typical of AI-generated code. In contrast, the target code's manual comparison and index tracking reflect a more educational or illustrative approach, often seen in human-written code.

- **Comparison with Human-written Example 1:**
  - **Example Snippet:** 
    ```java
    for (int i = 1; i < length; i++) {
        int ind = a[i];
        int j = i -1;
        while(j>=0 && a[j] > ind) {
            a[j+1] = a[j];
            j = j-1;
        }
        a[j+1] = ind;
    }
    ```
  - **Target Code Snippet:** 
    ```java
    for(int i = 0; i < n - 1; i++) {
        int min_index = i;
        String minStr = arr[i];
    }
    ```
  - **Analysis:** Both examples feature a detailed, step-by-step sorting process, including variable declarations and manual element swapping. This similarity in approach and level of detail supports the classification of the target code as human-written.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example Snippet:** 
    ```java
    boolean swapped;
    for (int i = 0; i < n - 1; i++) {
        swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                swapped = true;
            }
        }
    }
    ```
  - **Target Code Snippet:** 
    ```java
    if(min_index != i) {
        String temp = arr[min_index];
        arr[min_index] = arr[i];
        arr[i] = temp;
    }
    ```
  - **Analysis:** The AI-generated example uses a common bubble sort pattern with a swapped flag, whereas the target code implements a selection sort with explicit index tracking and comparison. The choice of algorithm and manual implementation details in the target code are indicative of human authorship.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 14, 30, 893000)}"
aniqua@mahidol.ac.th,1_RoomRentCalculator.java,"import java.util.Scanner;

public class RoomRentCalculator {

    public static void main(String[] args) {
        // CODE HERE
        String guestName;
        double roomPricePerNight = 900.50;
        String checkInDate, checkOutDate;

        // Create scanner object to capture user input
        Scanner scanner = new Scanner(System.in);

        // Input guest's name, check-in, and check-out dates
        System.out.print(""Enter guest's name: "");
        guestName = scanner.nextLine();

        System.out.print(""Enter check-in date (yyyy-mm-dd): "");
        checkInDate = scanner.nextLine();

        System.out.print(""Enter check-out date (yyyy-mm-dd): "");
        checkOutDate = scanner.nextLine();

        // Parse the check-in and check-out dates into individual components
        String[] checkInDateParts = checkInDate.split(""-"");
        String[] checkOutDateParts = checkOutDate.split(""-"");

        // Convert to integers for calculations
        int checkInYear = Integer.parseInt(checkInDateParts[0]);
        int checkInMonth = Integer.parseInt(checkInDateParts[1]);
        int checkInDay = Integer.parseInt(checkInDateParts[2]);

        int checkOutYear = Integer.parseInt(checkOutDateParts[0]);
        int checkOutMonth = Integer.parseInt(checkOutDateParts[1]);
        int checkOutDay = Integer.parseInt(checkOutDateParts[2]);

        // Calculate the number of nights stayed using the helper method
        int numberOfNights = calculateDaysBetweenDates(checkInYear, checkInMonth, checkInDay,
                                                       checkOutYear, checkOutMonth, checkOutDay);

        // Calculate the total rent
        double totalRent = roomPricePerNight * numberOfNights;

        // Display the output in the required format
        System.out.println(""\n** No STAR Hotel **"");
        System.out.println(""== Hotel Invoice =="");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Number of Nights: "" + numberOfNights);
        System.out.println(""Total Rent: "" + String.format(""%.2f"", totalRent));

        // Close scanner
        scanner.close();
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,100.0,1.79779853226592E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including its straightforward coding style, extensive use of comments explaining basic operations, and a slightly verbose approach to date manipulation. The code lacks the conciseness and potential use of more advanced date/time libraries that a human programmer might employ.  The structure, including helper methods for simple calculations, resembles common ChatGPT outputs for clearly defined tasks. The comments also tend to be excessively descriptive for simpler operations.  The absence of a package declaration, although not conclusive, might also have contributed to the AI classification. The model has likely been trained on data where human-written code often incorporates package declarations while ChatGPT code doesn't always. The overall impression is that the code has been generated based on explicit instructions rather than crafted by a human.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `// Create scanner object to capture user input`
    - **Explanation**: This comment is overly explanatory for an experienced programmer.  Declaring a `Scanner` object is a standard operation, and such a comment appears redundant, suggesting an AI trying to meticulously explain every step.

- **Key Code Line 2**: `// Parse the check-in and check-out dates into individual components`
    - **Explanation**: Similar to the previous point, this comment describes a rudimentary string manipulation. A human programmer is less likely to add a comment for such a common operation.  ChatGPT frequently over-comments in this manner.

- **Key Code Line 3**: `// Convert to integers for calculations`
    - **Explanation**:  Again, this comment describes a very basic conversion, implying a step-by-step explanation characteristic of ChatGPT.

- **Key Code Line 4**:  `// Helper method to calculate the number of days between two dates`
    - **Explanation**: While helper methods are common, defining one for this specific and relatively simple date calculation might be viewed by the model as characteristic of ChatGPT, which tends to break down problems into very explicit functions even when not strictly necessary.

- **Key Code Line 5**: `// Adjust for leap years` within the `calculateDaysBetweenDates` method.
    - **Explanation**: This comment highlights a specific implementation detail that a human programmer might handle more implicitly or document at a higher level. This granular commenting style is typical of ChatGPT.

**Comparison to Previous Examples**

The target code shares some similarities with the ChatGPT examples and exhibits differences from the human-written examples.

* **Verbose Comments**:  The target code, like the ChatGPT examples, has a higher density of comments explaining basic operations.

    * **Target Code**: `// Create scanner object to capture user input`
    * **ChatGPT Example 1**: `// Get input from user`
    * **Human-written Example 1**: Comments are sparser and focused on less trivial aspects, such as the formula (`//		futureInvestmentValue = investmentAmount * (1 + monthlyInterestRate)^(numberOfYears*12)`).

* **Explicit Helper Methods**: The target code creates a helper method for date calculation, similar to how ChatGPT examples tend to modularize even simple tasks.

    * **Target Code**: `// Helper method to calculate the number of days between two dates` followed by the `calculateDaysBetweenDates` function.
    * **ChatGPT Example 2**:  Uses a loop with explicit inline calculations for loan payments within the main method instead of creating a separate function, but the clear step-by-step structure is similar.
    * **Human-written Example 2**: Directly performs calculations within the loop without a separate helper method, demonstrating a more concise approach.

* **Absence of Package Declaration**: The target code, like the ChatGPT examples, lacks a package declaration.  While not a definitive indicator, this absence aligns more with the ChatGPT examples.

    * **Target Code**: No `package` declaration.
    * **ChatGPT Example 1**: No `package` declaration.
    * **Human-written Example 1**: `package ch_02;`

These similarities to ChatGPT-generated code and differences from the human-written examples, combined with the straightforward and slightly verbose coding style, likely contributed to the model's classification of the target code as ChatGPT-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 18, 53, 242000)}"
aniqua@mahidol.ac.th,5_WordProcessor.java,"package main.java;

public class WordProcessor {
	
	public static void sorting(String arr[],int n)
	{
		
	    for(int i = 0; i < n - 1; i++)
	    {
	    	System.out.print(""Pass ""+ (i+1)+"": ["");
	        for(int k =0; k<n;k++) {
	        	if( k != n-1) {
	        		System.out.print(arr[k]+"","");	        		
	        	} else {
	        		System.out.print(arr[k]);
	        	}
	        }
	        System.out.println(""]"");
	        
	        int min_index = i;
	        String minStr = arr[i];
	        for(int j = i+1; j < n; j++) 
	        {
	            if(arr[j].compareTo(minStr) > 0) 
	            { 
	                minStr = arr[j];
	                min_index = j;
	            }
	        }
	        if(min_index != i)
		    {
		        String temp = arr[min_index];
		        arr[min_index] = arr[i]; 
		        arr[i] = temp; 
		    }
	        
	    }
		
	}
}",Gemini,1.44811380664578E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Verbose commenting and explanations are absent:**  ChatGPT often over-comments or explains simple code. This code lacks such verbose explanations.
* **Specific stylistic choices:** The code uses inline comments sparingly and has specific formatting choices for brackets and spacing that deviate from typical ChatGPT style. 
* **Less common sorting implementation:** The code implements a descending selection sort, which is less common than the optimized sorting algorithms typically generated by ChatGPT.
* **Printing intermediate steps within sorting function:**  The inclusion of print statements to show each pass of the sorting algorithm suggests a focus on debugging or demonstrating the sorting process, something less common in typical ChatGPT-generated code for simple sorting tasks.  ChatGPT might provide a separate print function or just print the final sorted array.
* **Package declaration:** The inclusion of a `package` declaration is more common in human-written projects with a defined structure.

---

**Highlight and Explain Key Code Lines**

* **Key Code Line 1:** `public static void sorting(String arr[],int n)`
    * **Explanation:** This function signature indicates a focus on sorting an array of strings specifically. ChatGPT tends to use more generic types unless prompted otherwise.  Also, the name ""sorting"" isn't as descriptive as ChatGPT generated functions which might be named something like ""performSelectionSort"".
* **Key Code Line 2:** `System.out.print(""Pass ""+ (i+1)+"": ["");`
    * **Explanation:** Printing the pass number during each iteration of the outer loop indicates a developer's intention to trace the sorting algorithm's execution. This debugging/demonstration focus is not typical in concise, optimized code often produced by ChatGPT.
* **Key Code Line 3:** `if(arr[j].compareTo(minStr) > 0)`
    * **Explanation:** Using `compareTo` for string comparison within the sorting logic reinforces the specialization for strings, something less frequently seen in ChatGPT’s generally applicable sorting algorithms. This suggests a human programmer deliberately choosing a string-specific sorting approach.
* **Key Code Line 4:** `if(min_index != i)`
    * **Explanation:** This conditional swap ensures the element is swapped only when a larger string is found. This optimization, while basic, is sometimes omitted in initial drafts of human-written code, whereas ChatGPT often directly inserts optimized algorithms.
* **Key Code Line 5:** `package main.java;`
    * **Explanation:**  Including a package declaration is more typical of human-written Java code organized within a larger project structure.  ChatGPT typically produces stand-alone code snippets without package declarations.

**Comparison to Previous Examples**


* **Verbose commenting (Absence in Target vs. Presence in ChatGPT Examples):** The target code lacks explanatory comments within the `sorting` function, contrasting with the ChatGPT-generated example (Example 1: `0_Exercise07_31.java`), which includes comments like `// swap arr[j] and arr[j+1]`.  The ChatGPT examples generally contain more comments even for relatively simple operations.

    ```java
    // Target Code
    if(min_index != i) {
        String temp = arr[min_index];
        arr[min_index] = arr[i]; 
        arr[i] = temp; 
    }

    // ChatGPT Example (0_Exercise07_31.java)
    if (arr[j] > arr[j+1]) {
        // swap arr[j] and arr[j+1]  <-- Verbose comment
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
        swapped = true;
    } 
    ```

* **Sorting Algorithm Choice (Less common in Target vs. Optimized in ChatGPT examples):**  The target code uses a descending selection sort for strings. The provided ChatGPT examples employ standard sorting algorithms. This aligns with the tendency of ChatGPT to produce well-known, optimized solutions.  A human might choose a less-optimized algorithm for a specific reason or when writing a quick initial implementation.

* **Intermediate Output (Present in Target vs. Absent in ChatGPT Examples and some Human Examples):** The target code prints intermediate steps during the sorting process, as illustrated by the `System.out.print(""Pass ""+ (i+1)+"": ["");` line. This contrasts with both the ChatGPT and human-written examples provided, where the outputs are typically focused on the final result.  The human-written examples (e.g., `1_p02255.java`) use a separate `print` function rather than embedding output within the sorting logic.

    ```java
    // Target Code
    System.out.print(""Pass ""+ (i+1)+"": [""); 

    // Human Example (1_p02255.java)  - prints after each step but in a dedicated function
    print(a);
    System.out.println(); 
    ```



These comparisons, combined with the overall style and structure, contribute to the model's classification of the target code as human-written. The code exhibits characteristics often found in human-written code, especially for educational or debugging purposes, and lacks the hallmarks of typical ChatGPT-generated code.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 20, 21, 902000)}"
aniqua@mahidol.ac.th,4_MUGroceryStore.java,"package evalution;

import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
       System.out.println(""==MUGrocery=="");
       int n = 5;
       double[] itemPrices = new double[n];
       for(int i =0; i< n;i++) {
    	   System.out.print(""Enter price for item "" + (i+1) +"": "");
    	   itemPrices[i] = scanner.nextDouble();
       }
       
       System.out.print(""Item Prices: ["");
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
       System.out.println(""]"");
       
        // Task 2: Calculate and display average price
       double avg =0;
       for(int i=0; i<n;i++) {
    	   avg += itemPrices[i];
       }
       
       avg = avg/n;
       System.out.println(""Average Price: ""+ avg);
       
        // Task 3: Assign and display grades for each item's price
        char[] grades = new char[n];
        char g = 'A';
        for(int i =0; i<n;i++) {
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} else if (itemPrices[i] >=20 && itemPrices[i] <25) {
        		g = 'C';
        	}else if (itemPrices[i] >=25 && itemPrices[i] <30) {
        		g = 'D';
        	}else {
        		g = 'F';
        	}
        	grades[i] = g;
        }
        
        System.out.println(""Grades:"");
        for(int i =0; i<n;i++) {
        	System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);
        }
    }
}",Gemini,1.39840814483705E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the specific formatting and output presentation choices, combined with the relative simplicity of the code's logic and structure. The absence of explicit error handling or more sophisticated data structures, while potentially indicative of a beginner programmer, doesn't necessarily align with the typical patterns observed in current large language models' code generation. The manual formatting of the output, especially the array printing and the detailed grade output for each item, appears less characteristic of automatically generated code which often prioritizes conciseness and consistent formatting.  The use of `String.format(""%.2f"", itemPrices[i])` for explicit formatting control also points towards human intervention. The code also lacks typical ChatGPT hallmarks like overly verbose comments or a rigid adherence to basic programming structures. The task itself is relatively simple and straightforward, possibly resembling student assignment code.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line:** `System.out.print(""Item Prices: ["");`
    - **Explanation:** This line initiates the printing of the `itemPrices` array with a specific format, including the opening square bracket. This customized formatting, while simple, indicates a human's desire for a particular output presentation, a feature less common in LLM-generated code.  LLMs often utilize simpler output methods like `Arrays.toString()`.

2. **Key Code Line:**  `if(i!=4) { System.out.print(itemPrices[i]+"", ""); }else { System.out.print(itemPrices[i]); }`
    - **Explanation:** This code manually handles the comma separation within the array output, a somewhat less efficient but very human approach. LLMs typically opt for loop structures that handle comma insertion more programmatically, avoiding special-case checks like `i!=4`. This direct manipulation of the output formatting suggests human involvement.


3. **Key Code Line:** `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
   - **Explanation:** The detailed output formatting with specific string concatenation and the use of `String.format()` strongly suggests human crafting.  LLMs tend to produce simpler, more uniform output, often leveraging loops and less manual string manipulation.

4. **Key Code Line:**  `avg = avg/n;`
   - **Explanation:** While simple, the direct calculation and reassignment of the average (`avg`) is a common practice among beginner programmers. While LLMs can certainly produce such code, it's more common to see them incorporate the division within the loop calculation itself for conciseness.

5. **Key Code Line:** `char g = 'A';`
    - **Explanation:** The declaration and initialization of a temporary character variable `g` before the loop, while functionally correct, could be considered slightly less efficient than assigning it directly within the conditional blocks. This minor inefficiency is sometimes seen in human-written code, especially by beginners, and is less typical in the optimized output often generated by LLMs.


**Comparison to Previous Examples**:

- **Comparison 1: Array Output**
    - **Target Code:**
    ```java
       for (int i=0; i< n;i++) {
    	   if(i!=4) {
    		   System.out.print(itemPrices[i]+"", "");
    	   }else {
    		   System.out.print(itemPrices[i]);
    	   }
       }
    ```
    - **ChatGPT Example 2 (0_Exercise03_33.java):** Does not involve array printing.  However, it highlights the typical conciseness of ChatGPT output for similar tasks:  `System.out.println(""Package 1 has a better price."");`
    - **Discussion:**  The target code's manual handling of comma-separated array output contrasts with the streamlined output methods typically seen in ChatGPT examples. This manual formatting points towards human authorship.

- **Comparison 2: Conditional Logic**
    - **Target Code:**
    ```java
        	if(itemPrices[i] < 15) {
        		g = 'A';
        	} else if (itemPrices[i] >=15 && itemPrices[i] <20) {
        		g = 'B';
        	} //... and so on
    ```
    - **ChatGPT Example 1 (0_Exercise03_18.java):** Contains similar `if-else if` chains, but for different purposes (calculating shipping cost):
    ```java
        if (weight > 50) { //...
        } else if (weight > 10) { //...
        } // ...and so on
    ```
    - **Discussion:** While both examples use `if-else if` structures, the context differs. The target code's application to grade assignment appears more aligned with a beginner programming exercise, while the ChatGPT example focuses on calculation based on input values. The target code's relative simplicity and lack of comprehensive error handling or complex logic further differentiate it from more advanced LLM-generated code.

- **Comparison 3: Output Formatting**
    - **Target Code:** `System.out.println(""Item "" + (i+1) + ""($"" +String.format(""%.2f"", itemPrices[i]) +""): "" + grades[i]);`
    - **Human-written Example 1 (1_Exercise12_24.java):** Shows usage of `String.format()`, similar to the target code, although in a file writing context:  `.append(String.format(""%.2f"", salary)).append("" "");`
    - **Discussion:**  Both the target code and the human-written example leverage `String.format()` for precise formatting control, a feature often seen in human-written code where presentation matters. This contrasts with ChatGPT's preference for simpler output statements, as seen in the ChatGPT examples.

These comparisons demonstrate how the target code's combination of simple logic, manual formatting choices, and specific output presentation aligns more with human-written beginner code than with the typical output patterns of ChatGPT.  The model likely identified these subtle differences, leading to its classification.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 21, 10, 637000)}"
aniqua@mahidol.ac.th,3_MUTheater.java,"public class MUTheater {

    public static void main(String[] args) {
        final int ROWS = 10;
        final int COLUMNS = 15;

        // Task 1: Display the theater's seating layout
        System.out.println(""== MUTheater Seat Layout =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                System.out.print(""S"" + col + "" "");
            }
            System.out.println();
        }

        // Task 2: Add seat statuses (Available or Reserved)
        System.out.println(""\n== Seat Status (S#=A = Available, S#=R = Reserved) =="");
        for (int row = 1; row <= ROWS; row++) {
            System.out.print(""Row "" + row + "": "");
            for (int col = 1; col <= COLUMNS; col++) {
                // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
                if (col % 2 == 0) {
                    System.out.print(""S"" + col + ""-R "");
                } else {
                    System.out.print(""S"" + col + ""-A "");
                }
            }
            System.out.println();
        }

        // Task 3: Count and display total reserved and available seats
        int reservedSeats = 0;
        int availableSeats = 0;

        for (int row = 1; row <= ROWS; row++) {
            for (int col = 1; col <= COLUMNS; col++) {
                if (col % 2 == 0) {
                    reservedSeats++; // Even seats are reserved
                } else {
                    availableSeats++; // Odd seats are available
                }
            }
        }

        // Display seat counts
        System.out.println(""\n== Seat Counts =="");
        System.out.println(""Total Reserved Seats: "" + reservedSeats);
        System.out.println(""Total Available Seats: "" + availableSeats);
    }
}",Gemini,100.0,1.92249771657771E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its simplistic and straightforward nature, characteristic of code often produced by large language models when given basic prompts.  The code lacks the complexity and nuances typically seen in human-written code for similar tasks.  The repetitive looping structures, basic arithmetic for seat allocation (even/odd), and highly structured output format strongly resemble the output of code generation models following clear instructions. The lack of any error handling, input validation, or more sophisticated seat allocation logic further reinforces this classification.  The comments are also very basic and descriptive, typical of ChatGPT's output. The naming conventions, while correct, are also quite generic.  Overall, the code feels more like a direct translation of a problem statement into code, rather than a human-designed solution.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `// Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)`
    - **Explanation**: This comment is overly explicit and simplistic. Human developers would rarely write such a self-evident comment. ChatGPT often generates these types of comments to explain straightforward logic.  It's as if the model is explaining its own reasoning.

- **Key Code Line 2**: `if (col % 2 == 0) {`
    - **Explanation**:  The use of a simple even/odd check for seat reservation is indicative of a basic, automatically generated solution. Human developers would likely incorporate more complex logic, potentially involving user input or a reservation system.

- **Key Code Line 3**: `System.out.print(""S"" + col + ""-R "");`
    - **Explanation**: The highly structured and repetitive output format is a common characteristic of ChatGPT-generated code. It follows a predictable pattern based on the loop structure.  Humans might opt for more flexible or dynamic output.

- **Key Code Line 4**:  `for (int row = 1; row <= ROWS; row++) {`
    - **Explanation**: While not inherently wrong, the nested loops and their straightforward structure are common in generated code when dealing with 2D arrays or grids.  The lack of any optimization or alternative approaches suggests a basic implementation.

- **Key Code Line 5**: `System.out.println(""\n== Seat Counts =="");`
    - **Explanation**: Similar to the other output lines, this line contributes to the overly structured and repetitive nature of the output.  It reinforces the impression of automatically generated code.


**Comparison to Previous Examples**

- **Comparison 1:  Simplistic Output (Target vs. ChatGPT Example 1)**
    - **Target Code**:
    ```java
    System.out.print(""S"" + col + ""-A "");
    ```
    - **ChatGPT Example 1 (0_Exercise08_11.java)**:
    ```java
    System.out.print(""H ""); // Heads
    ```
    - **Explanation**: Both snippets demonstrate straightforward, predictable output within a loop, typical of ChatGPT's code generation style.  They lack the dynamic or customized formatting a human might employ.

- **Comparison 2:  Basic Logic (Target vs. ChatGPT Example 2)**
    - **Target Code**:
    ```java
    if (col % 2 == 0) {
        reservedSeats++;
    }
    ```
    - **ChatGPT Example 2 (0_Exercise03_24.java)**:
    ```java
    int rankIndex = random.nextInt(13); 
    ```
    - **Explanation**: Both examples show a reliance on simple built-in functions or basic arithmetic (modulo in the target, random number generation in the example). This simplicity is indicative of ChatGPT's tendency to leverage basic operations for problem-solving.

- **Comparison 3:  Structured Loops (Target vs. Human Example 1)**
    - **Target Code**:
    ```java
    for (int row = 1; row <= ROWS; row++) {
        for (int col = 1; col <= COLUMNS; col++) { 
            // ...
        }
    }
    ```
    - **Human Example 1 (1_Exercise06_15.java)**:
    ```java
    for (int i = 50000; i <= 60000; i += 50) {
       // ... more complex inner logic ...
    }
    ```
    - **Explanation**: While both use loops, the target code's nested loops are more basic and predictable compared to the human example. The human example incorporates more complex calculations and logic within its loop structure.


- **Comparison 4: Comments (Target vs. Human Example 2)**
    - **Target Code**:
    ```java
    // Even seats (col % 2 == 0) are reserved (R), odd seats are available (A)
    ```
    - **Human Example 2 (1_Exercise08_09.java)**:
    ```java
    //Add players move to the boxes array and test win condition
    ```
    - **Explanation**: The target code's comment explains a trivial piece of logic.  The human example's comments are more high-level, describing the purpose of a function. This difference reflects how human developers tend to comment on the ""why"" rather than the ""how"".


These comparisons highlight the key differences between human-written and ChatGPT-generated code. The target code's simplistic logic, highly structured output, basic comments, and predictable looping structures align closely with the characteristics observed in the ChatGPT-generated examples, further supporting the model's classification decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 23, 26, 837000)}"
aniqua@mahidol.ac.th,2_CoffeeShopBilling.java,"// CoffeeShopBilling.java
import java.util.Scanner;

public class CoffeeShopBilling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Define Variables
        String customerName, coffeeType;
        int numberOfCups;
        double totalCost = 0, discount = 0, finalCost;

        // Task 4: Receive input from the keyboard
        System.out.print(""Enter customer name: "");
        customerName = scanner.nextLine();

        System.out.print(""Enter coffee type (Espresso/Latte/Cappuccino): "");
        coffeeType = scanner.nextLine();

        System.out.print(""Enter number of cups: "");
        numberOfCups = scanner.nextInt();

        // Task 2: Calculate and Display Total Cost
        // Pricing based on coffee type
        switch (coffeeType.toLowerCase()) {
            case ""espresso"":
                totalCost = 50 * numberOfCups;
                break;
            case ""latte"":
                totalCost = 70 * numberOfCups;
                break;
            case ""cappuccino"":
                totalCost = 60 * numberOfCups;
                break;
            default:
                System.out.println(""Invalid coffee type."");
                return;
        }

        // Task 3: Apply Discounts
        if (numberOfCups > 5) {
            discount = totalCost * 0.10; // 10% discount
        }

        // Calculate the final cost
        finalCost = totalCost - discount;

        // Display the summary
        System.out.println(""\n== Welcome to ICT Coffee Shop =="");
        System.out.println(""** Billing **"");
        System.out.println(""Customer Name: "" + customerName);
        System.out.println(""Coffee Type: "" + coffeeType);
        System.out.println(""Number of Cups: "" + numberOfCups);
        System.out.println(""Total Cost: "" + totalCost + "" Baht"");

        // Display discount and final cost if applicable
        if (discount > 0) {
            System.out.println(""Discount Applied: "" + discount + "" Baht"");
            System.out.println(""Final Cost: "" + finalCost + "" Baht"");
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.71353864431012E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors including its straightforward, linear structure, common coding practices, and lack of complex logic or error handling.  The use of a simple `switch` statement for price calculation and a basic discount application are typical of introductory programming exercises often generated by AI. The code comments, while present, are also very basic and descriptive of immediate actions, a characteristic sometimes observed in ChatGPT output. The overall simplicity and lack of advanced features contribute to the high probability of AI generation. The formatted output with a ""welcome"" message and billing summary also aligns with the style often seen in generated code.  The variable names are descriptive but lack any particular stylistic flair. Lastly, the explicit closing of the scanner, while good practice, is something often emphasized in introductory tutorials and replicated by LLMs.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line**: `// Task 1: Define Variables`
   - **Explanation**:  This style of commenting, breaking down the code into numbered ""Tasks,"" is a common pattern observed in ChatGPT-generated code, particularly for simple programs.  It suggests a structured, step-by-step approach often followed by LLMs when generating code for basic problems.  Human-written code is less likely to have such granular, task-oriented comments.


2. **Key Code Line**: `switch (coffeeType.toLowerCase()) {`
   - **Explanation**: While `switch` statements are used by both humans and AI, in this context, combined with the overall simplicity of the program, it contributes to the impression of AI generation. ChatGPT frequently uses `switch` statements for handling basic menu-like choices, as seen in this example.  The `.toLowerCase()` is also a common practice seen in AI-generated code to make the input case-insensitive, often without prompting.


3. **Key Code Line**: `if (numberOfCups > 5) {`
   - **Explanation**:  The simple discount logic based on a single threshold is a hallmark of introductory programming examples, commonly generated by AI.  Human-written code, especially in a real-world scenario, would likely involve more complex discount structures or tiered pricing.


4. **Key Code Line**: `System.out.println(""\n== Welcome to ICT Coffee Shop =="");`
   - **Explanation**: This type of formatted output, including a ""welcome"" message and stylized billing summary, is more common in AI-generated demonstrations.  While human developers could write similar code, it's less frequent in practical applications, unless specifically required for user interaction in a simple console program.


5. **Key Code Line**: `scanner.close();`
   - **Explanation**: Explicitly closing the `Scanner` is good practice, but frequently appears in ChatGPT's generated code, possibly due to over-representation in training data (introductory tutorials). Experienced human developers often rely on automatic resource management or may omit closing the scanner in simple programs.


**Comparison to Previous Examples**:

* **Target Code vs. ChatGPT Example 1 (LoanCalculator):** Both exhibit simple, linear program structure with basic input/output and calculations.  Both use `Scanner` and formatted output. The loop in the example echoes the step-by-step logic similar to the `switch` statement in the target code.

    ```java
    // Target Code: Switch Statement
    switch (coffeeType.toLowerCase()) {
        case ""espresso"": // ...
    ```

    ```java
    // ChatGPT Example 1: For Loop
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) { // ...
    ```

* **Target Code vs. ChatGPT Example 2 (ShippingCost):** Both feature a chain of `if-else` conditions (albeit in different forms: `switch` in the target code) for handling different input values. This structured approach to simple logic is often found in AI-generated code.

    ```java
    // Target Code: Switch cases
    case ""latte"":
        totalCost = 70 * numberOfCups;
        break;
    ```

    ```java
    // ChatGPT Example 2: If-else chain
    else if (weight > 10) {
        cost = 10.5;
        // ...
    ```

* **Target Code vs. Human-written Example 1 (Exercise08_12):** The human-written example has a more complex structure with arrays and a helper function. The target code lacks this level of sophistication. The human code also uses more concise and less descriptive comments.

    ```java
    // Target Code: Basic variable declaration
    double totalCost = 0, discount = 0, finalCost;
    ```

    ```java
    // Human Example 1: Array declaration
    double[] rates = {0.10, 0.15, 0.25, 0.28, 0.33, 0.35};
    ```


* **Target Code vs. Human-written Example 2 (Exercise06_15):** The human-written example shows more sophisticated output formatting and uses `static final` constants, which are less common in basic AI-generated code.  The target code’s formatting is simpler and more aligned with typical ChatGPT output.

    ```java
    // Target Code: Basic output
    System.out.println(""Total Cost: "" + totalCost + "" Baht"");
    ```

    ```java
    // Human Example 2: Complex Formatting with constants
    static final String space = ""       "";
    System.out.print(spacex2 + Math.round(computeTax(0, i)));
    ```

These comparisons illustrate how the target code shares characteristics with the ChatGPT examples (simplicity, basic logic, structured comments, formatted output), while lacking the complexity and nuanced coding style observed in the human-written examples, ultimately leading to its classification as AI-generated.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 28, 7, 24, 27, 502000)}"
Anonymous,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Use of helper methods:** The code defines helper methods (`calculateDaysBetweenDates`, `isLeapYear`) to break down complex logic into smaller, more manageable units. This is a common practice among human developers for code organization and reusability.
* **Detailed comments:** The code includes comments explaining the purpose of certain code sections and adjustments made for leap years.  ChatGPT-generated code often lacks such detailed explanations.
* **Custom data structures and algorithms:** The code implements a specific algorithm for calculating the number of days between two dates, including handling leap years.  This suggests a human developer's thought process and problem-solving approach.
* **Object-oriented programming (OOP) principles:** The code utilizes a class structure with instance variables, getters, setters, and a `toString()` method, showcasing OOP principles.  ChatGPT sometimes generates simpler, less structured code.
* **String manipulation and date parsing:** The code involves splitting strings and parsing date components, which demonstrates human-like data handling.

---

**Highlight and Explain Key Code Lines**

1. **`int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`**: This line calls a custom helper function to calculate the number of days between two dates.  This indicates human-like code organization and abstraction.

2. **`int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};`**:  This line defines an array to store the number of days in each month. While simple, it’s part of the custom algorithm and demonstrates human-like data representation.

3. **`if (isLeapYear(startYear)) { daysInMonth[1] = 29; // February has 29 days in a leap year }`**: This code snippet explicitly handles leap years, a detail often missed in simpler AI-generated code. The inline comment further reinforces human authorship.

4. **`totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month`**: This line, combined with the subsequent loop,  demonstrates a step-by-step calculation approach characteristic of human-written code. The comment clarifies the intention.

5. **`return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);`**: This concisely implements the leap year check. It showcases a level of code optimization that is more common in human-written code.


**Comparison to Previous Examples**

* **Helper Methods:** The target code's use of helper methods (`calculateDaysBetweenDates`, `isLeapYear`) contrasts with the simpler, monolithic structure of ChatGPT-generated examples. The provided ChatGPT examples (e.g.,  `0_Exercise02_21.java`, `0_Exercise05_21.java`) perform all calculations within the `main` method.  The human-written examples (e.g. `1_Exercise08_12.java`) demonstrate the use of a helper function (`calcTax`).

    * **Target Code:**
    ```java
    int night = calculateDaysBetweenDates(...);
    ```

    * **Human-written Example (1_Exercise08_12.java):**
    ```java
    System.out.printf(""Tax is $%.2f"", calcTax(income, brackets[status], rates));
    ```

    * **ChatGPT-generated Example (0_Exercise05_21.java):**
    ```java
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
    double totalPayment = monthlyPayment * numberOfYears * 12;
    ```


* **Comments:** The target code's detailed comments, explaining specific logic like leap year adjustments, are absent in the ChatGPT examples. The human-written example `1_Exercise05_21.java` includes comments explaining the purpose of specific code sections.

    * **Target Code:**
    ```java
    if (isLeapYear(startYear)) {
        daysInMonth[1] = 29; // February has 29 days in a leap year
    }
    ```

    * **ChatGPT-generated Example (0_Exercise02_21.java):**
    ```java
    double monthlyInterestRate = annualInterestRate / 1200.0; // 12 months in a year, 100 to convert percentage to decimal
    ```

* **OOP Principles:** The target code employs a class structure with getters, setters, and a `toString` method, which aligns more closely with the human-written examples and contrasts with the more procedural style often observed in ChatGPT-generated code. Although both human-written examples utilize a class structure, the target code shows more sophisticated OOP usage compared to the relatively simple implementation in the ChatGPT examples.

In summary, the combination of helper methods, detailed comments, custom algorithms, string manipulation, and application of OOP principles present in the target code aligns more with the patterns found in human-written code and diverges from the simpler, less structured approach often seen in code generated by ChatGPT.  This likely influenced the model's classification.",2025-03-31 05:28:39.882000,
Anonymous,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Package Declaration:** The presence of `package test;` suggests a human developer organizing code within a project structure.  ChatGPT-generated code rarely includes package declarations.
* **Class Structure and Instance Variables:**  The use of a class with private instance variables (`guest_name`, `price`, `check_in`, `check_out`), getters, setters, and a `toString()` method indicates a focus on object-oriented principles, which is more common in human-written code.
* **Helper Methods:** The inclusion of helper methods like `calculateDaysBetweenDates` and `isLeapYear` demonstrates modularity and code organization, characteristic of human developers.
* **Date Handling:**  The specific logic for date manipulation, including handling leap years and calculating days between dates, suggests a human developer's detailed approach. ChatGPT tends to simplify or avoid such complexities.
* **Comments and Formatting:** While minimal, the presence of comments and clear indentation also contributes to the human-written classification, although this is not a strong indicator on its own.

---

**Highlight and Explain Key Code Lines**

1. **`private String guest_name;`**:  Declaring private instance variables is a common practice among human developers for encapsulation and data hiding.  ChatGPT-generated code often uses simpler structures and less frequently incorporates such object-oriented principles.

2. **`public String toString() { ... }`**:  Overriding the `toString()` method is a standard practice for providing a string representation of an object, a concept commonly understood and implemented by human developers.

3. **`int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`**: Calling a separate helper function for date calculation suggests modular code design, which is a characteristic of human-written code.

4. **`public static int calculateDaysBetweenDates(...) { ... }`**: The detailed implementation of date difference calculation, including handling leap years and different months/years, points to a human developer's thought process and understanding of date manipulation complexities.

5. **`return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);`**:  This concise and correct leap year check indicates human knowledge of the leap year rule, something ChatGPT might not always accurately represent.

**Comparison to Previous Examples**

* **Package Declaration:** The target code uses `package test;`.  This is absent in both ChatGPT examples (Example 1 and Example 2).  Human-written Example 1 uses `package ch_05;` and Example 2 uses `package ch_08;`, demonstrating similar organization.

    ```java
    // Target Code
    package test;

    // Human-written Example 1
    package ch_05;
    ```

* **Class Structure:**  The target code defines a class with instance variables and methods like `toString()`, `getGuest_name()`, `setGuest_name()`, etc. ChatGPT examples typically have a simpler structure, primarily focused on the `main` method, like Example 1:

    ```java
    // Target Code (snippet)
    public class RoomRentCalculator {
    	private String guest_name;
    	// ... other variables and methods ...
    	public String toString() { ... }
    }

    // ChatGPT Example 1 (snippet)
    public class FutureInvestmentValue {
        public static void main(String[] args) { ... }
    }
    ```

* **Helper Methods:** The target code includes helper functions like `calculateDaysBetweenDates` and `isLeapYear`. This aligns with the modular approach seen in Human-written Example 2, which uses `calcTax`:

    ```java
    // Target Code
    public static int calculateDaysBetweenDates(...) { ... }

    // Human-written Example 2
    static double calcTax(double income, int[] bracket, double[] rates) { ... } 
    ```

    ChatGPT examples generally lack such helper methods.

* **Date Handling:** The target code’s detailed date handling is more akin to the logic a human would implement.  ChatGPT examples, like Example 2, involve calculations but lack the specific date manipulation complexity:

    ```java
    // Target Code (snippet)
    int totalDays = 0;
    // ... leap year and date calculation logic ...

    // ChatGPT Example 2 (snippet)
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
    ```

These comparisons reinforce the model's classification. The target code exhibits characteristics more aligned with human-written examples, especially in terms of code organization, object-oriented principles, and the detailed handling of complex logic like date calculations. These features differ significantly from the simpler, more direct style often observed in ChatGPT-generated code.",2025-03-31 06:09:01.918000,
petch_muict@gmail.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as **Human-written** is likely influenced by several key factors. Firstly, the code demonstrates a clear and structured approach to problem-solving, evident in the use of helper methods like `calculateDaysBetweenDates` and `isLeapYear`, which show a modular and organized coding style. The use of detailed comments and straightforward variable naming conventions suggest a focus on readability and maintainability, typical of human-written code. Additionally, the way the code handles date calculations, including leap year adjustments, reflects a nuanced understanding of domain-specific logic, which is often characteristic of human developers. These elements collectively contribute to the model's classification decision.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:**
  ```java
  private final double price = 900.5;
  ```
  - **Explanation:** The use of `final` for the `price` variable indicates an understanding of constants in Java, which is a common practice among human programmers to prevent accidental changes to important values.

- **Key Code Line 2:**
  ```java
  public String toString() {
      String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
      str += ""Guest Name: "" + guest_name +
              ""\nCheck-in Date: "" + check_in +
              ""\nCheck-out Date: "" + check_out;
      return str;
  }
  ```
  - **Explanation:** This `toString` method demonstrates a custom implementation for object representation, showing a personalized touch and attention to detail, which are often indicative of human authorship.

- **Key Code Line 3:**
  ```java
  int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
  ```
  - **Explanation:** The use of a dedicated method to calculate days between dates reflects a modular design approach, emphasizing code reuse and separation of concerns, traits commonly found in human-written code.

- **Key Code Line 4:**
  ```java
  public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {
  ```
  - **Explanation:** This method signature indicates a comprehensive and detailed approach to date calculations, including parameters for each component of the date, suggesting a thorough understanding of the problem domain.

- **Key Code Line 5:**
  ```java
  if (isLeapYear(startYear)) {
      daysInMonth[1] = 29; // February has 29 days in a leap year
  }
  ```
  - **Explanation:** The leap year check and adjustment for February days show a sophisticated handling of edge cases, which is a hallmark of experienced human programmers who anticipate and handle potential anomalies.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **ChatGPT Code Snippet:**
    ```java
    double monthlyInterestRate = annualInterestRate / 1200.0;
    ```
  - **Target Code Snippet:**
    ```java
    int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
    ```
  - **Analysis:** The ChatGPT example uses straightforward arithmetic without encapsulation, whereas the target code employs a separate method for calculation, demonstrating a preference for modularity and abstraction typical of human-written code.

- **Comparison with Human-written Example 1:**
  - **Human Code Snippet:**
    ```java
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numYears * 12));
    ```
  - **Target Code Snippet:**
    ```java
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {
    ```
  - **Analysis:** Both snippets show a detailed breakdown of complex calculations, with the human-written example handling financial calculations and the target code focusing on date differences, showcasing a similar level of complexity and domain-specific knowledge.

- **Comparison with ChatGPT-generated Example 2:**
  - **ChatGPT Code Snippet:**
    ```java
    System.out.printf(""%-15s%-15s%-15s\n"", ""Interest Rate"", ""Monthly Payment"", ""Total Payment"");
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    ```
  - **Analysis:** While both examples use formatted output, the target code's use of `String.format` in a concatenated string suggests a more nuanced and flexible approach to string manipulation, indicative of human-written code.

- **Comparison with Human-written Example 2:**
  - **Human Code Snippet:**
    ```java
    System.out.printf(""Tax is $%.2f"", calcTax(income, brackets[status], rates));
    ```
  - **Target Code Snippet:**
    ```java
    System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    ```
  - **Analysis:** Both snippets demonstrate an understanding of formatted output for financial figures, reinforcing the human-written classification through consistent attention to detail and precision.

Overall, the target source code's structured approach, attention to edge cases, and modular design align closely with patterns observed in human-written examples, supporting the classification as human-written.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 3, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 24, 9, 724000)}"
petch_muict@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model determined the target source code to be 100% ChatGPT-generated due to several key features and patterns that align with AI-generated content. These include the formal and descriptive method documentation, straightforward and clear code logic, specific implementation choices such as using `TreeMap` for removing duplicates, and the overall structure and organization of the code. The presence of such features, which are often seen in AI-generated code, contributed to the model's classification decision.

---

**Highlight and Explain Key Code Lines**

1. **Method Documentation:**
   ```java
   /**
    * This method will accept a file name as a parameter, read the textual content in a given file, 
    * and return these words in a list of strings. 
    */
   ```
   - **Explanation:** The detailed and formal style of comments is a common characteristic of ChatGPT-generated code. AI models often produce thorough documentation to enhance code readability, which is not always seen in human-written code.

2. **Use of `TreeMap` for Removing Duplicates:**
   ```java
   TreeMap<String, Boolean> map = new TreeMap<>();
   ```
   - **Explanation:** The choice of using a `TreeMap` to remove duplicates while maintaining order is a distinct pattern. This approach reflects a structured and methodical decision-making process typical of AI-generated code, which prioritizes clarity and simplicity.

3. **Insertion Sort Implementation:**
   ```java
   while (j >= 0 && a.get(j).compareTo(current) < 0) {
   ```
   - **Explanation:** The implementation of insertion sort in descending order is a straightforward, textbook-like solution. This kind of clear and correct algorithm implementation is often found in AI-generated code, which tends to follow standard practices closely.

4. **Printing After Each Sort Pass:**
   ```java
   System.out.println(""Pass "" + i + "": "" + a);
   ```
   - **Explanation:** The decision to print the list after each pass is a didactic feature, commonly used in AI-generated code to illustrate algorithm progress and provide transparency.

5. **Array Conversion and Printing:**
   ```java
   System.out.println(Arrays.toString(words.toArray()));
   ```
   - **Explanation:** The conversion of a list to an array for printing purposes is another pattern that reflects the thoroughness and attention to detail characteristic of AI-generated code.

**Comparison to Previous Examples**

- **Example 1 (ChatGPT-generated):**
  - **Code Snippet:**
    ```java
    Collections.sort(words);
    ```
  - **Comparison:** Similar to the target code's use of `TreeMap` for ordering, this example uses `Collections.sort`, a straightforward method for sorting, showcasing a preference for simplicity and clarity in AI-generated code.

- **Example 2 (ChatGPT-generated):**
  - **Code Snippet:**
    ```java
    for (String word : words) {
        String key = word.toLowerCase();
        if (key.length() > 0) {
            if (!map.containsKey(key)) {
                map.put(key, 1);
            } else {
                int value = map.get(key);
                value++;
                map.put(key, value);
            }
        }
    }
    ```
  - **Comparison:** The use of maps for counting occurrences and handling data structures reflects a methodical and structured approach, similar to the target code's use of `TreeMap`.

- **Example 1 (Human-written):**
  - **Code Snippet:**
    ```java
    if (!isIncreasingOrder(lastStr, nextStr)) {
        System.out.println(""The strings are not in increasing order..."");
    }
    ```
  - **Comparison:** The human-written example uses more informal and context-specific logic and messaging, contrasting with the more formal and standard approach of the target and AI-generated examples.

- **Example 2 (Human-written):**
  - **Code Snippet:**
    ```java
    String[] words = text.split(""[ \n\t\r.,;:!?(){]"");
    ```
  - **Comparison:** This example shows a more nuanced and varied approach to text processing, indicative of human intuition and experience, unlike the straightforward and consistent patterns in AI-generated code.

The similarities in structure, methodical logic, and detailed documentation between the target code and ChatGPT-generated examples support the classification decision. The differences in informal logic and varied approaches in human-written examples further reinforce the model's conclusion.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 37, 12, 40000)}"
petch_muict@gmail.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model predicts the target source code as ChatGPT-generated with 100% probability due to several key features and patterns that are commonly associated with AI-generated code. These include highly structured and methodical code organization, extensive use of comments that explain each step, and a tendency to use clear and consistent variable naming conventions. Additionally, the logical flow and problem-solving approach resemble the systematic style often seen in AI-generated outputs. The use of specific constructs, such as loops and conditional statements, follows a pattern that is typical in ChatGPT-generated code, emphasizing clarity and simplicity.

---

**Highlight and Explain Key Code Lines**

1. **Line: `double[] itemPrices = new double[5];`**
   - **Explanation**: This line demonstrates a straightforward and clear initialization of an array, which is a common pattern in AI-generated code. ChatGPT often uses simple, explicit initializations to enhance readability and to avoid errors that might arise from more complex initializations.

2. **Line: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`**
   - **Explanation**: The use of `Arrays.toString` to print array contents is a typical ChatGPT pattern, showing a preference for built-in utility methods to simplify tasks. This reflects an AI-generated approach by leveraging existing library functions for common tasks.

3. **Line: `double averagePrice = totalPrice / itemPrices.length;`**
   - **Explanation**: The calculation of the average price using a direct and simple formula is indicative of AI-generated code. The straightforward mathematical operation without additional complexity aligns with the AI's tendency to solve problems in a clear and concise manner.

4. **Line: `char grade = 'F'; // Default grade`**
   - **Explanation**: Initializing variables with default values, especially in a context where conditions may change them later, is a common pattern in AI-generated code. This approach ensures that all paths in the code have a valid state, reducing the risk of uninitialized variables.

5. **Line: `scanner.close();`**
   - **Explanation**: The explicit closing of resources like the `Scanner` object demonstrates a thoroughness often seen in ChatGPT-generated code. This practice highlights the AI's attention to resource management and adherence to best practices, even if not strictly necessary in all contexts.

**Comparison to Previous Examples**

- **Comparison to ChatGPT-generated Example 1:**
  - **Example Snippet**: 
    ```java
    System.out.printf(""%-5d\t%.2f\n"", i, value);
    ```
  - **Target Snippet**: 
    ```java
    System.out.printf(""Average Price: %.2f\n"", averagePrice);
    ```
  - **Analysis**: Both snippets use `System.out.printf` for formatted output, a pattern frequently used by ChatGPT for precise formatting. This indicates a preference for structured output, reinforcing the AI-generated classification.

- **Comparison to ChatGPT-generated Example 2:**
  - **Example Snippet**: 
    ```java
    int[] scores = new int[numStudents];
    ```
  - **Target Snippet**: 
    ```java
    double[] itemPrices = new double[5];
    ```
  - **Analysis**: Both examples initialize arrays with explicit sizes, a typical approach in AI-generated code, emphasizing clarity and explicitness in array handling.

- **Comparison to Human-written Example 1:**
  - **Example Snippet**: 
    ```java
    if (weight > 50) {
        System.out.println(""The package cannot be shipped."");
    }
    ```
  - **Target Snippet**: 
    ```java
    if (itemPrices[i] < 15) {
        grade = 'A';
    }
    ```
  - **Analysis**: The human-written example uses conditional statements for decision-making, similar to the target code. However, the AI-generated code tends to have more structured and predictable conditional patterns, as seen in the grading logic.

- **Comparison to Human-written Example 2:**
  - **Example Snippet**: 
    ```java
    double total = 0;
    ```
  - **Target Snippet**: 
    ```java
    double totalPrice = 0;
    ```
  - **Analysis**: Both snippets initialize variables to zero, a common practice. However, the AI-generated code often uses more descriptive variable names like `totalPrice`, enhancing readability and clarity.

These comparisons highlight the structured and methodical nature of the target source code, aligning closely with AI-generated patterns and supporting the model's classification decision. The systematic approach to problem-solving and code organization in the target code is consistent with the characteristics of ChatGPT-generated examples, reinforcing the classification outcome.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 35, 21, 949000)}"
petch_muict@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model predicted the target source code as human-written based on several indicators. The code structure and style, such as the use of straightforward loops, descriptive print statements, and a lack of complex or over-engineered solutions, suggest human authorship. The presence of clear variable names and a simple, direct approach to solving the problem are indicative of human-written code. Additionally, the code lacks the typical verbosity and comprehensive error handling often seen in AI-generated samples. These characteristics align with patterns found in the human-written examples, leading to a confident classification as human-written.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** `int[][] seat = new int[10][15];`
   - **Explanation:** The straightforward declaration of a 2D array with fixed dimensions is typical in human-written code where the problem constraints are clearly understood. This lacks the flexibility often seen in AI-generated code that might use dynamic structures unnecessarily.

2. **Code Line:** `System.out.println(""==MUTheater Seat Layout==""+""\n"");`
   - **Explanation:** The use of a simple print statement with a clear, descriptive message is characteristic of human authorship. AI-generated code often includes more complex string manipulations or formatted outputs.

3. **Code Line:** `for(int i = 0;i<seat.length;i++) {`
   - **Explanation:** The use of a basic for-loop for iterating over an array is a common pattern in human-written code. This straightforward approach is often replaced by more complex iterations or functional programming constructs in AI-generated code.

4. **Code Line:** `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }`
   - **Explanation:** The logic of alternating seat availability based on an index is simple and intuitive, reflecting a human's problem-solving approach. AI-generated code might employ more convoluted logic to achieve the same result.

5. **Code Line:** `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`
   - **Explanation:** The direct use of print statements for outputting results is a hallmark of human-written code. AI-generated code often includes additional formatting or error-checking that isn't necessary for this straightforward task.

**Comparison to Previous Examples**

- **Comparison 1:** Target Code: `int[][] seat = new int[10][15];`  
  **Example 1 (Human):** `int n = Integer.parseInt(sc.next());`
  - Both lines demonstrate direct and simple variable declarations. The target code's fixed array size mirrors the human-written example's straightforward integer parsing, indicating a clear understanding of problem constraints.

- **Comparison 2:** Target Code: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`  
  **Example 1 (Human):** `System.out.println(count);`
  - Both examples use simple print statements to convey information, suggesting a human preference for clarity over complex formatting.

- **Comparison 3:** Target Code: `for(int i = 0;i<seat.length;i++) {`  
  **Example 2 (Human):** `for(int i=0;i<m;i++) {`
  - The use of basic for-loops for iteration is consistent with human-written examples, emphasizing straightforward logic and simplicity.

- **Comparison 4:** Target Code: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }`  
  **Example 2 (Human):** `if(total>0) { count++; }`
  - Both lines demonstrate simple conditional logic, a common trait in human-written code where the solution is direct and intuitive.

- **Comparison 5:** Target Code: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`  
  **Example 2 (Human):** `System.out.println(count);`
  - The direct output of variables using print statements is a pattern seen in both human-written examples and the target code, reinforcing the classification of the target code as human-written.

The similarities in straightforward logic, variable usage, and output handling between the target source code and human-written examples support the model's classification decision. The lack of unnecessary complexity and the presence of clear, direct solutions are indicative of human authorship.","{'ratings': {'overall': 2, 'conciseness': 4, 'clarity': 4, 'actionability': 2, 'selected_line_useful': 2, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 32, 45, 365000)}"
petch_muict@gmail.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",ChatGPT,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a 100% probability due to several distinct features. The code shows characteristics of human-written code, such as explicit variable naming, structured control flow, and a straightforward approach to problem-solving. The use of clear and descriptive variable names, such as `Customer_Name`, `Coffee`, and `Number`, reflects human tendencies to prioritize readability and meaningful context in code. Furthermore, the control flow using `if-else` statements and the handling of input/output operations are typical of human-written code. The presence of a straightforward calculation and discount application logic, without overly complex constructs or unnecessary abstractions, also suggests a human origin. 

---

**Highlight and Explain Key Code Lines**

- **Code Line 1: `static String Customer_Name;`**

  - **Explanation**: The use of descriptive variable names is a hallmark of human-written code. Humans often prioritize readability and clarity, choosing variable names that convey the purpose or content of the variable. This contrasts with AI-generated code, which may use more generic or less descriptive names.

- **Code Line 2: `if(Coffee.equals(""Espresso"")){ Price = 50; }`**

  - **Explanation**: The use of a simple `if-else` structure with specific string comparisons is indicative of human-written code. Humans tend to use straightforward logic to handle conditions, especially when dealing with a fixed set of known inputs, such as coffee types.

- **Code Line 3: `System.out.println(""== Welcome to ICT Coffee Shop =="");`**

  - **Explanation**: The inclusion of personalized or welcoming messages suggests a human touch, as humans often add such details to improve user interaction and experience. This type of detail is less common in AI-generated code, which may focus more on functionality than user experience.

- **Code Line 4: `Total_Price = Price * Number;`**

  - **Explanation**: The direct calculation of the total price using basic arithmetic without additional abstraction or complexity is typical of human-written code. Humans often write straightforward code for simple calculations, reflecting their problem-solving approach.

- **Code Line 5: `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`**

  - **Explanation**: This line demonstrates a simple discount application logic, which is a practical and common approach taken by humans. The straightforward use of a conditional statement to apply a discount is indicative of human-written code, focusing on solving the immediate problem efficiently.

**Comparison to Previous Examples**

- **Variable Naming**: In the target code, variables like `Customer_Name` and `Coffee` are descriptive, similar to the human-written Example 1, which uses `name`, `hours`, and `payRate`. In contrast, AI-generated examples often use more generic names, focusing less on readability (e.g., `loanAmount` in Example 1 of ChatGPT-generated samples).

  - **Example Comparison**:
    - Human-written Example 1: `String name = in.next();`
    - Target Code: `static String Customer_Name;`

- **Control Flow**: The target code uses simple `if-else` statements, similar to the human-written Example 1, which also employs straightforward control structures. AI-generated examples may use similar constructs but often lack the nuanced handling seen in human-written code.

  - **Example Comparison**:
    - Human-written Example 1: `if(Coffee.equals(""Espresso"")){ Price = 50; }`
    - Target Code: `if(Coffee.equals(""Espresso"")){ Price = 50; }`

- **User Interaction**: The target code includes user-friendly messages, akin to the human-written Example 1, which provides detailed prompts and outputs for user interaction. AI-generated code may include basic prompts but often lacks the personalized touch seen in human-written code.

  - **Example Comparison**:
    - Human-written Example 1: `System.out.print(""Enter employee's name:"");`
    - Target Code: `System.out.println(""== Welcome to ICT Coffee Shop =="");`

- **Calculation Logic**: The target code's straightforward calculation of total price and discount is similar to the human-written Example 2's calculation of payments. AI-generated examples often perform calculations but may include unnecessary complexity or lack clear logic.

  - **Example Comparison**:
    - Human-written Example 2: `double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numYears * 12));`
    - Target Code: `Total_Price = Price * Number;`

- **Discount Application**: The discount logic in the target code is simple and efficient, reflecting human-written patterns. This is similar to the straightforward logic seen in human-written examples, focusing on solving the problem directly.

  - **Example Comparison**:
    - Human-written Example 2: `double federalTax = grossPay * federalTaxRate;`
    - Target Code: `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`

These comparisons highlight how the target source code aligns more closely with human-written examples, supporting the model's classification decision. The clarity, readability, and simplicity in the target code are key indicators of human authorship.","{'ratings': {'overall': 4, 'conciseness': 5, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 5}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 29, 58, 533000)}"
petch_muict@gmail.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including:

* **Object-oriented design:** The code utilizes a class structure with private fields, getters, setters, and a `toString()` method. This suggests a more deliberate design approach than typically seen in simpler ChatGPT-generated code.
* **Date manipulation:** The code includes a complex `calculateDaysBetweenDates` method, along with a helper function `isLeapYear`.  This demonstrates a higher level of logic and algorithm implementation.
* **String parsing and type conversion:** The code splits strings, parses integers, and formats doubles, showcasing varied data manipulation techniques.
* **Code comments:** The inclusion of comments, especially for the helper methods, indicates a focus on readability and maintainability.
* **Package declaration:** The presence of a `package` declaration is more common in organized human-written projects.
* **Code Style:** Consistent indentation and formatting point towards a human's deliberate effort to organize the code.


---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `private String guest_name;`
    - **Explanation:**  Declaring private instance variables and using getters/setters (as seen later in the code) is characteristic of object-oriented programming principles that human developers often follow.  ChatGPT sometimes generates classes, but often with less emphasis on encapsulation.

2. **Key Code Line:** `String[] in_date = n.getCheck_in().split(""-"");`
    - **Explanation:** This line demonstrates string manipulation and data extraction. ChatGPT tends to favor simpler input methods, while this suggests a more human approach to handling date input in a specific format.

3. **Key Code Line:** `int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`
    - **Explanation:** Calling a custom helper function for a non-trivial calculation (date difference) is a sign of modularity and code organization, which is a more common practice amongst human developers.

4. **Key Code Line:** `// Helper method to calculate the number of days between two dates`
    - **Explanation:**  The presence of comments, particularly explaining the purpose of a helper function, strongly suggests human-written code. ChatGPT rarely includes comments unless specifically prompted.

5. **Key Code Line:**  `return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);` (from `isLeapYear`)
    - **Explanation:** Implementing the leap year logic accurately indicates a good grasp of programming concepts and attention to detail, often a human characteristic.


**Comparison to Previous Examples**

* **Object-Oriented Structure:** Unlike the ChatGPT-generated examples, the target code uses a class structure with private fields and methods.  This contrasts sharply with the straightforward procedural style in the ChatGPT examples, like Example 1 (shown below), which directly performs calculations within the `main` method.

    **Target Code:**
    ```java
    private String guest_name;
    // ... other private fields ...

    public String getGuest_name() {
        return guest_name;
    }
    ```

    **ChatGPT Example 1 (0_Exercise02_21.java):**
    ```java
    public static void main(String[] args) {
        // ... all calculations directly within main ...
    }
    ```


* **Complex Logic:** The date calculation logic in the target code significantly differs from the relatively simpler calculations in the ChatGPT examples (like Example 2 below). The presence of helper functions like `isLeapYear` also strengthens the human-written classification.

    **Target Code:**
    ```java
    int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
    // ... calculateDaysBetweenDates and isLeapYear methods ...
    ```

    **ChatGPT Example 2 (0_Exercise05_21.java):**
    ```java
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
    double totalPayment = monthlyPayment * numberOfYears * 12;
    ```


* **Code Organization:**  While the human-written examples (like Example 1 below) also demonstrate good code structure with package declarations and comments, the target code's date manipulation logic sets it apart from simpler examples like calculating loan payments. This complexity further reinforces the model's decision.

    **Target Code:**
    ```java
    package test;
    // ... complex date calculation logic ...
    ```

    **Human-Written Example 1 (1_Exercise05_21.java):**
    ```java
    package ch_05;
    // ... loan calculation logic ...
    ```

In summary, the target code exhibits several characteristics that align more with human-written code than ChatGPT-generated code, especially regarding object-oriented design, code complexity, and the presence of comments. These features, combined with the comparison to the provided examples, explain the model's strong confidence in classifying the code as human-written.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 47, 8, 239000)}"
petch_muict@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",Gemini,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target source code as ChatGPT-generated due to several factors including its straightforward, textbook-like implementation of algorithms (Insertion Sort, duplicate removal), extensive commenting explaining basic concepts, and a structured, somewhat generic coding style often observed in generated code.  The use of `ArrayList` along with `TreeMap` for duplicate removal, while functional,  hints at a lack of optimization that a human programmer might consider. The inclusion of print statements within the sorting algorithm for demonstration purposes further strengthens this hypothesis, as it resembles code designed for educational or illustrative scenarios, a common use case for ChatGPT.  The relatively simple nature of the file processing also contributes to the classification, suggesting a solution generated for a basic programming exercise.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `public static ArrayList<String> readFile(String file) throws FileNotFoundException {`
    - **Explanation:** This line demonstrates a very basic file reading approach using `Scanner`. While functional, it's not the most efficient or robust method preferred by experienced programmers, who might opt for `BufferedReader` for better performance, especially with larger files. This basic approach is commonly seen in generated code.

- **Key Code Line 2:**  `System.out.println(Arrays.toString(words.toArray()));`
    - **Explanation:** Converting an `ArrayList` to an array just for printing using `Arrays.toString()` is a slightly less common practice. A more direct approach like using a loop or `String.join` might be preferred by human programmers.  This suggests generated code attempting a quick solution.

- **Key Code Line 3:** `// Insertion Sort in descending order (b comes before a)`
    - **Explanation:**  While comments are good practice, this comment explains a very basic concept related to sorting order.  Such overly explanatory comments on trivial aspects are often a hallmark of ChatGPT-generated code aimed at beginners.

- **Key Code Line 4:**  `System.out.println(""Pass "" + i + "": "" + a);` (inside the sort function)
    - **Explanation:** Printing the list after each pass of Insertion Sort is typically done for educational or demonstration purposes. This aligns with the observation that the code resembles example code for learning, a common output of ChatGPT.

- **Key Code Line 5:**  `// Use a TreeSet to remove duplicates while maintaining the order` (followed by using a `TreeMap`)
    - **Explanation:** This comment is misleading. The code uses a `TreeMap`, not a `TreeSet`. While both can remove duplicates, the comment initially suggesting `TreeSet` then using `TreeMap` is indicative of automated code generation that might not fully grasp the nuances or may have been edited/patched after initial generation.


**Comparison to Previous Examples**

- **Comment Style:** The target code uses very explanatory comments for basic operations, similar to the ChatGPT-generated Example 1 (0_WordDisplay.java).
    - **Target Code:** `// Insertion Sort in descending order (b comes before a)`
    - **Example 1 (0_WordDisplay.java):**  While this example doesn't have the same level of detailed basic explanations, its comments are generally descriptive of fairly straightforward operations (`// Error reading file`, `// Read each line from the file`).  This frequent, simple commenting style is often a characteristic of generated code.

- **Simple File Processing:** The target code's file reading mechanism (`Scanner`) is simpler than the human-written Example 1 (1_Exercise12_21.java) which uses `BufferedReader`.
    - **Target Code:**  `Scanner in = new Scanner(new File(file));`
    - **Example 1 (1_Exercise12_21.java):**  `try (BufferedReader bufferedReader = new BufferedReader(new FileReader(""src\\ch_12\\exercise12_21\\SortedStrings.txt""))) {`
    This simpler approach is similar to ChatGPT Example 1 (0_WordDisplay.java) which also employs `Scanner`.
    - **Example 1 (0_WordDisplay.java):** `try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {` (Though it uses `BufferedReader` in this instance)

- **ArrayList Usage:** The prominent use of `ArrayList` is shared with both ChatGPT-generated examples (0_WordDisplay.java and 0_Exercise21_07.java).  
    - **Target Code:** `ArrayList<String> words = new ArrayList<String>();`
    - **Example 1 (0_WordDisplay.java):** `ArrayList<String> words = new ArrayList<>();`
    - **Example 2 (0_Exercise21_07.java):** `List<WordOccurrence> list = new ArrayList<>();`
    Human-written code sometimes favors other list implementations like `LinkedList` where appropriate.

- **Duplicate Removal Technique:** The target code's use of `TreeMap` for duplicate removal, while functional, is slightly less efficient than a `HashSet` and is reminiscent of the somewhat verbose coding style often observed in generated code.
    - **Target Code:** `TreeMap<String, Boolean> map = new TreeMap<>();`
    - **Human Examples:**  Neither human-written example deals explicitly with duplicate removal in the provided snippets, making a direct comparison difficult. However, they show a more concise and idiomatic coding style in their respective tasks.

- **Educational Style:** The printing of intermediate steps in the `sort` function aligns with the teaching/demonstration style often seen in generated code. The ChatGPT example (0_Exercise21_07.java) also shares this tendency by printing the final word counts, which is characteristic of example or exercise code.
    - **Target Code:** `System.out.println(""Pass "" + i + "": "" + a);`
    - **Example 2 (0_Exercise21_07.java):**  `System.out.println(wo.getWord() + "" "" + wo.getCount());`


These similarities to the provided ChatGPT-generated examples, combined with the somewhat naive implementations and educational style, strongly contribute to the model's classification of the target code as AI-generated.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 58, 47, 347000)}"
petch_muict@gmail.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors including its straightforward, linear structure, common coding practices typical of introductory programming exercises, explicit comments explaining basic operations, and a formulaic approach to problem-solving. The use of `Arrays.toString()` for array output, while functional, is also a common practice seen in generated code.  The grading logic, while potentially useful, is implemented in a simplistic manner that aligns with ChatGPT's tendency to prioritize functionality over elegance.  The explicit prompt-driven style (""Enter price for item..."") is indicative of code designed for interactive console input, a frequent characteristic of ChatGPT outputs.  The code lacks the nuances and potential complexities one might expect in human-written code.  The program adheres to a very basic structure: input, process, output, without any significant deviation or advanced techniques.  Overall, the code's simplicity, directness, and adherence to basic programming principles suggest an AI-generated origin.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line:** `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`
    - **Explanation:** This comment is excessively descriptive for an experienced programmer.  ChatGPT often adds such comments to ensure clarity, even for simple declarations.  Humans would likely assume the purpose is clear from the code itself.

2. **Key Code Line:** `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
    - **Explanation:**  While perfectly functional, the use of `Arrays.toString()` for outputting array contents is a frequent occurrence in ChatGPT-generated code, possibly stemming from its training data. Human-written code might use a more customized loop for displaying array elements.

3. **Key Code Line:**  `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
    - **Explanation:** Again, an overly explanatory comment for a simple calculation. This reflects ChatGPT's tendency to over-comment, a characteristic often observed in its generated code.

4. **Key Code Line:** `char grade = 'F'; // Default grade`
    - **Explanation:** Explicitly setting a default grade, while correct, can sometimes be a sign of ChatGPT's methodical approach. Experienced programmers might handle this directly within the conditional logic.

5. **Key Code Line:** `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`
    - **Explanation:** This line, while functional, is a very straightforward way of formatting output.  A human might consider more sophisticated formatting or presentation, especially if the output is intended for a user-facing application.


**Comparison to Previous Examples**:

1. **Target Code:** `// Input prices for the items`
   **ChatGPT Example 1:** `// Prompt the user to enter the initial amount, annual percentage yield, and number of months`
   **Explanation:**  Both the target code and the ChatGPT example demonstrate the use of comments to explain relatively self-evident code sections. This aligns with ChatGPT's tendency to over-comment, especially when generating code for educational or illustrative purposes, as seen in many introductory programming exercises.

2. **Target Code:** `double totalPrice = 0;`
   **ChatGPT Example 2:** `int best = scores[0];`
   **Explanation:**  Both snippets involve initializing variables before a loop. This is a fundamental programming concept frequently employed by both ChatGPT and human programmers. The simplicity of the initialization further supports the ChatGPT-generated classification of the target code.

3. **Target Code:** `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
   **Human Example 1:**  Doesn't directly compare, but the Human Example uses a more conditional approach and a less direct printing method.
   **Explanation:** The target code's use of `Arrays.toString()` contrasts with the more nuanced approach often seen in human-written code. While efficient, this direct printing method is characteristic of ChatGPT's focus on achieving immediate functionality. The human examples tend to demonstrate more customized output handling.

4. **Target Code:** `// Display the entered prices`
   **ChatGPT Example 2:** `// Assign grades based on the scheme`
   **Explanation:** Both the target code and the ChatGPT example use comments to explicitly describe the purpose of code blocks. This verbose commenting style is more prevalent in ChatGPT-generated code, often serving as a way to reinforce the logic for learners or users unfamiliar with the code's intent.

5. **Target Code:** `scanner.close();`
    **Human Example 2:**  `input.close();`
    **Explanation:** Both snippets demonstrate closing the scanner, a good practice followed by both humans and ChatGPT.  However, the overall simplicity of the surrounding code in the target snippet lends further credence to the AI-generated classification.


The similarities between the target code and the ChatGPT examples in terms of commenting style, basic variable initialization, and direct output methods, combined with the lack of more nuanced logic seen in the human examples, collectively reinforce the model's classification of the target code as ChatGPT-generated.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 56, 24, 629000)}"
petch_muict@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",Gemini,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:  The code lacks the characteristic verbose comments and overly explicit explanations often seen in ChatGPT-generated code. The variable naming (e.g., `TotalAvailableSeat`, `TotalReservedSeat`) is concise and practical, unlike the sometimes overly descriptive naming used by LLMs. The code structure, while simple, reflects a specific purpose (theater seat layout) rather than a generic exercise or problem often found in LLM training data.  The use of a 2D array and nested loops, along with conditional logic based on even/odd seat numbers, suggests a more deliberate design than typically seen in automatically generated code for basic problems. The absence of complex library imports and the focus on core Java features also contribute to the human-written assessment. The code's simplicity, combined with its specific purpose, makes it less likely to resemble the more general examples found in LLM training datasets.  The coding style, while not perfect, exhibits a human-like approach to problem-solving.

---

**Highlight and Explain Key Code Lines**

1. **`int[][] seat = new int[10][15];`**:  This line declares a 2D array to represent the theater seating. This is a common practice in human-written code for managing grid-like structures, and less frequent in basic ChatGPT examples where simpler data structures might be used.

2. **`System.out.print(""Row ""+(i+1)+"": "");`**:  This line displays the row number.  It indicates a human touch, aiming to provide clear output for the user, a detail often overlooked by LLMs focusing primarily on core functionality.

3. **`if(j%2==0) { ... } else { ... }`**: This conditional logic assigns alternating seat types (""-A"" and ""-R""). It suggests a specific design decision based on the problem context (theater seats) and is less typical of general code examples that LLMs might generate.

4. **`TotalAvailableSeat++;`**: This increment operation reflects a direct and efficient way to keep track of seat availability. LLMs sometimes use more verbose or less optimal approaches for such tasks.

5. **`System.out.println(""Total Available Seats: ""+TotalAvailableSeat);`**:  Similar to point 2, this line demonstrates a focus on user-friendly output, displaying clearly labeled results – a human characteristic.

**Comparison to Previous Examples**

* **Verbose Comments (Absence in Target, Presence in ChatGPT Examples):**  The target code lacks explanatory comments.  ChatGPT examples often include excessive or unnecessary comments.  For instance, Example 1 (ChatGPT) has comments like `// Prompt the user to enter a number between 0 and 511`. The target code, being relatively straightforward, doesn't require such detailed explanations, reflecting a human approach.

   ```java
   // ChatGPT Example 1 (0_Exercise08_11.java)
   // Prompt the user to enter a number between 0 and 511
   System.out.print(""Enter a number between 0 and 511: "");

   // Target Source Code
   System.out.print(""Row ""+(i+1)+"": "");
   ```

* **Variable Naming (Concise in Target, Descriptive in ChatGPT Examples):**  The target code uses concise names like `seat`, `i`, `j`. ChatGPT examples tend to use more descriptive names.  For example, in Example 1 (ChatGPT), `binaryString` clearly describes the variable's purpose.

   ```java
   // ChatGPT Example 1 (0_Exercise08_11.java)
   String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');

   // Target Source Code
   int[][] seat = new int[10][15];
   ```

* **Problem Specificity (Specific in Target, General in ChatGPT Examples):** The target code focuses on a specific problem (theater seating).  ChatGPT examples often address more general programming exercises. Example 2 (ChatGPT) calculates word counts from a file, a common programming task. The target code's specific purpose makes it less likely to be generated by an LLM trained on general examples.

   ```java
   // ChatGPT Example 1 (0_Exercise21_08.java - Excerpt)
   Map<String, Integer> wordCounts = new HashMap<>();

   // Target Source Code
   int[][] seat = new int[10][15];
   ```

* **Code Structure (Simple and Purposeful in Target, Sometimes Generic in ChatGPT Examples):**  The target code has a simple structure aligned with its purpose. Some ChatGPT examples exhibit more complex structures or follow a more formulaic approach, perhaps influenced by coding conventions emphasized in training data.  Example 2 (Human-written) shows a somewhat more complex input handling process, potentially closer to how a human might organize code for slightly more complicated input.

   ```java
   // Human-written Example 2 (1_p03102.java - Excerpt)
   int n = Integer.parseInt(sc.next());
   int m = Integer.parseInt(sc.next());
   int c = Integer.parseInt(sc.next());

   // Target Source Code
   int TotalAvailableSeat = 0;
   int TotalReservedSeat = 0;
   ```



These comparisons highlight the key differences that likely led the model to classify the target code as human-written. Its simplicity, specificity, and lack of typical LLM characteristics make it stand out from the ChatGPT-generated examples. It shares some similarities with the human-written examples in terms of conciseness and focus on the problem at hand.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 54, 7, 340000)}"
petch_muict@gmail.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as Human-written due to several factors including the use of static variables, somewhat unconventional naming conventions (e.g., `Customer_Name`, `Total_Price`), a simple conditional structure for pricing, string formatting for output, and a discount calculation applied directly within the main method.  These features are less common in the streamlined, function-oriented style often seen in ChatGPT-generated code. The lack of package declaration in the ChatGPT examples further differentiates them from the target code's ""evaluation"" package. The direct manipulation of the `Total_Price` variable after outputting an initial total also points toward a human approach, where iterative development and output might lead to such a flow. The relatively simple structure and the absence of more sophisticated programming practices likely influenced the model's prediction, aligning more closely with the characteristics of the human-written samples provided.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `static String Customer_Name;`
   - **Explanation:**  The use of `static` variables, especially for seemingly local variables like `Customer_Name`, is a stylistic choice less common in ChatGPT-generated code. ChatGPT tends to favor instance variables or local variables within methods. The use of `static` here suggests a human programmer perhaps learning or experimenting with variable scope.

2. **Key Code Line:** `if(Coffee.equals(""Espresso"")){`
   - **Explanation:** The simple `if-else if` structure for setting the price based on the coffee type is quite basic. While ChatGPT can generate such structures, it often opts for more generalized approaches, such as using `switch` statements or maps for handling multiple options. This simplicity may have contributed to the human-written classification.

3. **Key Code Line:**  `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`
   - **Explanation:**  The direct concatenation of strings and the use of `String.format` within a `println` statement is a stylistic choice more indicative of human-written code.  ChatGPT often generates more structured output formatting using formatted strings directly.

4. **Key Code Line:** `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`
   - **Explanation:** The discount logic being applied directly within the main method and after already having printed an initial total suggests a more human, iterative approach to coding. ChatGPT typically produces more streamlined and optimized solutions.

5. **Key Code Line:** `package evaluation;`
   - **Explanation:**  The presence of a package declaration is a stylistic element often found in human-written Java code, particularly in organized projects. This contrasts with the provided ChatGPT examples, which lack package declarations, making the target code resemble the human-written samples more closely.


**Comparison to Previous Examples**

* **Target Code:** `static String Customer_Name;`
* **Human-written Example 1:** `package ch_04;`
    - Both the target code and the human-written example demonstrate organizational or structural elements at the beginning of the file (package declaration in the example and static variables in the target code). This differs from the ChatGPT examples that tend to be more focused on the immediate functionality within the main method.

* **Target Code:** `if(Coffee.equals(""Espresso"")){ ... }else if(Coffee.equals(""Latte"")) { ... }`
* **ChatGPT Example 1:** `for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) { ... }`
    -  The target code utilizes a simple `if-else if` chain for handling different coffee types, while the ChatGPT example uses a more systematic `for` loop for iterating through interest rates. This aligns with the observation that ChatGPT tends towards more algorithmic and iterative approaches.

* **Target Code:** `System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");`
* **Human-written Example 2:** `System.out.printf(""Monthly Payment: %.2f"", monthlyPayment);`
    -  Both target code and human-written example use string formatting for output. Although they use slightly different methods (`println` with concatenation and `printf`), the underlying concept aligns with the human-written style. The ChatGPT examples also use formatting, but their structure and context differ slightly, often being integrated into a more planned output scheme.

* **Target Code:** `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`
* **ChatGPT Example 2:**  `double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);`
    - The target code applies the discount logic directly within the main method after already displaying a pre-discount total. This contrasts with the more streamlined calculation in the ChatGPT example, where the final value is calculated before output. This difference supports the model's classification of the target code as human-written due to its seemingly less optimized structure.


The cumulative effect of these stylistic choices and structural elements in the target code, when compared to the provided examples, supports the model's classification of it as Human-written.  The target code demonstrates characteristics that align more closely with the provided human-written examples than the ChatGPT-generated examples, especially in terms of simplicity, structure, and the approach to problem-solving.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 3, 31, 6, 49, 34, 617000)}"
Anonymous,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",Gemini,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Simplicity and straightforwardness:** The code solves a simple problem (displaying a seating layout) in a direct manner without unnecessary complexity. This contrasts with ChatGPT's tendency to sometimes over-engineer or use more generic approaches.
* **Specific formatting choices:** The code has particular formatting details (like ""S""+(j+1)+"""") that appear less common in generated code.
* **Lack of common ChatGPT patterns:** The code avoids common ChatGPT patterns, such as excessive use of comments, highly modularized structures for simple tasks, or reliance on complex library functions. The focus on basic arrays and loops points towards a human approach.
* **Conciseness:** The code is relatively concise and achieves its purpose without unnecessary code bloat, a trait often seen in human-written code for simple tasks.  ChatGPT often includes extra functionalities or explanations.

---

**Highlight and Explain Key Code Lines**

1. **`int[][] seat = new int[10][15];`**:  This line declares a 2D array with fixed dimensions. While ChatGPT can certainly create arrays, it often uses more dynamic sizing or list structures, especially when the context doesn't explicitly define the dimensions. The direct use of a fixed-size 2D array suggests a human programmer who has a clear, predetermined layout in mind.

2. **`System.out.print(""S""+(j+1)+"""");`**: This line represents a specific formatting choice. The concatenation of ""S"" with the seat number is a simple yet particular way of displaying seat labels. ChatGPT is less likely to generate such specific formatting details unless explicitly instructed.

3. **`if(j%2==0)`**: This use of the modulo operator to alternate between available and reserved seats suggests a human-designed pattern. While ChatGPT might achieve a similar result, it might opt for a slightly different approach, potentially involving separate counters or boolean flags.

4.  **`System.out.print(""-A "");` and  `System.out.print(""-R "");`**: Similar to point 2, these lines exemplify distinct formatting choices that point towards human-written code. They represent simple and direct label assignments likely conceived by a human.

5. **`TotalAvailableSeat++;` and `TotalReservedSeat++;`**: These lines showcase the use of simple counters, a characteristic often observed in human-written code for basic counting tasks. ChatGPT might employ more complex data structures or methods even for such simple operations.


**Comparison to Previous Examples**

* **Comparison with ChatGPT-Generated Example 1 (0_Exercise21_08.java):** The ChatGPT-generated example uses several import statements, `HashMap`, and a more complex approach for word counting.  The target source code, in contrast, uses only basic arrays and loops.  This difference in complexity and library usage aligns with the classification.
    ```java
    // ChatGPT Example 1 (Snippet)
    import java.io.File;
    import java.io.FileNotFoundException;
    // ... other imports
    Map<String, Integer> wordCounts = new HashMap<>();
    ```

    ```java
    // Target Source Code (Snippet)
    int[][] seat = new int[10][15];
    int TotalAvailableSeat = 0;
    ```

* **Comparison with ChatGPT-Generated Example 2 (0_Exercise08_11.java):** The ChatGPT example uses `Scanner` for user input and string manipulation to represent the heads and tails pattern. The target code doesn't require user input and directly generates the output based on a fixed pattern.  This directness is more typical of human-written code for this specific type of task.
    ```java
    // ChatGPT Example 2 (Snippet)
    Scanner input = new Scanner(System.in);
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```

    ```java
    // Target Source Code (Snippet)
    for(int i = 0;i<seat.length;i++) {
        for(int j = 0;j<seat[i].length;j++) {
             // direct output generation
        }
    }
    ```

* **Comparison with Human-Written Example 1 (1_p03644.java) and Example 2 (1_p03102.java):** While the human-written examples are more complex than the target code, they share the common characteristic of directly using basic language constructs (loops, arrays, conditional statements) without resorting to complex libraries or excessive modularization. This aligns with the classification of the target code as human-written.
    ```java
    // Human Example 1 (Snippet - similar use of loops and basic operations)
    for(int i=1;i<=n;i++){
        int temp=i;
        int count=0;
        while(true){
            // ...
        }
    }
    ```

    ```java
    // Target Source Code (Snippet - similar use of loops)
    for(int i = 0;i<seat.length;i++) {
			for(int j = 0;j<seat[i].length;j++) {
                // ...
            }
	}
    ```

The combination of simplicity, specific formatting, lack of common ChatGPT patterns, and alignment with characteristics observed in the human-written examples contributes to the model's high confidence in classifying the target code as human-written.",2025-04-02 09:02:50.761000,
Anonymous,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including:

* **Use of static variables:**  Declaring variables like `Customer_Name`, `Coffee`, `Number`, and `Price` as static suggests a beginner programmer's approach, which is more common in educational settings where human-written code is prevalent.
* **Simple control flow:** The code uses straightforward `if-else if` statements for price determination, which is less characteristic of optimized code generation often seen in AI models.
* **Formatting inconsistencies:** The spacing and formatting, such as the placement of curly braces and the inconsistent use of blank lines, suggest a human touch rather than the more consistent formatting typically produced by AI.
* **String formatting with `String.format(""%.0f"", Total_Price)`:** While not conclusive, this specific way of formatting to remove decimal places can be more characteristic of certain human coding styles.
* **Lack of robust input validation:** The code doesn't handle potential errors, such as non-numeric input for `Number`, which is something a more advanced programmer or AI model might address.

---

**Highlight and Explain Key Code Lines**

1. **`static String Customer_Name;`**:  Declaring static variables at the class level, especially for simple data like customer names and coffee types, is more typical of novice human-written code than AI-generated code.  AI models tend to favor localized variable declarations within methods.

2. **`if(Coffee.equals(""Espresso"")) { ... }else if(Coffee.equals(""Latte"")) { ... }`**: This simple, sequential `if-else if` structure for handling a limited set of coffee types indicates a basic, possibly human-written approach.  AI might use a more efficient data structure like a `Map` for this purpose.

3. **`System.out.println(""** Billing **\n"" + ""Customer Name: "" + Customer_Name + ... );`**: The string concatenation within the `println` statement, combined with the specific formatting choices (e.g., ""\n"" and ""** Billing **""), points towards human styling preferences.

4. **`System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`**:  This line illustrates a potentially human-specific coding style. Combining string concatenation with `String.format` for a single output suggests a human might have iteratively built the output string, rather than constructing it in a more optimized way.

5. **`if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`**: This simple discount application, calculated directly within the `if` statement, appears more like human logic.  AI models might encapsulate such calculations in a separate function for better modularity and reusability.

**Comparison to Previous Examples**

* **Static variables vs. local variables:** The target code uses static variables, similar to the ChatGPT examples (e.g., `Scanner input = new Scanner(System.in);` in Example 1). However, the ChatGPT examples typically limit static variables to essential objects like the `Scanner`. The target code's broader use of static variables aligns more with beginner-level human code, even though the examples themselves are AI-generated.

    * **Target Code:** `static String Customer_Name;`
    * **ChatGPT Example 1:** `Scanner input = new Scanner(System.in);` (declared inside `main`)

* **Simple control flow vs. more complex structures:**  The target code's simple `if-else if` structure resembles the ChatGPT example's use of a `for` loop for iterating through interest rates (Example 1). Both demonstrate relatively basic control flow compared to the human-written examples. However, the target code's simplicity combined with other factors contributes to its human-written classification.

    * **Target Code:** `if(Coffee.equals(""Espresso"")){ ... }`
    * **ChatGPT Example 1:** `for (double annualInterestRate = 5.0; ...)`

* **Formatting inconsistencies vs. consistent formatting:**  The target code's inconsistent formatting contrasts with the ChatGPT examples' more regular structure. The human-written examples (e.g., Example 1) exhibit more variability in formatting, closer to the target code.

    * **Target Code:** Inconsistent spacing around operators and curly braces.
    * **ChatGPT Example 1:** Consistent indentation and spacing.
    * **Human-written Example 1:** More variable formatting, with some inconsistencies.

* **String formatting:** The target code's specific use of `String.format(""%.0f"", Total_Price)` isn't directly comparable to any of the provided examples. This might have been interpreted as a slightly unusual, potentially human-specific choice by the model.

* **Input validation:** The lack of input validation in the target code is somewhat similar to the ChatGPT examples, which also lack robust error handling.  However, this alone is not a strong indicator of human-written code.  The human-written example (Example 1) *does* have some level of implicit input validation because the Scanner methods used will throw exceptions if given the incorrect data types.",2025-04-02 09:11:54.566000,
wud@gmail.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with 100% probability. The classification is likely influenced by several factors: the organization of the code, the use of helper methods, the detailed handling of edge cases (such as leap years), and the overall structure and style of the code. The code's logical flow, the inclusion of comments, and the use of descriptive method and variable names also contribute to the perception of human authorship. These elements suggest a thoughtful design and consideration typical of experienced programmers.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `public class RoomRentCalculator {`**
   - **Explanation**: The class is well-structured and follows a clear naming convention, indicating a human's intent to create a meaningful and descriptive class. The class encapsulates related functionalities, which is a common practice in human-written code to promote modularity and reusability.

2. **Code Line: `private String guest_name;`**
   - **Explanation**: The use of private fields with getters and setters suggests an understanding of encapsulation, a fundamental object-oriented programming principle more commonly emphasized in human-written code.

3. **Code Line: `int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`**
   - **Explanation**: The creation and use of a helper method (`calculateDaysBetweenDates`) to handle date calculations demonstrates an abstraction level typical of human programmers. It shows a separation of concerns and a focus on code readability and maintainability.

4. **Code Line: `public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {`**
   - **Explanation**: This method handles a complex task with multiple conditions, such as leap year adjustments, which indicates a depth of understanding and attention to detail that are characteristic of human-written code.

5. **Code Line: `if (isLeapYear(startYear)) { daysInMonth[1] = 29; }`**
   - **Explanation**: The explicit handling of leap years within the date calculation logic demonstrates foresight and consideration of edge cases, which are often overlooked in AI-generated code but are crucial in human-written code for robustness.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  ```java
  // ChatGPT-generated
  double monthlyInterestRate = annualInterestRate / 1200.0;
  double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);
  ```
  - **Target Code Excerpt:**
  ```java
  int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
  ```
  - **Analysis**: The ChatGPT-generated code often uses straightforward calculations and lacks the depth of abstraction seen in the target code. The target code's use of a helper method for date calculations reflects a more complex and human-like approach to problem-solving.

- **Comparison with Human-written Example 1:**
  ```java
  // Human-written
  double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numYears * 12));
  ```
  - **Target Code Excerpt:**
  ```java
  double total = night * n.getPrice();
  ```
  - **Analysis**: Both the human-written example and the target code show a similar level of complexity and attention to detail. The use of mathematical operations and the consideration of various factors (e.g., number of nights, price) indicate a thoughtful approach typical of human authorship.

- **Comparison with ChatGPT-generated Example 2:**
  ```java
  // ChatGPT-generated
  System.out.printf(""%-15.3f%-15.2f%-15.2f\n"", annualInterestRate, monthlyPayment, totalPayment);
  ```
  - **Target Code Excerpt:**
  ```java
  System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
  ```
  - **Analysis**: The ChatGPT-generated example focuses on formatted output but lacks the integration of complex logic seen in the target code. The target code's use of formatted strings for output is similar, but its integration with complex logic (e.g., date calculations) shows a more comprehensive understanding and planning, typical of human authorship.

These comparisons highlight that the target source code's complexity, attention to detail, and structured approach align more closely with the patterns seen in human-written examples, supporting the model's classification decision.","{'ratings': {'overall': 3, 'conciseness': 4, 'clarity': 5, 'actionability': 2, 'selected_line_useful': 3, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 9, 48, 10, 370000)}"
wud@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The classification model has determined that the target source code is 100% likely to be ChatGPT-generated. This conclusion is likely based on several key features and patterns commonly associated with AI-generated code. These include the presence of verbose comments explaining straightforward code, a structured and modular approach with clearly defined methods for distinct tasks, and the use of modern Java constructs such as `ArrayList` and `TreeMap`. Additionally, the code contains stylistic patterns like consistent formatting, detailed method comments, and a tendency to use specific data structures for operations like duplicate removal, which are often seen in AI-generated code.

---

**Highlight and Explain Key Code Lines**

1. **Method Commenting:**
   ```java
   /**
    * This method will accept a file name as a parameter, read the textual content in a given file, 
    * and return these words in a list of strings. 
    */
   ```
   - **Explanation:** AI-generated code often includes detailed comments for methods, even when the method's purpose is straightforward. This verbosity in documentation is characteristic of ChatGPT's style, aiming to provide clarity and context for each function.

2. **Use of `TreeMap` for Duplicate Removal:**
   ```java
   TreeMap<String, Boolean> map = new TreeMap<>();
   ```
   - **Explanation:** The choice of using a `TreeMap` to remove duplicates is unconventional for human-written code, where a `HashSet` or `LinkedHashSet` might be more typical. This indicates an AI-generated pattern, as AI models may choose data structures based on their properties without considering typical human preferences.

3. **Insertion Sort with Detailed Printing:**
   ```java
   System.out.println(""Pass "" + i + "": "" + a);
   ```
   - **Explanation:** The detailed printing of each pass in the sorting algorithm shows a tendency to include comprehensive output for debugging or educational purposes, which is common in AI-generated code to ensure transparency and understanding of the process.

4. **Method for Printing Words:**
   ```java
   public static void printWords(ArrayList<String> words) {
     System.out.println(Arrays.toString(words.toArray()));
   }
   ```
   - **Explanation:** This method is straightforward and has a specific utility, which reflects the modular and task-oriented approach often seen in ChatGPT-generated code. The use of `Arrays.toString()` for printing is also a common pattern in AI-generated examples.

5. **Verbose Method Naming:**
   ```java
   public static void removeDuplicate(ArrayList<String> a) {
   ```
   - **Explanation:** The method name `removeDuplicate` clearly describes its function, aligning with the AI's tendency to use descriptive and explicit naming conventions for clarity.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Target Code:**
    ```java
    public static void printWords(ArrayList<String> words) {
      System.out.println(Arrays.toString(words.toArray()));
    }
    ```
  - **Example 1 Code:**
    ```java
    Collections.sort(words);
    for (String word : words) {
      System.out.println(word);
    }
    ```
  - **Analysis:** Both snippets exhibit a straightforward and modular approach to tasks, with clear method definitions and usage of Java utility classes (`Arrays`, `Collections`). This structured and task-oriented approach is a hallmark of AI-generated code.

- **Comparison with Human-written Example 1:**
  - **Target Code:**
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```
  - **Example 1 Code:**
    ```java
    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(""src\\ch_12\\exercise12_21\\SortedStrings.txt""))) {
    ```
  - **Analysis:** The human-written example uses a more typical Java pattern for file reading with `BufferedReader`, while the AI-generated code opts for a `TreeMap` for duplicate removal, which is less conventional but demonstrates AI's tendency to use data structures based on their properties rather than human familiarity.

- **Comparison with ChatGPT-generated Example 2:**
  - **Target Code:**
    ```java
    System.out.println(""Pass "" + i + "": "" + a);
    ```
  - **Example 2 Code:**
    ```java
    System.out.println(wo.getWord() + "" "" + wo.getCount());
    ```
  - **Analysis:** Both snippets show detailed output statements that provide insight into the program's operations, a feature often included in AI-generated code to enhance understanding and debugging.

These comparisons highlight the structured, verbose, and methodically documented nature of the target code, aligning with patterns observed in ChatGPT-generated examples and differing from the more concise and conventional approaches often found in human-written code.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 9, 55, 45, 750000)}"
wud@gmail.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model predicts the target source code as ChatGPT-generated with a 100% probability due to several key features and patterns that are characteristic of AI-generated code. These include a highly structured and organized approach to problem-solving, the use of common coding patterns, and a clear, verbose commenting style. The code demonstrates a methodical breakdown of tasks, such as input handling, calculation, and output, which is typical in AI-generated code. The consistent use of descriptive variable names and the presence of a logical, step-by-step process for completing tasks also contribute to this classification. Furthermore, the code includes comments that clearly describe each section's purpose, aligning with how AI models are trained to generate code with human-like clarity and precision.

---

**Highlight and Explain Key Code Lines**

1. **Line: `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`**
   - **Explanation**: This line demonstrates a clear and explicit comment explaining the purpose of the array, which is a common pattern in AI-generated code. AI models often include comments to enhance code readability and explain the logic behind specific implementations.

2. **Line: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`**
   - **Explanation**: The use of `Arrays.toString()` for printing array contents is a typical AI-generated pattern, as it efficiently handles array output in a human-readable format. This method is frequently suggested by AI models due to its simplicity and effectiveness.

3. **Line: `double averagePrice = totalPrice / itemPrices.length; // Compute the average`**
   - **Explanation**: This line features a concise calculation with a comment that explains the operation, reflecting the AI's tendency to include brief comments for clarity. The straightforward arithmetic operation and its accompanying comment are indicative of AI-generated code.

4. **Line: `char grade = 'F'; // Default grade`**
   - **Explanation**: Initializing variables with default values and providing comments is a pattern often found in AI-generated code. It ensures that the code is robust by handling edge cases and is clearly documented for understanding.

5. **Line: `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`**
   - **Explanation**: The use of `System.out.printf` for formatted output is prevalent in AI-generated code, as it allows for precise control over the output format. This line combines formatted output with a logical structure, showcasing the AI's ability to generate polished and professional-looking code.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Target Code**: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
  - **Example Code**: `System.out.println(""Month\tCD Value"");`
  - **Analysis**: Both lines use `System.out.println` to display information, with the target code using `Arrays.toString()` for array output. This methodical approach to outputting data is a common AI-generated pattern, as seen in the example.

- **Comparison with ChatGPT-generated Example 2**:
  - **Target Code**: `char grade = 'F'; // Default grade`
  - **Example Code**: `char grade;`
  - **Analysis**: The target code initializes the variable with a default value, whereas the example code does not. The explicit initialization and accompanying comment in the target code enhance clarity and robustness, aligning with AI-generated characteristics.

- **Comparison with Human-written Example 1**:
  - **Target Code**: `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
  - **Example Code**: `double weight = in.nextDouble();`
  - **Analysis**: The target code includes a comment explaining the calculation, whereas the human-written example does not. The presence of comments in the target code reflects AI's tendency to generate code with explanatory comments for clarity.

- **Comparison with Human-written Example 2**:
  - **Target Code**: `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`
  - **Example Code**: `System.out.println(""After the "" + numberOfMonths + ""th month, "" + ""the account value is "" + total);`
  - **Analysis**: Both lines handle formatted output, but the target code uses `System.out.printf`, which provides more precise formatting control. This preference for formatted output is a trait often found in AI-generated code, highlighting its emphasis on producing professional-quality output.

These comparisons illustrate how the target source code's features align with ChatGPT-generated patterns, supporting the classification decision. The structured approach, detailed comments, and use of efficient methods are key indicators of AI-generated code.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 3, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 9, 53, 52, 401000)}"
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a 100% probability. This classification is likely due to several key features and patterns typical of human-written code. These include the straightforward logic and lack of overly generalized or verbose constructs, which are more common in AI-generated code. The code demonstrates a clear, concise style with a focus on solving a specific problem without unnecessary complexity. Additionally, the use of simple loops, direct variable naming, and a clear structure all contribute to the perception of the code as human-written. The code's logic is straightforward, indicating a clear understanding of the problem it aims to solve, which is often indicative of human authorship.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** `int[][] seat = new int[10][15];`
   - **Explanation:** This line initializes a 2D array with fixed dimensions, which is a straightforward approach to representing a seating layout. Human-written code often uses fixed dimensions for specific tasks, reflecting a direct understanding of the problem requirements.

2. **Code Line:** `for(int i = 0;i<seat.length;i++) {`
   - **Explanation:** The use of a standard for-loop to iterate over the array is indicative of human-written code. It shows a clear understanding of how to traverse data structures, a common pattern in manually written code.

3. **Code Line:** `System.out.print(""Row ""+(i+1)+"": "");`
   - **Explanation:** This line demonstrates a simple way to output formatted text. The use of string concatenation for output is a typical human approach, focusing on readability and simplicity.

4. **Code Line:** `if(j%2==0) {`
   - **Explanation:** The condition checks for even indices to determine seat availability. This straightforward logic is characteristic of human problem-solving, where simple conditions are used to achieve the desired outcome.

5. **Code Line:** `System.out.println(""== Seat Counts==""+""\n"");`
   - **Explanation:** The use of formatted output to separate sections of the program's output is a common human coding practice. It improves the readability of the output, reflecting attention to the user experience.

**Comparison to Previous Examples**

When comparing the target source code to the examples, several features highlight the differences and similarities that support the classification decision.

- **Target Code:** `int[][] seat = new int[10][15];`
  - **Human Example 1:** `int n=Integer.parseInt(nyuA);`
  - **Comparison:** Both lines demonstrate a straightforward approach to variable initialization and input handling. The human example uses input parsing, while the target code initializes a data structure, both showing a clear and direct approach to problem-solving.

- **Target Code:** `for(int i = 0;i<seat.length;i++) {`
  - **Human Example 2:** `for(int i=0;i<m;i++) {`
  - **Comparison:** Both use standard for-loops, a common pattern in human-written code. This indicates a direct and efficient way to iterate over elements, highlighting a shared human coding style.

- **Target Code:** `System.out.print(""Row ""+(i+1)+"": "");`
  - **ChatGPT Example 1:** `System.out.println(""Usage: java WordCounter filename"");`
  - **Comparison:** While both use print statements, the target code focuses on formatting output for readability, a trait often emphasized by human authors, whereas AI-generated code might include more verbose or generalized instructions.

- **Target Code:** `if(j%2==0) {`
  - **ChatGPT Example 2:** `if (binaryString.charAt(i) == '0') {`
  - **Comparison:** Both examples use conditional logic, but the target code's logic is simpler and more direct, reflecting a human tendency to solve specific problems without additional complexity.

- **Target Code:** `System.out.println(""== Seat Counts==""+""\n"");`
  - **Human Example 1:** `System.out.println(res);`
  - **Comparison:** Both lines demonstrate the use of print statements to provide output to the user. The target code includes formatted sections, which is a characteristic of human attention to detail in output presentation.

These comparisons illustrate how the target code aligns more closely with human-written examples due to its simplicity, directness, and attention to detail, supporting the model's classification decision.",
wud@gmail.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",ChatGPT,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a 100% probability. This classification is influenced by several key features: the use of specific naming conventions, the structure and logic of the conditional statements, and the overall organization of the code. The target code exhibits patterns that are more characteristic of human-written code, such as the use of meaningful variable names, the inclusion of user prompts and messages, and the handling of input and output operations in a straightforward manner. Additionally, the code's logic flow and error handling (e.g., checking for unavailable menu items) are typical of human authorship. The absence of certain stylistic patterns commonly associated with AI-generated code also contributes to this classification.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `static String Customer_Name;`
   - **Explanation**: The use of static variables with meaningful names indicates a human-written style. Humans often choose variable names that are descriptive and relevant to the context, which is evident here. AI-generated code might use more generic or less contextually appropriate names.

2. **Code Line**: `Scanner Name = new Scanner(System.in);`
   - **Explanation**: The instantiation of a `Scanner` object with a capitalized variable name, `Name`, is unconventional and suggests human authorship. Humans might use such naming due to oversight or personal preference, whereas AI-generated code typically follows more standardized conventions.

3. **Code Line**: `if(Coffee.equals(""Espresso"")){ Price = 50; }`
   - **Explanation**: The use of `if-else` statements to determine the price based on coffee type is a straightforward and common pattern in human-written code. This explicit and clear logic is often seen in educational or simple applications coded by humans.

4. **Code Line**: `System.out.println(""== Welcome to ICT Coffee Shop =="");`
   - **Explanation**: The inclusion of user-friendly messages and formatting, such as headers and billing details, is characteristic of human-written code. Humans often prioritize user interaction and readability, which is evident in this line.

5. **Code Line**: `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`
   - **Explanation**: This conditional logic for applying a discount demonstrates a typical human approach to solving problems. The logic is simple and pragmatic, reflecting a common human practice of implementing business logic in a straightforward manner.

**Comparison to Previous Examples**

- **Variable Naming**:
  - **Target Code**: `static String Customer_Name;`
  - **Human-written Example 1**: `String name = in.next();`
  - **Comparison**: Both examples use meaningful variable names that describe their purpose. In contrast, AI-generated examples might use more generic naming conventions.

- **Scanner Usage**:
  - **Target Code**: `Scanner Name = new Scanner(System.in);`
  - **Human-written Example 2**: `Scanner in = new Scanner(System.in);`
  - **Comparison**: The use of the `Scanner` object for input is consistent across human-written examples, indicating a common approach to handling user input.

- **Conditional Logic**:
  - **Target Code**: `if(Coffee.equals(""Espresso"")){ Price = 50; }`
  - **AI-generated Example 1**: `for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) { ... }`
  - **Comparison**: The target code uses simple `if-else` logic, whereas the AI-generated example uses a loop with more complex logic. Human-written code often favors straightforward conditional structures.

- **User Messages**:
  - **Target Code**: `System.out.println(""== Welcome to ICT Coffee Shop =="");`
  - **Human-written Example 1**: `System.out.print(""Enter employee's name:"");`
  - **Comparison**: Both examples include user prompts and messages, which are typical in human-written code to enhance user interaction.

- **Discount Logic**:
  - **Target Code**: `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`
  - **Human-written Example 2**: `for (int i = 1; i <= numYears * 12; i++) { ... }`
  - **Comparison**: The target code's discount logic is simple and direct, similar to the straightforward loop logic in the human-written example. This reflects a human tendency to implement clear and practical solutions.

The similarities in naming conventions, user interaction, and straightforward logic between the target code and human-written examples support the model's classification. The target code lacks the more complex structures and stylistic patterns often found in AI-generated examples, reinforcing its classification as human-written.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 2, 'selected_line_useful': 3, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 9, 51, 19, 483000)}"
wud@gmail.com,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written is likely influenced by several key features. These include the use of straightforward logic, conventional variable naming, and the lack of overly complex or abstract patterns that are often seen in AI-generated code. The code demonstrates a clear and practical approach to solving the problem, with a focus on readability and simplicity. Additionally, the code contains some stylistic choices and logic structures that are common in human-written code, such as the use of straightforward loops and conditional statements without unnecessary complexity or abstraction.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a 2D array with fixed dimensions, a straightforward and typical approach for setting up a matrix-like structure in Java. Human-written code often uses such direct and clear initializations for simple tasks.
   - **Features**: The use of fixed dimensions and direct array initialization indicates a practical, problem-solving approach typical of human-written code.

2. **Code Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: This is a standard loop for iterating over an array. The use of `seat.length` for boundary checking is a common practice in human-written code to prevent out-of-bounds errors.
   - **Features**: The loop structure is simple and conventional, reflecting typical human coding practices for iterating through arrays.

3. **Code Line: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`**
   - **Explanation**: The use of concatenation with `""\n""` for formatting output is straightforward and typical of human-written code. It displays a focus on readability and user-friendly output.
   - **Features**: This line demonstrates a practical approach to formatting output, which is often seen in human-written code for clarity and presentation.

4. **Code Line: `if(j%2==0) {`**
   - **Explanation**: This conditional statement checks for even indices, a common pattern in human-written code when alternating between two states (e.g., available vs. reserved seats).
   - **Features**: The use of modulus for alternating logic is a simple and effective pattern frequently used by human programmers.

5. **Code Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: This line outputs a summary of the results, a typical practice in human-written code to provide a final output or summary of the program's execution.
   - **Features**: The direct and clear output of results reflects a human tendency to ensure the program's output is understandable and informative.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **ChatGPT Snippet**: 
    ```java
    Arrays.sort(keys, Comparator.comparing(String::toLowerCase));
    ```
  - **Target Snippet**: 
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT-generated code uses more advanced features like `Arrays.sort()` with a custom comparator, indicating a level of abstraction and complexity. In contrast, the target code's simple array initialization reflects a more straightforward, human-like approach.

- **Comparison with ChatGPT-generated Example 2**:
  - **ChatGPT Snippet**: 
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Snippet**: 
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code uses `String.format()` and `replace()` for formatting, which is more complex than the target code's simple string concatenation for output. This simplicity in the target code is more typical of human-written code.

- **Comparison with Human-written Example 1**:
  - **Human Snippet**: 
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Snippet**: 
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both snippets demonstrate direct, straightforward logic for initializing and iterating, which is characteristic of human-written code. The use of clear, simple patterns aligns closely with human coding styles.

- **Comparison with Human-written Example 2**:
  - **Human Snippet**: 
    ```java
    int count=0;
    ```
  - **Target Snippet**: 
    ```java
    if(j%2==0) {
    ```
  - **Analysis**: The logic in both snippets is clear and concise, with a focus on simplicity and practicality. The use of straightforward conditional logic is a hallmark of human-written code and supports the classification decision.",2025-04-02 09:56:26.201000,
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a probability of 100.0000%. Key factors influencing this classification include the overall structure and style of the code, the specific patterns used in loops and conditionals, and the absence of overly verbose comments or explanations. The target code exhibits a straightforward, practical approach to solving a problem, typical of human developers, especially when compared to the more structured and verbose style often seen in ChatGPT-generated examples.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:**
  ```java
  int[][] seat = new int[10][15];
  ```
  - **Explanation:** This line demonstrates a straightforward initialization of a two-dimensional array without additional explanation or abstraction. Human-written code often includes direct declarations without additional context or comments unless necessary.

- **Key Code Line 2:**
  ```java
  for(int i = 0;i<seat.length;i++) {
  ```
  - **Explanation:** The use of a simple loop with concise syntax reflects typical human coding practices. The loop is straightforward and lacks any additional abstraction or unnecessary complexity, indicative of human intuition in solving the problem.

- **Key Code Line 3:**
  ```java
  if(j%2==0) {
  ```
  - **Explanation:** The conditional check using a modulus operation is a common pattern in human-written code. It directly manipulates indices to determine seat availability, a practical approach often employed by human developers.

- **Key Code Line 4:**
  ```java
  System.out.print(""S""+(j+1)+"""");
  ```
  - **Explanation:** The concatenation for output formatting is direct and lacks the more structured or templated formatting often seen in AI-generated code. Human developers often use simple string concatenation for quick output needs.

- **Key Code Line 5:**
  ```java
  System.out.println(""== Seat Counts==""+""\n"");
  ```
  - **Explanation:** The inclusion of simple print statements to separate sections of output is a common practice in human-written code for clarity. The use of newline characters and simple string literals is typical of human coding styles.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **ChatGPT Example Code Snippet:**
    ```java
    System.out.printf(""%-15s%3d%n"", key, wordCounts.get(key));
    ```
  - **Target Code Snippet:**
    ```java
    System.out.print(""S""+(j+1)+"""");
    ```
  - **Analysis:** The ChatGPT-generated code uses formatted printing (`printf`), which is more structured and verbose compared to the simple concatenation in the target code. This demonstrates a preference for simplicity in human-written code.

- **Comparison with ChatGPT-generated Example 2:**
  - **ChatGPT Example Code Snippet:**
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code Snippet:**
    ```java
    if(j%2==0) {
    ```
  - **Analysis:** The ChatGPT example uses complex string manipulation, while the target code uses a simple modulus operation for logic. This reflects the human tendency to use straightforward logic over complex string operations unless necessary.

- **Comparison with Human-written Example 1:**
  - **Human Example Code Snippet:**
    ```java
    int max=0;
    int res=0;
    ```
  - **Target Code Snippet:**
    ```java
    int TotalAvailableSeat = 0;
    int TotalReservedSeat = 0;
    ```
  - **Analysis:** Both snippets show straightforward variable initialization without additional context, a common human coding pattern focused on functionality rather than verbosity.

- **Comparison with Human-written Example 2:**
  - **Human Example Code Snippet:**
    ```java
    for(int i=0;i<m;i++) {
    ```
  - **Target Code Snippet:**
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis:** Both examples use simple loop constructs, indicative of human-written code that prioritizes clarity and directness over complex constructs.

Overall, the target source code aligns more closely with the human-written examples due to its straightforward logic, simple constructs, and lack of verbose or overly structured elements typical of AI-generated code. These features support the model's classification decision.",
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with 100% probability. This decision is likely influenced by several characteristics typical of human-written code, such as the use of straightforward logic, lack of advanced language features, and a simple, clear, and direct coding style. The code structure and comments are minimalistic, focusing on basic functionality without unnecessary complexity or verbosity. These traits are often seen in human-written code, especially in educational or competitive programming contexts. The code's organization and variable naming conventions also suggest a human touch, as they are practical and straightforward.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `int[][] seat = new int[10][15];`
   - **Explanation**: This line initializes a two-dimensional array with fixed dimensions, a common practice in human-written code for simple tasks. The straightforward initialization without additional abstraction or encapsulation suggests a human-written approach.

2. **Code Line**: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`
   - **Explanation**: The use of string concatenation for formatting output is typical in human-written code, where simplicity is prioritized over more advanced formatting techniques.

3. **Code Line**: `for(int i = 0;i<seat.length;i++) {`
   - **Explanation**: The use of a traditional for-loop for iterating over arrays is a classic pattern in human-written code. This approach is direct and efficient for small datasets, reflecting a practical, no-frills coding style.

4. **Code Line**: `if(j%2==0) { ... } else { ... }`
   - **Explanation**: The straightforward if-else logic to alternate between available and reserved seats demonstrates a human-like pattern of solving problems with simple conditional structures.

5. **Code Line**: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`
   - **Explanation**: This line uses simple string concatenation to output results, a hallmark of human-written code that prioritizes readability and simplicity over more complex methods like formatted strings.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **ChatGPT Example**: 
    ```java
    Arrays.sort(keys, Comparator.comparing(String::toLowerCase));
    ```
  - **Target Code**:
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT-generated example uses more advanced Java features like `Arrays.sort` with a comparator, indicating a higher level of abstraction. In contrast, the target code uses basic array initialization, suggesting a simpler, human-written style.

- **Comparison with ChatGPT-generated Example 2**:
  - **ChatGPT Example**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code uses `String.format()` for sophisticated string manipulation, while the target code uses basic string concatenation, a pattern more commonly found in human-written code.

- **Comparison with Human-written Example 1**:
  - **Human Example**:
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Code**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both examples use basic integer parsing and loop structures, indicative of a human-written style that focuses on simplicity and directness.

- **Comparison with Human-written Example 2**:
  - **Human Example**:
    ```java
    System.out.println(count);
    ```
  - **Target Code**:
    ```java
    System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
    ```
  - **Analysis**: Both examples use straightforward `System.out.println()` statements for output, a common pattern in human-written code for its simplicity and clarity.

The similarities between the target code and human-written examples, such as straightforward logic, basic language features, and simple output methods, strongly support the model's classification of the target code as human-written.",
wud@gmail.com,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.46215191065835E-06,100.0,👩🏻‍💻 Human,"**Overview**

The target source code was classified as 100% human-written by the GraphCodeBERT-based model. The model likely identified specific characteristics in the code that are typically associated with human-written code. These characteristics include the use of simple but effective logic, straightforward variable naming, and a lack of overly complex or unnecessary abstractions. The code focuses on practical functionality without excessive optimization or stylistic embellishments, which are more common in AI-generated code. Additionally, the lack of comments and the straightforward procedural style of coding may have contributed to this classification.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a two-dimensional array with specific dimensions. Human-written code often uses fixed sizes for arrays when the problem domain is well understood, reflecting a pragmatic approach to coding.
   - **Features**: The hard-coded dimensions indicate a specific understanding of the problem requirements, which is a characteristic of human-written code.

2. **Line: `System.out.println(""==MUTheater Seat Layout==""+ ""\n"");`**
   - **Explanation**: This print statement uses a simple concatenation to add a newline character. Human-written code often employs straightforward string manipulations for clarity and simplicity.
   - **Features**: The use of `+ ""\n""` for formatting output is a direct and uncomplicated approach typical of human-written code.

3. **Line: `for(int i = 0; i < seat.length; i++) {`**
   - **Explanation**: The loop iterates over the rows of the seat array using a traditional for-loop structure. This conventional looping method is common in human-written code.
   - **Features**: The use of `seat.length` for loop termination is a standard practice, reflecting a clear understanding of array properties.

4. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; } else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: This conditional logic toggles between available and reserved seats based on the index. The simplicity and clarity of this logic are hallmarks of human-written code.
   - **Features**: The use of modulo operation to alternate values is a straightforward pattern often found in human-written code.

5. **Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: This line outputs a summary of reserved seats. The straightforward generation of summary statistics is a common feature in human-written code.
   - **Features**: The direct use of variable values in output statements reflects a focus on functionality over complex data presentation.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example 1 Code Snippet**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code Excerpt**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+ ""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code often uses more complex string formatting techniques, as seen with `String.format`. In contrast, the target code uses simple concatenation, which is more typical of human-written code.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example 2 Code Snippet**:
    ```java
    Arrays.sort(keys, Comparator.comparing(String::toLowerCase));
    ```
  - **Target Code Excerpt**:
    ```java
    if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }
    ```
  - **Analysis**: The use of advanced sorting with a comparator in the ChatGPT-generated code contrasts with the straightforward conditional logic in the target code, indicating a preference for simpler, more direct solutions in human-written code.

- **Comparison with Human-written Example 1**:
  - **Example 1 Code Snippet**:
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Code Excerpt**:
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: Both snippets show a direct approach to handling data types and initialization, reflecting a pragmatic coding style common in human-written examples.

- **Comparison with Human-written Example 2**:
  - **Example 2 Code Snippet**:
    ```java
    for(i=0; i <= m; i++) cnt[i] = 0;
    ```
  - **Target Code Excerpt**:
    ```java
    for(int i = 0; i < seat.length; i++) {
    ```
  - **Analysis**: The use of traditional for-loops is consistent across both human-written examples, emphasizing straightforward iteration patterns typical in human-written code.

Overall, the target source code aligns more closely with the human-written examples due to its straightforward logic, practical implementation, and lack of complex abstractions, supporting the classification as human-written.",2025-04-02 09:58:45.884000,
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model predicts the target source code as human-written with a 100% probability. This classification is influenced by several features characteristic of human-written code. Notably, the code exhibits a straightforward, unembellished style, and a practical approach to solving the problem without excessive comments or unnecessary complexity. The logic is clear and direct, with a focus on functionality rather than polish or verbosity. The use of simple loops, straightforward conditionals, and a lack of complex abstractions or advanced language features also contribute to this classification. The model likely recognizes these patterns as indicative of human developers who prioritize functionality and simplicity in their code.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a two-dimensional array to represent theater seats, which is a typical approach in human-written code for matrix-like data structures. The explicit declaration and initialization reflect a straightforward, practical coding style often seen in human-authored programs.

2. **Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: The use of a simple for-loop to iterate over the rows of the array is a common pattern in human-written code. It reflects a basic understanding of array traversal, which is typically taught in programming basics and used frequently by human developers.

3. **Line: `System.out.print(""Row ""+(i+1)+"": "");`**
   - **Explanation**: This line demonstrates a direct approach to output formatting, with string concatenation for dynamic content. Human-written code often uses simple string operations for output, reflecting a functional but non-optimized style.

4. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }`**
   - **Explanation**: The use of a modulo operation to alternate seat states (available/reserved) is a straightforward logic implementation. This pattern is indicative of a human's practical approach to problem-solving, employing basic arithmetic operations for simple conditions.

5. **Line: `System.out.println(""Total Available Seats: ""+TotalAvailableSeat);`**
   - **Explanation**: The direct printing of results using simple concatenation mirrors a typical human approach, focusing on clarity and simplicity rather than using more complex or abstract methods for output.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**: 
    ```java
    Map<String, Integer> wordCounts = new HashMap<>();
    ```
  - **Target Snippet**: 
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: While both snippets involve data structure initialization, the target code uses a basic array, whereas the example uses a `HashMap`, suggesting a more complex abstraction typical of AI-generated code. The simplicity of arrays in the target code aligns more with human-written styles.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Snippet**: 
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Snippet**: 
    ```java
    System.out.print(""Row ""+(i+1)+"": "");
    ```
  - **Analysis**: The example uses advanced string formatting and manipulation, a pattern more prevalent in AI-generated code for polished output. In contrast, the target code's simple concatenation reflects human-written patterns, focusing on straightforward logic.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**: 
    ```java
    int max=0; int res=0; for(int i=1;i<=n;i++){ ... }
    ```
  - **Target Snippet**: 
    ```java
    for(int i = 0;i<seat.length;i++) { ... }
    ```
  - **Analysis**: Both snippets use simple loop constructs, indicative of human-written code. The focus on basic iteration and logic without embellishments is a common trait among human developers.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**: 
    ```java
    System.out.println(count);
    ```
  - **Target Snippet**: 
    ```java
    System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
    ```
  - **Analysis**: Both use straightforward output statements with basic concatenation, emphasizing clarity and simplicity, characteristic of human-written code.

These comparisons highlight the target code's alignment with human-written patterns through its straightforward logic, basic constructs, and practical approach, supporting the model's classification decision.",
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written is primarily influenced by several key characteristics that are typically associated with human coding patterns. These include the use of straightforward and practical logic, the presence of direct and simple output statements, and a lack of overly complex or abstracted code structures. The code exhibits a clear and linear flow, with a focus on solving the problem at hand without unnecessary embellishments or optimizations that might be expected from AI-generated code. Additionally, the variable naming and formatting suggest a pragmatic approach often seen in human-written code. These elements collectively contribute to the model's decision to classify the code as human-written.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**:
   ```java
   int[][] seat = new int[10][15];
   ```
   - **Explanation**: This line shows a straightforward declaration of a 2D array, which is a common practice in human-written code. It indicates a clear intention to represent a seating layout, reflecting a direct approach to problem-solving.

2. **Code Line**:
   ```java
   System.out.println(""==MUTheater Seat Layout==""+""\n"");
   ```
   - **Explanation**: The use of simple and direct output statements like this one is typical in human-written code. The addition of a newline character is a pragmatic choice to enhance readability, showing attention to output formatting.

3. **Code Line**:
   ```java
   for(int i = 0;i<seat.length;i++) {
   ```
   - **Explanation**: The use of a basic for-loop to iterate over an array is a common pattern in human-written code. The loop structure is straightforward, indicating a clear thought process aimed at systematically accessing array elements.

4. **Code Line**:
   ```java
   System.out.print(""Row ""+(i+1)+"": "");
   ```
   - **Explanation**: This line demonstrates a simple and direct method of constructing output strings, a characteristic often found in human-written code. The use of concatenation for dynamic content generation is practical and intuitive.

5. **Code Line**:
   ```java
   if(j%2==0) {
       System.out.print(""-A "");
       TotalAvailableSeat++;
   }else {
       System.out.print(""-R "");
       TotalReservedSeat++;
   }
   ```
   - **Explanation**: The use of a straightforward conditional statement to alternate between available and reserved seats is indicative of human-written logic. The approach is clear and efficient, focusing on achieving the desired outcome with minimal complexity.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code**:
    ```java
    String[] words = line.split(""[\\s\\p{Punct}&&[^']&&[^-]]+"");
    ```
  - **Target Code**:
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT-generated code uses a complex regular expression for splitting strings, showcasing a level of abstraction and complexity that is less common in human-written code. In contrast, the target code's straightforward array declaration reflects a more direct approach typical of human authors.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Code**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code involves formatting and string manipulation techniques that are more sophisticated, whereas the target code uses simple print statements that focus on clarity and directness, a hallmark of human-written code.

- **Comparison with Human-written Example 1**:
  - **Example Code**:
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Code**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both examples demonstrate a straightforward approach to handling data types and loops. The human-written example uses basic parsing, while the target code employs a simple loop, both reflecting a pragmatic coding style.

- **Comparison with Human-written Example 2**:
  - **Example Code**:
    ```java
    int count=0;
    ```
  - **Target Code**:
    ```java
    if(j%2==0) {
        System.out.print(""-A "");
        TotalAvailableSeat++;
    }else {
        System.out.print(""-R "");
        TotalReservedSeat++;
    }
    ```
  - **Analysis**: Both the human-written example and the target code use straightforward logic to manage counters and conditionals. This simplicity and directness in handling logic is a common trait in human-written code, supporting the classification decision.

The similarities in straightforward logic, variable handling, and output formatting between the target code and the human-written examples reinforce the model's classification of the target code as human-written.",
Anonymous,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written is likely influenced by several key patterns and characteristics typical of human coding style. These include the use of straightforward and logical variable names, conventional loop structures, and clear formatting. The code demonstrates a practical approach to solving the problem at hand, with a focus on readability and simplicity. The presence of direct and straightforward logic without excessive abstraction or overly complex constructs also suggests a human-written style. Additionally, the lack of overly verbose comments or unnecessary complexity further aligns the code with typical human-written code patterns.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line demonstrates a straightforward declaration and initialization of a 2D array. The choice of dimensions (10 and 15) and the variable name `seat` are intuitive and directly related to the problem context, reflecting a human tendency to choose practical and contextually relevant names and sizes.

2. **Code Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: The use of a standard for-loop to iterate over the array is a common pattern in human-written code. It reflects a basic yet effective approach to traversing data structures, emphasizing simplicity and clarity.

3. **Code Line: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`**
   - **Explanation**: This line shows the use of direct and purposeful output statements. The string concatenation to add a newline character is a simple and typical way humans handle formatting in console output.

4. **Code Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: The conditional logic used here is straightforward and clear, with a simple modulo operation to alternate between available and reserved seats. This reflects a human-like approach to solving problems with basic control structures.

5. **Code Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: The direct use of concatenation for outputting results is a common human coding practice. It shows a preference for simplicity and directness in presenting results.

**Comparison to Previous Examples**

- **Variable Naming and Initialization**:
  - **Target Code**: `int[][] seat = new int[10][15];`
  - **Human-written Example 1**: `int n=Integer.parseInt(nyuA);`
  - **Comparison**: Both snippets show straightforward variable initialization with contextually relevant names. The target code's `seat` aligns with the human-written example's `n`, both being descriptive and simple, which is a common human practice.

- **Loop Structures**:
  - **Target Code**: `for(int i = 0;i<seat.length;i++) {`
  - **Human-written Example 2**: `for(int i=0;i<m;i++) {`
  - **Comparison**: Both use standard for-loops with simple iteration logic, a hallmark of human-written code due to its readability and clarity.

- **Output Statements**:
  - **Target Code**: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`
  - **ChatGPT-generated Example 1**: `System.out.println(""Usage: java WordCounter filename"");`
  - **Comparison**: Although both use `System.out.println`, the target code's use of string concatenation for formatting is slightly more typical of human-written code, as it shows attention to output formatting.

- **Conditional Logic**:
  - **Target Code**: `if(j%2==0) { ... }else { ... }`
  - **Human-written Example 1**: `if(temp%2!=0){ ... }`
  - **Comparison**: The use of simple conditional logic with clear conditions is common in human-written code. Both examples use modulo operations in if-statements, reflecting a straightforward approach to condition handling.

- **Overall Complexity and Structure**:
  - **Target Code**: Demonstrates a clear and logical structure without unnecessary complexity.
  - **ChatGPT-generated Example 2**: Contains clear logic but sometimes includes more verbose explanations or comments.
  - **Comparison**: The target code's minimalistic and direct approach aligns more closely with human-written examples, which often prioritize simplicity and efficiency over verbosity.

The target code's characteristics, such as clear logic, straightforward structure, and practical variable naming, align more closely with the human-written examples than with the ChatGPT-generated ones, supporting its classification as human-written.",
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification of the target source code as human-written is influenced by several factors. Key features include the use of straightforward logic without excessive comments or explanations, typical naming conventions for variables and methods, and the absence of unnecessary complexity or abstraction often seen in AI-generated code. The code displays a pragmatic approach to solving the problem, with direct implementation of logic and a focus on functionality over stylistic embellishments. The simplicity and directness of the code, along with the use of standard Java constructs, strongly suggest a human author.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a 2D array with fixed dimensions, a straightforward approach typical of human-written code. It reflects a clear understanding of the problem domain (a theater seating layout) and directly represents it in code without additional abstraction or complexity.

2. **Line: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`**
   - **Explanation**: The use of simple string concatenation for output formatting is a common practice in human-written code. It shows a preference for clarity and simplicity, avoiding more complex string manipulation methods that might be favored by AI-generated solutions for the sake of optimization.

3. **Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: The use of a basic for-loop to iterate over an array is a conventional coding pattern. It reflects a straightforward approach to iteration, typical of human programmers who prioritize readability and maintainability.

4. **Line: `System.out.println(""== Seat Counts==""+""\n"");`**
   - **Explanation**: Similar to the previous output line, this demonstrates a human-like approach to structuring output. The use of explicit section headers in the output indicates an intention to make the output user-friendly and easy to interpret.

5. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; } else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: This conditional logic is simple yet effective. It shows a clear understanding of the problem (alternating seat availability) and implements a solution in a direct manner. The logic is intuitive and reflects typical human problem-solving strategies.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**: 
    ```java
    String[] words = line.split(""[\\s\\p{Punct}&&[^']&&[^-]]+"");
    ```
  - **Target Snippet**:
    ```java
    System.out.print(""S""+(j+1)+"""");
    ```
  - **Analysis**: The ChatGPT example uses complex regex for splitting strings, which can indicate AI-generated complexity. In contrast, the target code uses straightforward string concatenation, reflecting a human tendency towards simplicity.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Snippet**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Snippet**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT code uses advanced string formatting and manipulation, which can be indicative of AI generation. The target code's use of basic string concatenation suggests a human author who prioritizes readability.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**:
    ```java
    int max=0;
    int res=0;
    ```
  - **Target Snippet**:
    ```java
    int TotalAvailableSeat = 0;
    int TotalReservedSeat = 0;
    ```
  - **Analysis**: Both examples initialize variables in a similar manner, using descriptive names and clear logic. This pattern is typical of human-written code, focusing on clarity and directness.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**:
    ```java
    for(int i=0;i<n;i++) {
    ```
  - **Target Snippet**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both examples use basic for-loops for iteration, which is a common human coding practice. This reflects a straightforward approach to looping, characteristic of human authorship.

These comparisons illustrate how the target code's simplicity, directness, and pragmatic use of Java constructs align more closely with human-written examples, supporting the model's classification as human-written.",
wud@gmail.com,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a probability of 100%. This classification is likely influenced by several factors indicative of human-written code, such as the use of meaningful variable names, straightforward logical flow, and a lack of overly polished or generic structures often found in AI-generated code. The code demonstrates a clear, functional purpose with a seemingly natural coding style, including the use of simple loops and conditions that are typical in human-written code. Additionally, the code lacks the verbosity and excessive comments that sometimes characterize AI-generated code, focusing instead on the task at hand with minimal distractions.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `int[][] seat = new int[10][15];`
   - **Explanation**: This line initializes a 2D array with specific dimensions, a common practice in human-written code for representing a fixed layout, such as a theater seating arrangement. The choice of dimensions (10x15) appears arbitrary and purposeful, reflecting specific requirements rather than a generic example.

2. **Code Line**: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`
   - **Explanation**: The use of descriptive print statements with custom formatting is typical in human-written code for enhancing readability and providing context to the output, which is a natural way humans make their code more user-friendly.

3. **Code Line**: `for(int i = 0;i<seat.length;i++) {`
   - **Explanation**: This standard loop structure iterates over array elements, a fundamental aspect of programming. The loop's simplicity and directness suggest a human approach, focusing on clarity and functionality rather than complexity.

4. **Code Line**: `if(j%2==0) {`
   - **Explanation**: The use of modulus operation to alternate between two options (available and reserved seats) is a straightforward logic pattern often seen in human-written code. It reflects a simple yet effective way to solve the problem at hand.

5. **Code Line**: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`
   - **Explanation**: The use of concatenation in print statements to display results is typical in human-written code. It shows a natural approach to outputting calculated results, focusing on clarity and simplicity.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code**: 
    ```java
    String[] words = line.split(""[\\s\\p{Punct}&&[^']&&[^-]]+"");
    ```
  - **Target Code**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: The ChatGPT-generated example uses complex regex for splitting strings, which can appear overly sophisticated and less intuitive. In contrast, the target code employs simple loop constructs, reflecting a more straightforward and human-centric approach.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Code**: 
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The AI-generated code uses advanced formatting and transformations, which might seem over-engineered for the task. The target code uses basic print statements with newline characters, indicative of a pragmatic and human approach to formatting outputs.

- **Comparison with Human-written Example 1**:
  - **Example Code**: 
    ```java
    int max=0;
    int res=0;
    ```
  - **Target Code**:
    ```java
    int TotalAvailableSeat = 0;
    int TotalReservedSeat = 0;
    ```
  - **Analysis**: Both examples initialize integer variables to zero, a common practice in human-written code for counting purposes. This similarity suggests a shared, intuitive coding style.

- **Comparison with Human-written Example 2**:
  - **Example Code**: 
    ```java
    int count=0;
    ```
  - **Target Code**:
    ```java
    int TotalReservedSeat = 0;
    ```
  - **Analysis**: The use of counters initialized to zero is prevalent in both human-written examples, reinforcing the natural coding habits of humans when dealing with iterative counting tasks.

These comparisons highlight the human-like characteristics of the target code, such as simplicity, clarity, and purposeful structure, aligning closely with human-written examples rather than the more complex or verbose patterns seen in AI-generated examples.",2025-04-02 10:06:10.530000,
wud@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model's classification of the target source code as 100% ChatGPT-generated is likely influenced by several key features and patterns. These include the use of specific Java coding conventions and styles, such as detailed comments, structured method definitions, and algorithmic implementations like insertion sort. The presence of well-structured and explanatory comments, along with methodical approaches to common programming tasks (e.g., reading files, sorting, removing duplicates), align with patterns often seen in AI-generated code, which tends to follow clear and well-documented structures. Additionally, the use of advanced data structures like `TreeMap` for deduplication and the systematic printing of intermediate results in sorting are indicative of AI-generated code, as these are common in educational or illustrative code snippets generated by models like ChatGPT.

---

**Highlight and Explain Key Code Lines**

1. **Code Line:** 
   ```java
   public static ArrayList<String> readFile(String file) throws FileNotFoundException {
   ```
   - **Explanation:** This method signature is a typical pattern in AI-generated code, where the function name clearly describes its purpose, and potential exceptions are explicitly stated. ChatGPT often generates code with clear, descriptive method names and comprehensive exception handling.

2. **Code Line:** 
   ```java
   System.out.println(Arrays.toString(words.toArray()));
   ```
   - **Explanation:** The use of `Arrays.toString()` to print an array in a single line is a concise and efficient way to output data, often utilized in AI-generated code for its simplicity and clarity.

3. **Code Line:** 
   ```java
   // Insertion Sort in descending order (b comes before a)
   ```
   - **Explanation:** The comment provides a clear and detailed explanation of the sorting algorithm used, which is a common practice in AI-generated code to ensure understanding of the logic implemented.

4. **Code Line:** 
   ```java
   System.out.println(""Pass "" + i + "": "" + a);
   ```
   - **Explanation:** Printing the list after each pass of the sort is a pedagogical technique used to illustrate the algorithm's progress, often found in AI-generated code intended for educational purposes.

5. **Code Line:** 
   ```java
   TreeMap<String, Boolean> map = new TreeMap<>();
   ```
   - **Explanation:** The use of a `TreeMap` to remove duplicates while maintaining order is a sophisticated approach that demonstrates understanding of Java's collections framework, a characteristic of AI-generated code aiming to optimize performance and clarity.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example Snippet:**
    ```java
    public class WordSorter {
        //...
        Collections.sort(words);
    }
    ```
  - **Target Snippet:**
    ```java
    public static void sort(ArrayList<String> a) {
        // Insertion Sort in descending order
    }
    ```
  - **Analysis:** Both snippets demonstrate a focus on sorting algorithms. The target code's detailed comments and step-by-step sorting process align with the structured approach seen in AI-generated examples, supporting the classification.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example Snippet:**
    ```java
    Map<String, Integer> map = new TreeMap<>();
    //...
    Collections.sort(list);
    ```
  - **Target Snippet:**
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```
  - **Analysis:** The use of `TreeMap` in both examples for organizing data reflects a pattern in AI-generated code of employing advanced data structures for clarity and efficiency, reinforcing the model's classification.

- **Comparison with Human-written Example 1:**
  - **Example Snippet:**
    ```java
    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(""...""))) {
        //...
    }
    ```
  - **Target Snippet:**
    ```java
    Scanner in = new Scanner(new File(file));
    ```
  - **Analysis:** While both snippets involve file reading, the human-written example uses a `BufferedReader`, which is more common in manually written code for efficiency. The target's use of `Scanner` is simpler and more typical of illustrative or AI-generated code.

- **Comparison with Human-written Example 2:**
  - **Example Snippet:**
    ```java
    Map<String, Integer> map = new HashMap<>();
    //...
    ```
  - **Target Snippet:**
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```
  - **Analysis:** The human example uses `HashMap`, while the target uses `TreeMap`, which maintains order. This choice in the target code suggests a preference for structured and ordered data handling, a trait often seen in AI-generated code.

These comparisons highlight how the target source code's structured and illustrative nature, along with its use of advanced data structures and detailed comments, aligns with patterns typical of ChatGPT-generated code, leading to its classification.",
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a 100% probability. This classification is likely due to several characteristics commonly found in human-written code: the use of straightforward logic without excessive comments, the absence of overly structured or templated code patterns, and the presence of variable naming and flow control that reflect a natural, problem-solving approach. The code demonstrates a clear and concise style, typical of human developers who focus on solving specific tasks without the embellishments or overly generic patterns that might be generated by AI. Additionally, the lack of complex error handling or unnecessary abstraction layers supports the human-written classification.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a 2D array with specific dimensions. Human-written code often includes hardcoded dimensions like this, reflecting an understanding of the problem context and constraints, rather than abstracting for generalization.

2. **Line: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`**
   - **Explanation**: The use of straightforward string concatenation for output is a common practice among human developers, who often prioritize simplicity and readability over optimization in non-performance-critical sections.

3. **Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: The loop structure here is typical of human-written code, focusing on iterating over array indices in a direct manner. The use of `seat.length` demonstrates a clear understanding of array bounds.

4. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; } else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: This conditional logic is straightforward and reflects a human-like decision-making process. The pattern of alternating seats being available or reserved is a simple, yet effective solution to the problem, which is characteristic of human reasoning.

5. **Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: The direct output of computed values at the end of processing is a hallmark of human-written code, where the focus is on delivering results rather than adhering to a more generalized or modular output strategy.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Code**: 
    ```java
    Map<String, Integer> wordCounts = new HashMap<>();
    ```
  - **Target Code**: 
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT example uses a `Map` to store word counts, which is a more complex data structure compared to the simple 2D array in the target code. This simplicity and specificity in data structures are more indicative of human-written code, where the focus is on solving the immediate problem rather than creating a reusable component.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Code**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code uses string formatting and replacement, which is a more complex operation compared to the simple concatenation in the target code. This simplicity suggests a human-written approach, where the focus is on readability and directness.

- **Comparison with Human-written Example 1**:
  - **Example Code**:
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Code**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both examples involve straightforward logic and operations. The human-written example uses parsing and basic integer operations, similar to the target code's use of loops and conditionals, emphasizing a problem-specific approach without unnecessary abstraction.

- **Comparison with Human-written Example 2**:
  - **Example Code**:
    ```java
    int count=0;
    for(int i=0;i<n;i++) {
    ```
  - **Target Code**:
    ```java
    if(j%2==0) {
    ```
  - **Analysis**: The human-written example uses simple loops and conditionals, much like the target code. This direct approach to problem-solving, without complex constructs, aligns with human-written patterns.

Overall, the target source code's straightforward logic, simple data structures, and direct problem-solving approach align closely with patterns found in human-written examples, supporting the classification decision.",
wud@gmail.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the presence of helper methods,  date manipulation logic, a class structure with private fields and public methods (getters/setters), and formatted output with `String.format`.  The code also includes comments explaining sections of the code, which is less common in concise ChatGPT generations. The structure suggests a more deliberate design than typical ChatGPT output for a simple prompt. The use of date parsing and leap year calculations points towards a specific, non-trivial task, which  ChatGPT might solve differently.  Finally, the inclusion of a package declaration (`package test;`) is more common in human-written code organized into projects.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `private String guest_name;`
    - **Explanation:** This line declares a private instance variable. While ChatGPT can use classes and fields, it often favors simpler structures unless explicitly instructed to create classes with private members.  This suggests a human developer's intent to encapsulate data within the class.

2. **Key Code Line:** `int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`
    - **Explanation:** Calling a separate helper function (`calculateDaysBetweenDates`) for date calculations suggests modularity and code organization, which are characteristics of human-written code.  ChatGPT tends to inline simpler calculations or use libraries directly.

3. **Key Code Line:** `public static int calculateDaysBetweenDates(...)`
    - **Explanation:** The presence of a dedicated helper method for date difference calculation, especially one handling leap years, demonstrates more complex logic than typically seen in initial ChatGPT code generation for a simple prompt like ""create a room rent calculator"".

4. **Key Code Line:** `totalDays += isLeapYear(year) ? 366 : 365;`
    - **Explanation:**  The use of the ternary operator and explicit leap year calculation within the `calculateDaysBetweenDates` function  indicates attention to detail and potentially a human developer's awareness of date/time complexities.

5. **Key Code Line:** `System.out.println(""Total Rent: "" + String.format(""%.2f"", total));`
    - **Explanation:**  Formatting output using `String.format` for precise decimal places is a stylistic choice often made by human developers.  While ChatGPT can use it, it's less common unless specifically requested in the prompt.


**Comparison to Previous Examples**

1. **Class Structure and Getters/Setters:** The target code defines a class with private fields and corresponding getter/setter methods, resembling the structure in the human-written Example 1 (1_Exercise05_21.java):

    **Target Code:**
    ```java
    private String guest_name;
    public String getGuest_name() {
        return guest_name;
    }
    public void setGuest_name(String guest_name) {
        this.guest_name = guest_name;
    }
    ```

    **Human-written Example 1:** (Although not getters/setters, it demonstrates class usage)
    ```java
    package ch_05; // Package declaration

    import java.util.*; // Import statement

    public class Exercise05_21 { //Class declaration
        // ... (Class content)
    }
    ```

    ChatGPT-generated examples typically lack this level of object-oriented design unless specifically prompted for it.


2. **Helper Methods:** The target code uses helper methods like `calculateDaysBetweenDates` and `isLeapYear`. This is similar to how the `calcTax` function is used in the human-written Example 2 (1_Exercise08_12.java):

    **Target Code:**
    ```java
    public static int calculateDaysBetweenDates(...) { ... }
    public static boolean isLeapYear(int year) { ... }
    ```

    **Human-written Example 2:**
    ```java
    static double calcTax(double income, int[] bracket, double[] rates) { ... }
    ```

    ChatGPT-generated examples tend to have less function decomposition, especially for relatively straightforward tasks.  Both ChatGPT examples provided inline the calculations directly within the `main` method.


3. **Date/Time Handling:** The target code deals with date manipulation and leap year calculations, a more complex logic not present in the provided ChatGPT examples.  This more intricate logic is more typical of human-written code where specific requirements necessitate such calculations.

4. **Comments:** While sparse, the target code includes comments explaining the purpose of certain code sections (e.g., ""// Helper method to...""). This practice aligns more with human-written code conventions, although it's not absent in ChatGPT output entirely.  The comments suggest a human developer's attempt to improve code readability.

These similarities to human-written examples and differences from the ChatGPT-generated examples, in conjunction with the general code structure and logic, contributed to the model's classification of the target source code as human-written.","{'ratings': {'overall': 3, 'conciseness': 3, 'clarity': 2, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 12, 59, 832000)}"
wud@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",Gemini,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors, including: 1) extensive use of comments explaining basic functionality, a common practice in ChatGPT outputs when prompted to generate code with explanations; 2) the structure of the `sort` method which includes inline comments explaining each step of the insertion sort algorithm, similar to how ChatGPT might break down a process for educational purposes; 3) the simple and straightforward coding style, lacking complex logic or optimizations that a human programmer might employ; and 4) the use of `Arrays.toString()` in `printWords` method, a common practice for beginner-level code generation tasks. The combination of these factors creates a code signature more aligned with typical ChatGPT outputs.  Specifically, the detailed inline commenting innerhalb the sort function and the basic nature of the removeDuplicate function contribute significantly to the model's classification.  The lack of package declaration and generally straightforward coding style also adds to the AI-generated appearance.  Finally, handling of file input and output resembles basic tutorial-style examples often generated by AI.  This includes basic exception handling.

---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1**: `/** This method will accept a file name as a parameter, read the textual content in a given file, and return these words in a list of strings. */`
    - **Explanation**: This comment is excessively descriptive for a simple function like `readFile`. Human-written code often assumes a level of understanding of basic file I/O operations and would likely omit such a detailed explanation. ChatGPT, on the other hand, tends to over-explain, mirroring educational or tutorial-style code generation.
- **Key Code Line 2**: `/** This method will accept a list of strings and print out all the words separated by commas in one line. */`  
    - **Explanation**: Similar to the previous point, this comment is overly descriptive for a simple print function.  Human developers would likely find this level of explanation redundant.  ChatGPT, however, is prone to generating such comments.
- **Key Code Line 3**: `// Insertion Sort in descending order (b comes before a)`
    - **Explanation**:  While comments inside a sorting algorithm can be helpful, this particular comment states the obvious nature of descending order.  This type of clarifying comment is more characteristic of AI-generated code aiming for explicitness.
- **Key Code Line 4**: `// Move elements of a[0..i-1] that are greater than current to one position ahead`
    - **Explanation**: This comment, within the sorting loop, explains a standard step in the insertion sort algorithm.  Experienced programmers would rarely include such granular commentary within the algorithm implementation itself.
- **Key Code Line 5**: `// Print the list after each pass`
    - **Explanation**:  Printing the list after each pass of a sorting algorithm is primarily done for educational or debugging purposes. While human-written code might include this for demonstration, it's less common in production-ready code.  ChatGPT is more likely to incorporate such steps, reflecting its tendency to prioritize illustrative or pedagogical approaches.


**Comparison to Previous Examples**:

- **Target vs. ChatGPT Example 1 (0_WordDisplay.java):** Both the target code and Example 1 share a similar level of comment detail. For instance, both examples contain comments that describe the function's purpose in a granular fashion:
    - **Target:** `/** This method will accept a file name as a parameter, read the textual content in a given file, and return these words in a list of strings. */`
    - **Example 1:**  (While not as verbose overall, the comments like `// Error reading file: ` still explain straightforward actions).
    This shared verbosity in comments strengthens the classification of the target code as ChatGPT-generated.
- **Target vs. ChatGPT Example 2 (0_Exercise21_07.java):** Both examples use a straightforward coding style and implement relatively simple algorithms. Example 2 also features comments that explain relatively simple steps: `// Create a TreeMap to hold words as key and count as value`, mirroring the target code's comment style.
- **Target vs. Human Example 1 (1_Exercise12_21.java):** Human Example 1 displays a higher level of conciseness in its comments. It uses a package declaration (`package ch_12.exercise12_21;`) which is absent in the target code, a characteristic often found in more structured human-written projects. 
- **Target vs. Human Example 2 (1_Exercise21_07.java):** Similar to Example 1, Human Example 2 shows a more concise coding style.  It also includes a package declaration and utilizes a more idiomatic approach to comparing counts using `Integer.compare()` within the `compareTo` method of the `WordOccurrence` class.  The target code's simpler, more explicit comparison style aligns more with AI-generated code.

The comparisons highlight how the target code aligns more closely with the ChatGPT examples in terms of coding style, comment verbosity, and simplicity. This similarity supports the model's classification of the target code as ChatGPT-generated. The human examples, on the other hand, exhibit more sophisticated code structure, conciseness, and idiomatic expressions, differentiating them from the target code and the ChatGPT examples.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 20, 58, 302000)}"
wud@gmail.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its structured and somewhat simplistic approach to a straightforward problem.  The code exhibits several characteristics common in ChatGPT output, such as explicit comments explaining basic operations (e.g., ""Array to store the prices of 5 items""), a linear, step-by-step structure (Task 1, Task 2, Task 3), and the use of common coding patterns like iterating through arrays and using if-else statements for grading. The code lacks the nuances and potential complexities one might find in human-written code for even simple tasks. The explicit closing of the scanner (`scanner.close();`) is also a feature frequently observed in ChatGPT-generated Java code.  The usage of `Arrays.toString()` for displaying the array, while functional, is a less common choice for human developers who might opt for a more customized output.  Finally, the grade assignment logic feels somewhat contrived and ""textbook-like,"" a characteristic frequently seen in generated code.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`
    - **Explanation:** This comment is overly explanatory for something as basic as array declaration. Human developers rarely comment on such self-evident code. ChatGPT often adds such verbose comments.

- **Key Code Line 2:** `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
    - **Explanation:** While functional, `Arrays.toString()` for output is a less common practice among human developers who may prefer formatted output with loops. ChatGPT tends to favor this concise approach.

- **Key Code Line 3:** `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
    - **Explanation:** Again, an overly explanatory comment for a simple calculation.  Humans would rarely explain such a basic operation.

- **Key Code Line 4:** `char grade = 'F'; // Default grade`
    - **Explanation:** Explicitly setting a default grade and then using if-else to modify it is a pattern often seen in generated code. Humans might directly assign grades within the conditional blocks.

- **Key Code Line 5:** `scanner.close();`
    - **Explanation:** While good practice, explicit closing of the scanner is meticulously included by ChatGPT. Human developers might sometimes omit it, especially in short programs.


**Comparison to Previous Examples**

- **Similarity to ChatGPT-Generated Example 1 (0_Exercise05_31.java):** Both the target code and this example exhibit a linear structure with comments explaining each step. Both use `Scanner` for input and provide formatted output with `printf`.
    - **Target Code:**
    ```java
    // Input prices for the items
    for (int i = 0; i < 5; i++) {
        System.out.print(""Enter price for item "" + (i + 1) + "": "");
        itemPrices[i] = scanner.nextDouble();
    }
    ```
    - **Example 1:**
    ```java
    // Calculate and display the CD's value after each month
    System.out.println(""Month\tCD Value"");
    for (int i = 1; i <= months; i++) {
        double value = amount * Math.pow(1 + rate / 1200, i);
        System.out.printf(""%-5d\t%.2f\n"", i, value);
    }
    ```

- **Similarity to ChatGPT-Generated Example 2 (0_Exercise07_01.java):** Both share a similar structure where input is taken, processing occurs (calculating average, assigning grades), and then output is displayed.  The comments in both explain basic code functionality.
    - **Target Code:**
    ```java
    // Task 2: Calculate and display average price
    double totalPrice = 0;
    for (double price : itemPrices) {
        totalPrice += price;
    }
    double averagePrice = totalPrice / itemPrices.length; // Compute the average
    ```
    - **Example 2:**
    ```java
    // Find the best score
    int best = scores[0];
    for (int i = 1; i < numStudents; i++) {
        if (scores[i] > best) {
            best = scores[i];
        }
    }
    ```

- **Difference from Human-Written Example 1 (1_Exercise03_18.java):** The human-written example has less verbose commenting and a more compact if-else structure. It doesn't explicitly define a default value for the `shipping` variable. The target code, on the other hand, meticulously sets a default grade.

- **Difference from Human-Written Example 2 (1_Exercise05_30.java):** This human-written example also lacks verbose comments and directly calculates the total within the loop without intermediate variables like `totalPrice` used in the target code.  The spacing and formatting in the human-written example are also less consistent than the neatly formatted generated code.

These similarities to ChatGPT-generated examples and differences from human-written examples collectively contribute to the model's high confidence in classifying the target code as AI-generated. The model likely picks up on the stylistic patterns, the verbosity in comments, and the structural simplicity commonly associated with ChatGPT output.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 20, 13, 657000)}"
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",Gemini,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as Human-written due to several factors, including the simplicity of the code's logic, the specific formatting choices (like ""-A"" and ""-R"" for seat types), and the absence of common ChatGPT patterns such as excessive comments or complex data structures. The code's structure, particularly the nested loops and straightforward output formatting, appears more aligned with a beginner-level programmer's approach than ChatGPT's often more optimized or generalized output.  The code also lacks imports which, while not definitive, contributes to the perception of a simple, potentially human-authored program focused on a specific, limited task.  The lack of error handling or input validation also suggests a human author focused on the core functionality rather than a comprehensive solution.

---

**Highlight and Explain Key Code Lines**:

- **Key Code Line 1:** `int[][] seat = new int[10][15];`
    - **Explanation:** This line declares a 2D integer array with fixed dimensions. While ChatGPT can generate such declarations, it often leans towards more dynamic or flexible array sizes, especially when handling user input. The specific dimensions suggest a human author with a predetermined seating layout in mind.

- **Key Code Line 2:** `System.out.print(""S""+(j+1)+"""");`
    - **Explanation:** The string concatenation using `(j+1)` indicates a manual approach to formatting the seat numbers. ChatGPT might employ a more concise or formatted output method, such as `String.format()`. This direct manipulation of the output string suggests a human author.

- **Key Code Line 3:** `if(j%2==0) { ... }else { ... }`
    - **Explanation:** This simple even/odd check to alternate between ""-A"" and ""-R"" reflects a basic logic likely implemented by a human.  ChatGPT might use a more complex or data-driven approach for assigning seat types if provided with more context or constraints in the prompt.

- **Key Code Line 4:** `System.out.print(""-A "");` / `System.out.print(""-R "");`
    - **Explanation:** The use of hardcoded strings ""-A"" and ""-R"" (for available and reserved) is simple and specific to the problem, more typical of a human approach. ChatGPT might use more descriptive variable names or a separate data structure to manage seat statuses.

- **Key Code Line 5:** `System.out.println(""Total Available Seats: ""+TotalAvailableSeat);`
    - **Explanation:** Similar to key line 2, this string concatenation indicates a manual approach to formatting output.  While ChatGPT *could* produce this, its tendency towards cleaner string formatting techniques makes this more aligned with human-written code.


**Comparison to Previous Examples**:

- **Comparison 1: Simplicity vs. Complexity**
    - **Target Code:**  The target code's core logic is simple, involving nested loops and basic arithmetic.
    - **Human-written Example 1 (1_p03644.java):** This example, while having more complex logic related to powers of 2, also demonstrates a similar focus on basic operations and relatively simple data structures. 
        ```java
        int n=Integer.parseInt(nyuA);
        for(int i=1;i<=n;i++){
            int temp=i;
            int count=0;
            while(true){ 
                if(temp%2!=0){ ... }
                temp/=2;
                count++;
            }
        }
        ```
    - **ChatGPT-generated Example 1 (0_Exercise21_08.java):** Uses more sophisticated elements like `HashMap`, file I/O, and regular expressions.
        ```java
        Map<String, Integer> wordCounts = new HashMap<>();
        try (Scanner input = new Scanner(file)) { ... }
        String[] words = line.split(""[\\s\\p{Punct}&&[^']&&[^-]]+"");
        ```
    - **Discussion:** The target code's simplicity aligns more closely with the human-written example than the ChatGPT-generated example, supporting the classification.


- **Comparison 2: Formatting and Style**
    - **Target Code:** Uses simple `System.out.print` statements for output.
    - **Human-written Example 2 (1_p03102.java):** Similar use of `System.out.println()` for direct output.
        ```java
        System.out.println(count);
        ```
    - **ChatGPT-generated Example 2 (0_Exercise08_11.java):**  Uses more formatted output with `String.format()`.
        ```java
        String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
        ```
    - **Discussion:** The target code's basic output formatting resembles the human-written example, further reinforcing the human-written classification.

- **Comparison 3:  Error Handling and Input Validation**
    - **Target Code:** Lacks any error handling or input validation.
    - **Human-written Examples:** Both human-written examples generally lack robust error handling or input validation.
    - **ChatGPT-generated Example 1 (0_Exercise21_08.java):** Includes file existence checks and a try-catch block for file I/O exceptions.
        ```java
        if (!file.exists()) { ... }
        catch (FileNotFoundException e) { ... }
        ```
    - **Discussion:** The absence of error handling in the target code, while not best practice, is more consistent with the provided human-written samples than the more cautious approach often taken by ChatGPT.


These comparisons collectively support the model's classification of the target code as Human-written.  The code's simplicity, formatting style, and lack of certain features often found in ChatGPT-generated code all contribute to this prediction.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 3, 'actionability': 3, 'selected_line_useful': 2, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 17, 44, 753000)}"
wud@gmail.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors including the use of static variables, inconsistent naming conventions (mixing camelCase and snake_case), a simple conditional structure without robust input validation, formatting inconsistencies (e.g., inconsistent spacing around operators), and a somewhat convoluted approach to calculating and displaying the total price with a discount.  These characteristics often appear in beginner-level human-written code, where best practices and code style consistency are not yet fully ingrained. The lack of more sophisticated programming constructs and error handling also contributes to the human-written classification. The code appears to be written by a novice programmer learning Java.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `static String Customer_Name;`
    - **Explanation:**  The use of static variables for seemingly instance-specific data (customer name, coffee type, etc.) is not typical of well-structured Java code. This is a common mistake beginners make, potentially signaling human-written code. Experienced programmers typically avoid unnecessary static variables and favor instance variables within a class.
- **Key Code Line 2:**  `static int Number;`
    - **Explanation:**  Similar to the previous point, using a static variable for the number of cups suggests a lack of object-oriented design principles, further supporting the human-written classification.
- **Key Code Line 3:** `if(Coffee.equals(""Espresso"")){`
    - **Explanation:** The simple `if-else if` chain without any input validation or error handling is indicative of beginner code. A more robust approach would include handling cases where the coffee type is not recognized or misspelled.
- **Key Code Line 4:** `Total_Price = Price * Number;`
    - **Explanation:** While functionally correct, calculating the total price before applying the discount and then adjusting it later seems unnecessarily convoluted. This approach, though functional, might indicate a less experienced programmer. 
- **Key Code Line 5:** `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`
    - **Explanation:** The formatting of the output string using string concatenation and `String.format` within the same line appears less elegant than using a formatted print statement directly.  This style is more common in beginner code where the focus is on functionality rather than code style.


**Comparison to Previous Examples**

- **Static Variables:** The target code's use of static variables (`Customer_Name`, `Coffee`, `Number`, `Price`) deviates significantly from the human-written example 1 (1_Exercise04_23.java) and example 2 (1_Exercise05_22.java) where instance variables and appropriate scoping are used. This particular feature aligns more with beginner-level code, as sophisticated handling of variables is typically absent.  The ChatGPT generated examples also don't demonstrate this usage of static variables.

    - **Target Code:** `static String Customer_Name;`
    - **Human-Written Example 1 (1_Exercise04_23.java):** `String name = in.next();` (within the `main` method)
    - **Human-Written Example 2 (1_Exercise05_22.java):** `double loanAmount = in.nextDouble();` (within the `main` method)


- **Input Validation:** The target code lacks input validation (e.g., checking for invalid coffee types). This is also different from human-written example 2 (1_Exercise05_22.java) though not explicitly seen in Example 1, a more complete implementation would likely handle such scenarios, potentially suggesting it is human-written novice code. The ChatGPT generated examples do handle the loan amount and interest rate as double values though the level of validation is minimal.

    - **Target Code:** `if(Coffee.equals(""Espresso"")){` (No check for invalid input)
    - **ChatGPT-generated Example 1 (0_Exercise05_21.java):**  Implicitly handles double values for `loanAmount` and integer value for `numberOfYears`.
    - **ChatGPT-generated Example 2 (0_Exercise02_21.java):** Implicitly handles double values for `investmentAmount` and `annualInterestRate`.


- **Code Style and Formatting:** The target code has a more straightforward and less consistent structure than the human-written examples, particularly in aspects like spacing around operators and variable naming. It also deviates from the consistent camelCase used in both the ChatGPT-generated and more experienced human-written examples. This less polished structure might be interpreted as a characteristic of human-written beginner code.

    - **Target Code:** `Total_Price = Price * Number;` (Inconsistent spacing and naming)
    - **Human-Written Example 1 (1_Exercise04_23.java):** `double grossPay = hours * payRate;` (Consistent spacing and naming)
    - **ChatGPT-generated Example 1 (0_Exercise05_21.java):** `double totalPayment = monthlyPayment * numberOfYears * 12;` (Consistent spacing and naming)


These comparisons, highlighting the inconsistencies and less structured nature of the target code compared to both sophisticated human-written code and the more structured output of ChatGPT, support the model's classification of the code as human-written, likely from a novice programmer.","{'ratings': {'overall': 3, 'conciseness': 3, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 16, 19, 586000)}"
wud@gmail.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The classification model identified the target source code as ChatGPT-generated with 100% probability. This decision is likely influenced by several factors, including the use of verbose comments, specific coding patterns, and a consistent style that aligns with ChatGPT-generated code. The target code exhibits detailed comments explaining straightforward operations, a characteristic often seen in AI-generated code to enhance readability. Additionally, the use of standard library functions and clear, structured logic without any apparent optimization or complex constructs suggests AI involvement. These elements collectively contribute to the model's classification decision.

---

**Highlight and Explain Key Code Lines**

1. **Commenting Style:**

   ```java
   /**
    * This method will accept a file name as a parameter, read the textual content in a given file, 
    * and return these words in a list of strings. 
    */
   ```

   - **Explanation:** This comment block is verbose, providing a clear and detailed explanation of the method's purpose, which is typical of AI-generated code. Human-written code might not include such detailed comments for straightforward methods.

2. **Use of Standard Library:**

   ```java
   return words;
   ```

   - **Explanation:** This line returns an `ArrayList` of words directly after reading from a file. ChatGPT-generated code often uses standard library functions to accomplish tasks in a straightforward manner without additional complexity.

3. **Simple Logic with Detailed Explanation:**

   ```java
   // Insertion Sort in descending order (b comes before a)
   ```

   - **Explanation:** The comment explains the sorting order, which is a common practice in AI-generated code to ensure clarity. Human-written code might assume the reader understands the sorting order without explicit comments.

4. **Redundant Operations:**

   ```java
   TreeMap<String, Boolean> map = new TreeMap<>();
   ```

   - **Explanation:** Using a `TreeMap` to remove duplicates is a straightforward approach that maintains order but is not the most efficient. This choice reflects a pattern seen in AI-generated code where simplicity and clarity are prioritized over performance.

5. **Consistent Coding Style:**

   ```java
   System.out.println(""Pass "" + i + "": "" + a);
   ```

   - **Explanation:** The consistent use of `System.out.println` for debugging or displaying intermediate results is a characteristic of ChatGPT-generated code, emphasizing clarity and traceability over succinctness.

**Comparison to Previous Examples**

- **Verbose Comments and Explanations:**

  - **Target Code:**
    ```java
    /**
     * This method will accept a list of strings and print out all the words separated by commas in one line.  
     */
    ```

  - **Example 1 (ChatGPT-generated):**
    ```java
    // Create a TreeMap to hold words as key and count as value
    ```

  - **Comparison:** Both the target code and the ChatGPT-generated example include detailed comments explaining the code's purpose. This verbosity is less common in human-written samples, which may assume a higher level of implicit understanding.

- **Use of Standard Libraries:**

  - **Target Code:**
    ```java
    return words;
    ```

  - **Example 2 (Human-written):**
    ```java
    return Integer.compare(this.count, that.count);
    ```

  - **Comparison:** Both examples use standard library functions, but the target code's use is more straightforward and lacks the nuanced logic found in human-written code, which often includes custom logic or optimizations.

- **Simple Logic with Detailed Explanation:**

  - **Target Code:**
    ```java
    // Insertion Sort in descending order (b comes before a)
    ```

  - **Example 1 (ChatGPT-generated):**
    ```java
    // Display the words in ascending order of occurrence counts
    ```

  - **Comparison:** Both codes include comments explaining sorting logic, a pattern more prevalent in AI-generated code to ensure clarity.

- **Consistent Coding Style:**

  - **Target Code:**
    ```java
    System.out.println(""Pass "" + i + "": "" + a);
    ```

  - **Example 2 (Human-written):**
    ```java
    System.out.println(""The strings are not in increasing order..."");
    ```

  - **Comparison:** The use of `System.out.println` for intermediate outputs is consistent in both examples, but the AI-generated code often uses it more extensively for clarity.

- **Redundant Operations:**

  - **Target Code:**
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```

  - **Example 1 (ChatGPT-generated):**
    ```java
    Map<String, Integer> map = new TreeMap<>();
    ```

  - **Comparison:** Both examples use a `TreeMap` for tasks that could be achieved with simpler structures, indicating a preference for clarity over efficiency typical of AI-generated code.

The similarities in commenting style, use of standard libraries, and logic patterns between the target code and ChatGPT-generated examples support the classification decision. The model recognizes these features as indicative of AI-generated code, leading to a high confidence prediction.",
wud@gmail.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with a 100% probability. This decision likely stems from several key features observed in the code. These include the use of straightforward control structures, a lack of overly verbose comments, and a focus on practical, functional code rather than stylistically polished or overly generalized patterns. The code demonstrates a pragmatic approach typically seen in human-written code, where the focus is on solving the problem directly rather than showcasing advanced language features or patterns. The absence of extraneous comments and the direct implementation style contribute to this classification.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a 2D array with fixed dimensions, which is a straightforward and common practice in human-written code. It indicates a direct approach to solve a specific problem without over-generalization, which is often seen in AI-generated code aiming for broader applicability.

2. **Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: The use of a simple for-loop to iterate over an array is a typical pattern in human-written code. The loop is straightforward, with no additional abstraction or complexity, reflecting a focus on functionality and efficiency.

3. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; } else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: This conditional logic uses a simple modulus operation to alternate between two states. The straightforward logic and lack of complex conditionals or unnecessary abstraction suggest a human-written style focused on clarity and simplicity.

4. **Line: `System.out.println(""== Seat Counts==""+""\n"");`**
   - **Explanation**: The use of string concatenation for formatting output is a common practice in human-written code. It reflects a practical approach to string manipulation without employing more advanced or less common techniques, which might be used by AI to demonstrate language proficiency.

5. **Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: This line exemplifies the use of simple print statements to convey results. The directness and lack of embellishment in the output generation are indicative of human-written code, focusing on functionality over form.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1:**
  - **Example Code**: 
    ```java
    Object[] keys = wordCounts.keySet().toArray();
    Arrays.sort(keys, Comparator.comparing(String::toLowerCase));
    ```
  - **Target Code**: 
    ```java
    for(int i = 0;i<seat.length;i++) {
        System.out.print(""Row ""+(i+1)+"": "");
    ```
  - **Analysis**: The ChatGPT-generated example shows a more complex use of collections and sorting with comparators, which suggests a higher level of abstraction and sophistication. In contrast, the target code uses simple loops and print statements, characteristic of human-written code focusing on direct functionality.

- **Comparison with Human-written Example 1:**
  - **Example Code**: 
    ```java
    int temp=i;
    int count=0;
    while(true){
        if(temp%2!=0){
            if(count>max){
                max=count;
                res=i;
            }
            break;
        }
        temp/=2;
        count++;
    }
    ```
  - **Target Code**: 
    ```java
    if(j%2==0) {
        System.out.print(""-A "");
        TotalAvailableSeat++;
    } else {
        System.out.print(""-R "");
        TotalReservedSeat++;
    }
    ```
  - **Analysis**: Both examples use simple loops and conditionals to perform tasks, reflecting a straightforward approach typical of human-written code. The use of modulus operations in both examples further illustrates a shared pattern of practical problem-solving.

- **Comparison with ChatGPT-generated Example 2:**
  - **Example Code**: 
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Code**: 
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated example uses more advanced string formatting and manipulation, indicating a level of complexity and polish. The target code, with its straightforward string concatenation, reflects a more utilitarian style typical of human authors.

These comparisons highlight the differences in complexity and abstraction level between the target source code and ChatGPT-generated examples, reinforcing the model's classification of the target as human-written. The alignment with human-written patterns, such as simplicity and directness, supports this decision.","{'ratings': {'overall': 3, 'conciseness': 3, 'clarity': 3, 'actionability': 3, 'selected_line_useful': 2, 'additional_code_useful': 2}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 2, 10, 24, 13, 787000)}"
Anonymous,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the use of static variables, inconsistent naming conventions (mixing camelCase and snake_case), a simple conditional structure without optimized logic,  string comparisons using `.equals()`, formatting output with `String.format(""%.0f"", Total_Price)`, and a lack of comprehensive input validation.  These factors combined suggest a less structured and potentially novice approach, which might be more commonly associated with human-written beginner code.  The relatively simple nature of the task and the direct approach to solving it without any modularity or error handling also contribute to the human-written classification.  The absence of common ChatGPT patterns like detailed comments, perfect formatting, and optimized algorithms further strengthens this classification.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `static String Customer_Name;`
    - **Explanation:**  The use of static variables for core program data (customer name, coffee type, etc.) is less common in well-structured code, particularly for simple applications.  ChatGPT tends to favor local variables within the `main` method or, for more complex scenarios, encapsulate data within classes.  Using static variables in this manner is more indicative of a beginner programmer.

- **Key Code Line 2:** `static String Coffee;`
    - **Explanation:** Similar to the previous point, the use of a static variable for `Coffee` suggests a less structured approach.  Furthermore, the inconsistent naming convention (camelCase for `Customer_Name` vs. titleCase for `Coffee`) is more typical of human-written code, where such inconsistencies can arise. ChatGPT is generally more consistent with naming styles.

- **Key Code Line 3:** `if(Coffee.equals(""Espresso"")){`
    - **Explanation:** While perfectly functional, this straightforward chain of `if/else if` statements is less optimized than a `switch` statement or a lookup table, which ChatGPT might favor.  The simplicity of the conditional logic points towards a human approach.

- **Key Code Line 4:** `Total_Price = Price * Number;`
    - **Explanation:**  The code calculates the total price and then applies a discount if applicable.  ChatGPT might be more inclined to calculate the discounted price in one step, potentially incorporating a ternary operator for conciseness.  This two-step calculation suggests a more human-like thought process.

- **Key Code Line 5:** `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`
    - **Explanation:** The use of `String.format` to format the output as an integer value is somewhat unusual for a beginner program. Although ChatGPT can also utilize `String.format`, the overall context of the code with other beginner level code leads towards a human-written classification.

**Comparison to Previous Examples**

- **Static Variables:** The target code uses static variables, a feature absent in both ChatGPT and human-written examples.  This distinction makes it a unique characteristic of the target code, potentially contributing to its classification.

    - **Target Code:** `static String Customer_Name;`
    - **ChatGPT Example 1 (0_Exercise05_21.java):** `double loanAmount = input.nextDouble();` (local variable)
    - **Human Example 1 (1_Exercise04_23.java):** `String name = in.next();` (local variable)


- **Input Handling:** The target code takes input directly within the `main` method without explicit prompts for each input, unlike the examples.  This simpler approach might be associated with human beginners.

    - **Target Code:** `Coffee = Name.nextLine();`
    - **ChatGPT Example 2 (0_Exercise02_21.java):** `System.out.print(""Enter the investment amount: $""); double investmentAmount = scanner.nextDouble();`
    - **Human Example 2 (1_Exercise05_22.java):** `System.out.println(""Enter the loan amount: ""); double loanAmount = in.nextDouble();`

- **Conditional Logic:** The target code uses a chain of `if/else if` statements, similar to the ChatGPT examples. The human examples, particularly 1_Exercise04_23.java, perform more complex calculations, but do not use explicit conditional statements for logic branching.

    - **Target Code:** `if(Coffee.equals(""Espresso"")) { ... }`
    - **ChatGPT Example 1 (0_Exercise05_21.java):** `for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) { ... }` (Looping for different interest rates)


- **Output Formatting:** The target code utilizes `String.format` for output, a feature also observed in the human-written Example 1 (1_Exercise04_23.java), further leaning toward a human classification. ChatGPT examples also frequently use `printf` and `String.format` for formatted output.

    - **Target Code:** `System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");`
    - **Human Example 1 (1_Exercise04_23.java):**  `System.out.printf(""\nHours Worked: %.1f"", hours);`


The combination of these factors, compared to the given examples, provides a strong rationale for the model's classification of the target code as human-written. The simplicity of the code, inconsistent naming conventions, and direct approach without optimizations are all more indicative of human-written beginner code than the more structured and optimized code often generated by ChatGPT.",2025-04-03 02:09:05.269000,
thitivatr.pat@mahidol.edu,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with 100% probability. The classification is likely influenced by the use of structured and modular code design, including well-defined methods, clear variable naming conventions, and the presence of helper methods like `calculateDaysBetweenDates` and `isLeapYear`. The code's logical flow, error checking, and formatting also contribute to its human-written appearance. Additionally, the code's complexity and the thoughtful handling of edge cases, such as leap years, suggest a human touch.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1**: `private String guest_name;`
  - **Explanation**: The use of underscores in variable names (`guest_name`) is a stylistic choice often seen in human-written code, especially when following certain coding standards. This indicates a preference for readability and clarity.

- **Code Line 2**: `System.out.println(""Total Rent: "" + String.format(""%.2f"", total));`
  - **Explanation**: The use of `String.format(""%.2f"", total)` for formatting the output to two decimal places shows attention to detail in presentation, a characteristic of human-written code focusing on user-friendly output.

- **Code Line 3**: `public String toString() {...}`
  - **Explanation**: The implementation of a `toString` method to provide a formatted string representation of the object is a common human practice to enhance code readability and debugging.

- **Code Line 4**: `int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`
  - **Explanation**: The use of a helper method `calculateDaysBetweenDates` to encapsulate complex logic demonstrates modular programming, a practice often associated with human developers aiming for code reusability and maintainability.

- **Code Line 5**: `public static boolean isLeapYear(int year) {...}`
  - **Explanation**: The implementation of a leap year calculation function shows a deep understanding of date handling, which is a nuanced task typically handled by experienced programmers.

**Comparison to Previous Examples**

- **Variable Naming and Style**:
  - **Target Code**: `private String guest_name;`
  - **Example 1 (Human-written)**: `double loanAmount = in.nextDouble();`
  - **Comparison**: Both the target and human-written examples use clear and descriptive variable names. The target code's use of underscores is a stylistic choice that aligns with human-written conventions, unlike the camelCase style seen in the human-written example.

- **Output Formatting**:
  - **Target Code**: `System.out.println(""Total Rent: "" + String.format(""%.2f"", total));`
  - **Example 2 (Human-written)**: `System.out.printf(""Tax is $%.2f"", calcTax(income, brackets[status], rates));`
  - **Comparison**: Both the target and human-written examples use formatted strings to control output precision, indicating attention to detail common in human-written code.

- **Method Implementation**:
  - **Target Code**: `public String toString() {...}`
  - **Example 1 (Human-written)**: `System.out.printf(""\t%.3f"", i);`
  - **Comparison**: The target code's use of a `toString` method for object representation is more sophisticated than the simple formatting seen in the human-written example, showcasing a higher level of abstraction and encapsulation typical of human developers.

- **Modular Code Design**:
  - **Target Code**: `int night = calculateDaysBetweenDates(...);`
  - **Example 2 (Human-written)**: `static double calcTax(double income, int[] bracket, double[] rates) {...}`
  - **Comparison**: Both the target and human-written examples utilize helper methods to encapsulate logic, promoting modularity and code reuse, which are hallmarks of human-written code.

- **Complex Logic Handling**:
  - **Target Code**: `public static boolean isLeapYear(int year) {...}`
  - **Example 2 (Human-written)**: `if (income <= bracket[0]) { tax = income * rates[0]; }`
  - **Comparison**: The target code's leap year logic is more complex and nuanced than the simple conditional logic in the human-written example, reflecting a deeper understanding and handling of edge cases, which is a characteristic of experienced human programmers.

These comparisons highlight the nuanced and sophisticated nature of the target code, aligning it more closely with human-written examples in terms of complexity, modularity, and attention to detail, which supports the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 33, 29, 65000)}"
thitivatr.pat@mahidol.edu,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model classifies the target source code as ChatGPT-generated with 100% probability. This classification is likely influenced by several key features and patterns common in AI-generated code. These include a high level of code organization, comprehensive documentation, and the use of specific coding patterns such as detailed comments, generic method names, and consistent formatting. Additionally, the inclusion of utility methods like `readFile`, `printWords`, and `removeDuplicate`, alongside the verbose and structured style, are indicative of AI-generated code. The use of clear and descriptive comments for each method, explaining its purpose and functionality, also aligns with typical AI-generated patterns.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `public static ArrayList<String> readFile(String file) throws FileNotFoundException {`**
   - **Explanation**: This method signature is indicative of AI-generated code due to its generic and descriptive naming convention (`readFile`) and the inclusion of a specific exception (`FileNotFoundException`). AI models like ChatGPT often generate code with clear, self-explanatory method names and handle exceptions explicitly to ensure robustness.

2. **Code Line: `System.out.println(Arrays.toString(words.toArray()));`**
   - **Explanation**: This line uses `Arrays.toString` to print an array representation of a list, a method often seen in AI-generated code for its simplicity and clarity in outputting collections. The direct use of `toArray` followed by `Arrays.toString` demonstrates a straightforward approach typical in AI-generated examples, prioritizing readability and directness.

3. **Code Line: `public static void sort(ArrayList<String> a) {`**
   - **Explanation**: The `sort` method implements a classic algorithm (Insertion Sort) with a focus on clarity and educational value, often found in AI-generated code. The method's structure, including comments explaining each step, reflects a teaching style, which is a hallmark of AI-generated content.

4. **Code Line: `TreeMap<String, Boolean> map = new TreeMap<>();`**
   - **Explanation**: The use of a `TreeMap` to remove duplicates is a sophisticated choice that suggests AI influence. While effective, this approach is less common in human-written code for simple deduplication tasks, where a `HashSet` might suffice. The choice of `TreeMap` indicates a preference for ordered data structures, a pattern seen in AI-generated code.

5. **Code Line: `for (String word : a) { map.put(word, true); }`**
   - **Explanation**: This loop utilizes a `TreeMap` for deduplication, a choice that shows a blend of algorithmic efficiency and clarity. The pattern of using a map to track unique elements is typical in AI-generated code, where clarity and correctness are prioritized over minimalism.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Target Code**: `public static ArrayList<String> readFile(String file) throws FileNotFoundException {`
  - **Example 1**: `public static void main(String[] args) {`
  - **Analysis**: Both examples feature clear and descriptive method names and robust exception handling or argument checking, which are indicative of AI-generated code. The structured approach and comprehensive handling of potential issues (such as file not found) are common in AI-generated samples.

- **Comparison with ChatGPT-generated Example 2**:
  - **Target Code**: `TreeMap<String, Boolean> map = new TreeMap<>();`
  - **Example 2**: `Map<String, Integer> map = new TreeMap<>();`
  - **Analysis**: Both examples use a `TreeMap` for organizing data, reflecting a preference for ordered collections. This choice highlights the AI's inclination towards maintaining order and structure in data handling, a pattern consistent across AI-generated examples.

- **Comparison with Human-written Example 1**:
  - **Target Code**: `System.out.println(Arrays.toString(words.toArray()));`
  - **Example 1**: `System.out.println(""The strings are not in increasing order..."");`
  - **Analysis**: The target code's use of `Arrays.toString` for printing is more concise and direct compared to the human-written example, which uses plain strings. AI-generated code often opts for utility methods to enhance clarity and reduce verbosity.

- **Comparison with Human-written Example 2**:
  - **Target Code**: `for (String word : a) { map.put(word, true); }`
  - **Example 2**: `for (int i = 0; i < words.length; i++) {`
  - **Analysis**: The target code uses enhanced for-loops and map structures for deduplication, reflecting a higher level of abstraction and modern Java practices compared to the human-written example's traditional for-loop, which suggests AI influence.

Overall, the target source code exhibits features and patterns typical of ChatGPT-generated code, such as clear method documentation, structured algorithm implementations, and modern Java practices, aligning with the AI-generated examples provided.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 34, 59, 367000)}"
thitivatr.pat@mahidol.edu,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The classification model predicts the target source code as ChatGPT-generated with a 100% probability. This prediction is likely influenced by several key features and patterns commonly associated with AI-generated code. These include the structured and methodical approach to solving the problem, the consistent use of comments to explain steps, the clear and concise variable naming conventions, and the typical flow of input-processing-output that is prevalent in AI-generated code. These characteristics align with the patterns observed in the ChatGPT-generated examples provided.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `double[] itemPrices = new double[5];`**
   - **Explanation**: The initialization of an array with a fixed size is a common pattern in AI-generated code. ChatGPT often uses explicit, straightforward data structures, which are easy to manage and explain in code comments.

2. **Code Line: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`**
   - **Explanation**: The use of `Arrays.toString()` for displaying array contents is a typical method found in AI-generated code, showcasing a preference for built-in utility methods that simplify tasks and enhance readability.

3. **Code Line: `double averagePrice = totalPrice / itemPrices.length;`**
   - **Explanation**: The calculation of averages or other aggregate functions using straightforward arithmetic operations is a pattern seen in AI-generated examples. This demonstrates a direct approach to problem-solving.

4. **Code Line: `char grade = 'F';`**
   - **Explanation**: The initialization of variables with default values before conditional logic is applied is a common AI pattern. It indicates a methodical approach to ensure variables are always initialized.

5. **Code Line: `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`**
   - **Explanation**: The use of formatted output with `printf` for displaying results is a feature often employed in AI-generated code to ensure structured and readable output.

**Comparison to Previous Examples**

- **Comparison with Example 1 (ChatGPT-generated):**
  ```java
  for (int i = 1; i <= months; i++) {
      double value = amount * Math.pow(1 + rate / 1200, i);
      System.out.printf(""%-5d\t%.2f\n"", i, value);
  }
  ```
  - **Target Code Excerpt:**
  ```java
  for (int i = 0; i < itemPrices.length; i++) {
      char grade = 'F'; // Default grade
      ...
      System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
  }
  ```
  - **Analysis**: Both examples use loops with formatted output to display results, indicating a structured approach to outputting data, which is characteristic of AI-generated code.

- **Comparison with Example 2 (ChatGPT-generated):**
  ```java
  int best = scores[0];
  for (int i = 1; i < numStudents; i++) {
      if (scores[i] > best) {
          best = scores[i];
      }
  }
  ```
  - **Target Code Excerpt:**
  ```java
  double totalPrice = 0;
  for (double price : itemPrices) {
      totalPrice += price;
  }
  ```
  - **Analysis**: Both snippets involve iterative calculations over arrays, a pattern typical in AI-generated code where straightforward loops are used for aggregations or comparisons.

- **Comparison with Human-written Example 1:**
  ```java
  if (weight > 0 && weight <= 1) {
      shipping += 3.5;
  }
  ```
  - **Target Code Excerpt:**
  ```java
  if (itemPrices[i] < 15) {
      grade = 'A';
  }
  ```
  - **Analysis**: While both use conditional logic, the AI-generated code tends to have more consistent formatting and clearer variable naming, which may contribute to its classification as AI-generated.

- **Comparison with Human-written Example 2:**
  ```java
  double total = 0;
  for (int i = 1; i <= numberOfMonths; i++) {
      total = (investment + total) * (1 + (interestRate / 12));
  }
  ```
  - **Target Code Excerpt:**
  ```java
  double totalPrice = 0;
  for (double price : itemPrices) {
      totalPrice += price;
  }
  ```
  - **Analysis**: Both examples perform iterative calculations, but the AI-generated code is more straightforward and less complex, which is a common trait of AI-generated patterns.

Overall, the target source code exhibits several characteristics typical of AI-generated code, such as structured logic, clear formatting, and the use of utility methods, aligning closely with the ChatGPT-generated examples. These features contribute to the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 36, 29, 614000)}"
thitivatr.pat@mahidol.edu,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classified the target source code as human-written with 100% probability. This classification is likely influenced by several features that are characteristic of human-written code. These include the use of straightforward logic, absence of overly generic structures, and a focus on specific problem-solving rather than generalized, template-like solutions. The code demonstrates a clear, direct approach to solving the problem at hand, with a minimalistic style that is often seen in human-written code. The lack of excessive comments, straightforward naming conventions, and a simple loop structure are indicative of human authorship.

---

**Highlight and Explain Key Code Lines**

1. **Line: `int[][] seat = new int[10][15];`**
   - **Explanation**: This line initializes a two-dimensional array with specific dimensions. The choice of dimensions (10x15) reflects a specific, problem-oriented approach, which is more common in human-written code as opposed to generic or dynamically sized arrays often seen in AI-generated code.

2. **Line: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`**
   - **Explanation**: The use of `System.out.println` with a hardcoded string suggests a straightforward, utilitarian approach to output, typical of human-written code. The concatenation with `""\n""` for a new line is a simple yet effective method that a human might use for quick formatting.

3. **Line: `for(int i = 0;i<seat.length;i++) {`**
   - **Explanation**: This loop iterates over a fixed-size array, which is a common pattern in human-written code. The use of `seat.length` ensures that the loop is adaptable to the array's size, demonstrating a basic understanding of array iteration without unnecessary complexity.

4. **Line: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; } else { System.out.print(""-R ""); TotalReservedSeat++; }`**
   - **Explanation**: The use of a simple conditional to alternate between available and reserved seats is a straightforward logic implementation. The increment of counters within the conditionals is a direct and efficient method to track seat counts, indicative of a human's focus on clarity and simplicity.

5. **Line: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`**
   - **Explanation**: The direct output of computed values using `System.out.println` with string concatenation is a hallmark of human-written code, emphasizing simplicity and directness over complex formatting or abstraction layers.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**:
    ```java
    Map<String, Integer> wordCounts = new HashMap<>();
    ```
  - **Target Snippet**:
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT-generated example uses data structures like `HashMap`, which are versatile but can indicate a more generic, template-driven approach typical of AI-generated code. In contrast, the target code's use of a fixed-size array is more specific and problem-oriented, aligning with human-written patterns.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Snippet**:
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Snippet**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The ChatGPT-generated code uses complex string formatting and manipulation, which can appear more sophisticated but also more generic. The target code's straightforward string output and concatenation reflect a human tendency to prioritize simplicity and directness over intricate formatting.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**:
    ```java
    int n=Integer.parseInt(nyuA);
    ```
  - **Target Snippet**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: Both snippets demonstrate a direct approach to problem-solving with minimal abstraction. The use of loops and simple data manipulation in both examples highlights the human preference for clarity and directness in coding.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**:
    ```java
    int count=0;
    ```
  - **Target Snippet**:
    ```java
    int TotalAvailableSeat = 0;
    ```
  - **Analysis**: The initialization of counters for specific tasks is common in human-written code. Both examples show a clear focus on solving specific problems, with variable names reflecting their purpose, a typical human coding style.

Overall, the target source code's characteristics align closely with human-written examples, emphasizing problem-specific solutions and straightforward logic, which supports the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 37, 37, 49000)}"
thitivatr.pat@mahidol.edu,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",ChatGPT,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The target source code was classified as human-written primarily due to its structural and stylistic features, which are typical of code written by human developers. Key characteristics include the use of intuitive variable names, explicit handling of user input, and a straightforward procedural approach to solving the problem. The code exhibits a simple, direct style with minimal abstraction or complex constructs, which often indicates human authorship. The presence of detailed output formatting and specific user interaction elements also suggests a human touch. Furthermore, the use of clear and logical control flow statements, along with a lack of comments or overly verbose explanations that are often found in AI-generated code, supports the classification.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `static String Customer_Name;`**
   - **Explanation**: The use of capitalized variable names with underscores is a common practice among some human developers for improving readability, even though it's not a standard Java naming convention. This suggests a personal coding style preference typical of human authors.

2. **Code Line: `if(Coffee.equals(""Espresso"")){ Price = 50; }`**
   - **Explanation**: The explicit conditional checks for specific coffee types and assignment of prices reflect a straightforward approach to problem-solving. Human developers often use such direct methods for clarity, especially in simple applications.

3. **Code Line: `System.out.println(""== Welcome to ICT Coffee Shop =="");`**
   - **Explanation**: The inclusion of welcome messages and formatted output indicates an emphasis on user experience, a common focus for human developers creating interactive applications. Such attention to detail in user interaction is a hallmark of human-written code.

4. **Code Line: `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`**
   - **Explanation**: The use of `String.format` for precise control over numerical output formatting demonstrates a nuanced understanding of Java's capabilities. This level of detail in formatting is typically seen in human-written code, where developers adjust output for better readability.

5. **Code Line: `Scanner Name = new Scanner(System.in);`**
   - **Explanation**: The use of `Scanner` for user input is a common practice among Java developers. The variable name `Name` for the `Scanner` object is unconventional and may suggest a human's oversight or a personalized naming style, which is less likely in AI-generated code.

**Comparison to Previous Examples**

- **Variable Naming and Style**:
  - **Target Code**: Uses unconventional capitalized variable names (`Customer_Name`, `Coffee`).
  - **Human-written Example 1**: Uses more standard naming conventions (`name`, `hours`), but also includes personalized elements like package declarations and imports.
  - **Comparison**: The target code's naming style is more consistent with personal human styles rather than AI-generated code, which often follows more standardized conventions.

- **Conditional Logic**:
  - **Target Code**: Uses explicit conditional statements for each coffee type.
  - **ChatGPT-generated Example 1**: Similar conditional logic is used for calculating payments based on interest rates.
  - **Comparison**: While both human and AI examples use conditionals, the target code's simplicity and lack of comments suggest a human preference for straightforward logic without the explanatory verbosity often found in AI-generated code.

- **User Interaction**:
  - **Target Code**: Includes detailed user prompts and formatted output.
  - **Human-written Example 2**: Similarly includes detailed prompts and formatted output for user interaction.
  - **Comparison**: The emphasis on user interaction and output formatting is a shared trait with human-written examples, supporting the classification.

- **Code Comments and Explanations**:
  - **Target Code**: Lacks comments and explanations, focusing on code functionality.
  - **ChatGPT-generated Example 2**: Contains more comments and detailed explanations of code logic.
  - **Comparison**: The absence of comments in the target code aligns more with human-written examples, where developers may rely on code clarity rather than extensive commenting.

The model's classification of the target code as human-written is supported by these comparisons, highlighting the stylistic and structural similarities with human-written examples and the distinct differences from AI-generated samples.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 4}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 38, 32, 566000)}"
thitivatr.pat@mahidol.edu,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including:

* **Object-oriented design:** The use of a class `RoomRentCalculator` with private instance variables, public getter and setter methods, and a `toString()` method suggests a focus on encapsulation and code organization, characteristic of human-written code.
* **Helper methods:** The presence of helper methods like `calculateDaysBetweenDates` and `isLeapYear` demonstrates a modular approach to code design, which is more common in human-written code where maintainability and reusability are priorities.
* **Date handling logic:** The detailed logic for calculating days between dates, including handling leap years, indicates a deeper understanding of the problem and a more deliberate implementation compared to the more straightforward examples in the ChatGPT-generated samples.
* **String manipulation:** The use of `String.split()` and `Integer.parseInt()` for date parsing suggests a human developer's approach to working with string data.
* **Comments:**  While minimal, the presence of a comment explaining the purpose of `calculateDaysBetweenDates` aligns more with human coding practices than the generally less commented ChatGPT-generated code.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `private String guest_name;`
   - **Explanation:** Declaring private instance variables is a common practice in object-oriented programming by human developers for encapsulation and data hiding. ChatGPT-generated code often lacks this level of design.

2. **Key Code Line:** `public static int calculateDaysBetweenDates(...)`
   - **Explanation:** Creating a dedicated helper method for date calculation indicates a modular design approach often employed by human developers.  This promotes code reusability and readability, something not often prioritized by LLMs.

3. **Key Code Line:** `if (isLeapYear(startYear)) { daysInMonth[1] = 29; }`
   - **Explanation:**  Explicitly handling leap years demonstrates attention to detail and a deeper understanding of the date calculation problem.  ChatGPT-generated examples often overlook these edge cases.

4. **Key Code Line:** `String[] in_date = n.getCheck_in().split(""-"");`
   - **Explanation:**  Parsing strings using `split()` is a standard technique employed by human developers. While LLMs can also generate code like this,  the context of date manipulation within a larger class structure makes it a stronger indicator of human code.

5. **Key Code Line:** `System.out.println(""Total Rent: "" + String.format(""%.2f"", total));`
   - **Explanation:**  Using `String.format()` for precise output formatting is a typical human developer practice for improved presentation and control over displayed values.

**Comparison to Previous Examples**

* **Object-oriented design:** The target code uses a class with methods and instance variables. This contrasts with the ChatGPT-generated examples, which are primarily procedural and contained within a single `main` method. For example, the ChatGPT-generated `FutureInvestmentValue` (Example 1) directly performs calculations within the `main` method without employing a class structure:
    ```java
    // ChatGPT-generated (0_Exercise02_21.java)
    public static void main(String[] args) {
        // ... calculations within main ...
    }
    ```
    ```java
    // Target Source Code
    public class RoomRentCalculator {
        // ... instance variables ...
        public static void main(String[] args) {
            // ... using class methods ...
        }
        // ... other methods ...
    }
    ```
    The human-written examples, such as `Exercise05_21` (Example 1), demonstrate a similar object-oriented approach with classes and methods, supporting the human-written classification of the target code.
    ```java
    // Human-written (1_Exercise05_21.java)
    public class Exercise05_21 {
        public static void main(String[] args) {
            // ... code ...
        }
    }
    ```


* **Helper methods:** The target code's `calculateDaysBetweenDates` and `isLeapYear` helper methods are similar in functionality to the `calcTax` method found in the human-written `Exercise08_12` (Example 2). Both showcase modularity and breakdown of complex logic into reusable functions, a feature absent in ChatGPT-generated samples.

    ```java
    // Target Source Code
    public static int calculateDaysBetweenDates(...) { ... }
    ```

    ```java
    // Human-written (1_Exercise08_12.java)
    static double calcTax(double income, int[] bracket, double[] rates) { ... }
    ```

* **Date Handling Logic:** The complexity of date calculation in the target code, particularly the consideration of leap years, is a notable difference from the simpler calculations present in the ChatGPT-generated samples. This complexity aligns more with human-written examples.

* **String Manipulation and Formatting:**  While both human-written and ChatGPT-generated samples can use basic string manipulation, the target code’s combined use of `split()` and `String.format()` within a broader object-oriented context reinforces the classification as human-written. These features appear more strategically used compared to the ChatGPT samples.

In summary, the combination of object-oriented design, helper methods, complex date handling, and specific string manipulation techniques, along with the contextual use of these features, points towards a human-written classification. The comparison to provided examples further strengthens this assessment, highlighting key differences between typical human-written and AI-generated code.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 41, 44, 486000)}"
thitivatr.pat@mahidol.edu,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",Gemini,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to several factors including its simplistic structure, verbose commenting, and the inclusion of a basic insertion sort implementation.  ChatGPT frequently generates code with excessive comments explaining straightforward operations. The `sort` function, while functional, represents a basic sorting algorithm often taught in introductory programming courses, a common characteristic of ChatGPT's code generation.  The file reading and printing mechanisms also lack sophistication, relying on simple `Scanner` and `Arrays.toString` methods.  Furthermore, the use of `TreeMap` for duplicate removal, while technically correct, isn't the most efficient approach, suggesting a lack of optimization often seen in AI-generated code.  The combination of these elements contributed to the high probability of ChatGPT authorship.


---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:**  `/** This method will accept a file name as a parameter, read the textual content in a given file, and return these words in a list of strings. */`
    - **Explanation:** This comment is excessively descriptive for a simple file reading function. ChatGPT often generates such verbose comments, explaining basic functionality that's readily apparent from the code itself. Human-written code tends to have more concise and focused comments.

- **Key Code Line 2:** `public static ArrayList<String> readFile(String file) throws FileNotFoundException {`
    - **Explanation:** Using `ArrayList<String>` directly without considering more abstract `List` interfaces is a common pattern in ChatGPT code. Human-written code often prefers the interface for flexibility.

- **Key Code Line 3:**  `// Move elements of a[0..i-1] that are greater than current to one position ahead`
    - **Explanation:** This comment within the sorting algorithm explains a fundamental step of insertion sort.  Such overly detailed explanations are common in ChatGPT-generated code but less so in human-written code, which assumes a certain level of familiarity with basic algorithms.

- **Key Code Line 4:** `a.set(j + 1, current);`
    - **Explanation:** While not inherently wrong, setting the value after the while loop in the insertion sort is a common artifact of ChatGPT generated code.

- **Key Code Line 5:** `// Use a TreeSet to remove duplicates while maintaining the order`
    - **Explanation:** This comment is misleading. The code actually uses a `TreeMap`, not a `TreeSet`.  This kind of inconsistency or minor inaccuracy in comments is occasionally seen in ChatGPT outputs.


**Comparison to Previous Examples**

- **Target Code:** `public static void printWords(ArrayList<String> words) { System.out.println(Arrays.toString(words.toArray())); }`
    - **ChatGPT Example 1 (0_WordDisplay.java):** `for (String word : words) { System.out.println(word); }`
    - **Explanation:** Both the target code and the ChatGPT example print the words.  However, the target code converts the `ArrayList` to an array before printing using `Arrays.toString()`, a less efficient but sometimes seen approach in ChatGPT generated code. The ChatGPT example uses a more standard loop for printing.  Both approaches, while functionally correct, indicate differing levels of optimization.  The target code’s approach might indicate a lack of deep understanding of Java’s collection framework, which aligns with ChatGPT's tendency to generate code with less sophisticated methods.

- **Target Code:**  `// Insertion Sort in descending order (b comes before a)`
    - **ChatGPT Example 2 (0_Exercise21_07.java):** `// Sort the list`
    - **Explanation:** The target code's comment explicitly mentions ""Insertion Sort,"" a detail often provided by ChatGPT when generating code for basic algorithms. The ChatGPT example comment is more generic, only stating the action, similar to how a human might comment. This further strengthens the classification of the target code as ChatGPT-generated.

- **Target Code:** `TreeMap<String, Boolean> map = new TreeMap<>();`
    - **Human Example 2 (1_Exercise21_07.java):** `Map<String, Integer> map = new HashMap<>();`
    - **Explanation:** While both use maps, the target code opts for a `TreeMap` with boolean values just to track uniqueness.  The human-written example utilizes a `HashMap` and counts word occurrences, showcasing a more optimized approach.  A human developer would likely opt for a more efficient way of removing duplicates like using a `HashSet` directly.

- **Target Code:**  `while(in.hasNext()) { ... }`
    - **Human Example 1 (1_Exercise12_21.java):**  `while ((nextStr = bufferedReader.readLine()) != null) { ... }`
    - **Explanation:** Both read from files. The human-written example uses a `BufferedReader`, considered more efficient for file I/O in Java.  The target code's simple use of `Scanner` for reading words aligns with ChatGPT's tendency to generate simpler, less optimized solutions.


These comparisons, highlighting the simplistic implementations, verbose comments, and structural patterns, corroborate the model's high confidence in classifying the target code as ChatGPT-generated.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 42, 23, 583000)}"
thitivatr.pat@mahidol.edu,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its straightforward, textbook-like structure and common coding practices often observed in generated code.  The code adheres to basic programming principles but lacks the nuances and complexities often found in human-written code. Specifically, the explicit commenting style, sequential task-based structure, and formulaic approach to problem-solving are indicative of generated code. The use of `Arrays.toString()` for displaying the array is also a frequent pattern in ChatGPT output.  The grading logic, while functional, is simplistic and lacks the potential optimizations or error handling a human might incorporate. The overall impression is of code produced by following clear instructions, rather than creatively crafted by a human developer.  The absence of more sophisticated programming techniques or personalized touches reinforces this assessment.

---

**Highlight and Explain Key Code Lines**:

1. **Key Code Line**: `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`
    - **Explanation**: This comment is overly descriptive and explains something immediately obvious from the code itself.  ChatGPT often over-comments, explaining basic declarations and operations, a habit less common in experienced human programmers.

2. **Key Code Line**: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
    - **Explanation**:  Using `Arrays.toString()` directly in a `println` statement is a common pattern seen in ChatGPT code for displaying array contents. Human developers might prefer a more customized output format or use a loop for more control.

3. **Key Code Line**:  `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
    - **Explanation**:  Again, the comment is overly simplistic and states the obvious. Human programmers rarely comment on such basic calculations.

4. **Key Code Line**: `char grade = 'F'; // Default grade`
    - **Explanation**: While not incorrect, declaring a default grade and then overwriting it based on conditions is a pattern often observed in generated code.  A human might integrate the default directly into the conditional logic.

5. **Key Code Line**: `// Close scanner`
    - **Explanation**: This type of comment before closing resources is often seen in generated code.  Human developers often omit this comment as it's standard practice.


**Comparison to Previous Examples**:

- **Target Code vs. ChatGPT Example 1 (CDValue.java):** Both share a similar level of detailed, sometimes redundant, comments. For example,  ""Prompt the user to enter..."" in Example 1 mirrors the explicit commentary in the target code. Both also follow a straightforward linear structure, executing tasks sequentially.

    ```java
    // Target Code
    double[] itemPrices = new double[5]; // Array to store the prices of 5 items

    // Example 1
    // Prompt the user to enter the initial amount, annual percentage yield, and number of months
    ```

- **Target Code vs. ChatGPT Example 2 (AssignGrades.java):**  Both rely heavily on `Scanner` for input and use loops for processing data.  The task-based structure and simplistic grading logic in the Target Code are mirrored in the grade assignment section of Example 2.

    ```java
    // Target Code
    for (int i = 0; i < itemPrices.length; i++) {
        // ... grade assignment logic ...
    }

    // Example 2
    for (int i = 0; i < numStudents; i++) {
        // ... grade assignment logic ...
    }

    ```

- **Target Code vs. Human Example 1 (Exercise03_18.java):** The human example is less verbose in its comments and utilizes `return` to exit early in a specific condition. This kind of flow control is less common in generated code.  The Target code lacks such nuanced logic.

    ```java
    // Target Code (No early exit)
    if (itemPrices[i] < 15) { ... }

    // Example 1 (Early exit)
    if (weight > 50) {
            System.out.println(""The package cannot be shipped."");
            in.close();
            return;
    }
    ```

- **Target Code vs. Human Example 2 (Exercise05_30.java):**  The human example has less structured commenting and combines multiple operations within the loop without explicit explanations for every step, unlike the Target code.

    ```java
    // Target Code (Separate calculations, commented)
    double totalPrice = 0;
    for (double price : itemPrices) {
        totalPrice += price;
    }
    double averagePrice = totalPrice / itemPrices.length; // Compute the average


    // Example 2 (Combined calculations within loop)
    double total = 0;
    for (int i = 1; i <= numberOfMonths; i++) {
        total = (investment + total) * (1 + (interestRate / 12));
    }
    ```


The consistent presence of features typically associated with ChatGPT-generated code across multiple aspects – comments, structure, and logic – strengthens the model's classification. The differences between the Target Code and human-written examples further highlight the characteristics that likely led to the prediction.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 4, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 42, 54, 784000)}"
thitivatr.pat@mahidol.edu,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",Gemini,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Simplicity and straightforwardness:** The code has a clear purpose (displaying a seating layout) and achieves it without unnecessary complexity.  This contrasts with the ChatGPT examples, which tend to be more elaborate solutions.
* **Specific purpose and limited scope:** The code solves a very narrow task, rather than a more general programming exercise like the ChatGPT examples.
* **Lack of common ChatGPT patterns:** The code avoids common patterns observed in generated code, such as extensive use of libraries, complex data structures, or error handling beyond basic print statements. 
* **Concise variable naming:**  Variable names like `seat`, `TotalAvailableSeat`, and `TotalReservedSeat` are descriptive and pragmatic.  
* **Simple data structures:** The use of a 2D array is appropriate for the task and avoids more complex data structures often seen in generated code.
* **Minimal use of built-in functions:** The code primarily relies on basic loops and conditional statements, rather than leveraging a variety of library functions.


---

**Highlight and Explain Key Code Lines**

1. **`int[][] seat = new int[10][15];`**:  This line declares a 2D array to represent the theater seats.  This simple, direct approach is characteristic of human-written code for such a straightforward task. ChatGPT might opt for a more dynamic or object-oriented approach even for a simple problem.
2. **`System.out.print(""S""+(j+1)+"""");`**: This line displays seat numbers using string concatenation. While simple, it's a typical human approach. ChatGPT might be inclined to format strings more elaborately.
3. **`if(j%2==0) { ... } else { ... }`**: This simple even/odd check is a concise way to alternate between available and reserved seats. ChatGPT might overengineer a solution using more complex logic.
4. **`System.out.println(""Total Available Seats: ""+TotalAvailableSeat);`**: This line displays the total number of available seats using straightforward string concatenation. The simplicity reinforces the human-written assessment.
5. **`TotalAvailableSeat++;`**: This simple incrementing of the seat count is typical of human-written code focused on efficiency within a limited scope. ChatGPT might use a more verbose approach or a dedicated function.


**Comparison to Previous Examples**

* **Simplicity vs. Generality (ChatGPT Example 1 - WordCounter):** The target code focuses on a specific, narrow task (displaying seats). In contrast, Example 1 addresses a more general problem (counting words in a file). This generality often leads to more complex code with error handling and library usage, typical of ChatGPT.

```java
// Target Code
int[][] seat = new int[10][15]; 

// ChatGPT Example 1 (WordCounter)
Map<String, Integer> wordCounts = new HashMap<>();
try (Scanner input = new Scanner(file)) { ... } catch (FileNotFoundException e) { ... }
```

* **Conciseness vs. Verbosity (ChatGPT Example 2 - NineHeadsAndTails):** The target code is concise in its output. Example 2, while relatively straightforward, uses `String.format` and `replace` for binary string manipulation, demonstrating ChatGPT's tendency towards slightly more verbose methods.


```java
// Target Code
System.out.print(""S""+(j+1)+"""");

// ChatGPT Example 2 (NineHeadsAndTails)
String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
```

* **Pragmatism vs. Structure (Human Example 1 - p03644.java):** While both the target code and Human Example 1 have some structural similarities (use of loops and conditionals), the target code's simple layout is more characteristic of quickly written human code. Example 1 has unconventional indentation and commenting styles, hinting at human-written but potentially less organized code.


```java
// Target Code
for(int i = 0;i<seat.length;i++) { ... }

// Human Example 1 (p03644.java)
for(int i=1;i<=n;i++){ ... }
```

* **Directness vs. Input Handling (Human Example 2 - p03102.java):** The target code has no user input. Human Example 2 uses `Scanner` to handle input, adding a layer of complexity that's absent in the target code. This absence reinforces the human-written classification for the target code, as it suggests a specific, pre-defined purpose rather than a general-purpose solution.

```java
// Target Code
int[][] seat = new int[10][15];

// Human Example 2 (p03102.java)
Scanner sc = new Scanner(System.in);
int n = Integer.parseInt(sc.next());
```

The combination of these factors—simplicity, narrow scope, absence of complex ChatGPT patterns, and direct coding style—strongly suggests that the target code is human-written. The comparison with both the ChatGPT-generated and human-written examples highlights these distinctions and supports the model's classification.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 43, 40, 737000)}"
thitivatr.pat@mahidol.edu,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target source code as Human-written due to several factors, including the presence of a seemingly arbitrary discount rule based on the number of cups purchased (`if(Number > 5)`), the somewhat inconsistent use of coding style (e.g., inconsistent naming conventions `Customer_Name` vs. `Coffee`), and the simplistic program structure that resembles beginner-level code.  The lack of sophisticated error handling and input validation also suggests a less refined approach than what a large language model might produce.  The overall code appears more aligned with a beginner human programmer learning basic programming concepts.  Additionally, the prompt-driven, structured output format typical of LLMs is less evident. The code calculates and prints a discount, but doesn't explain *why* there is a discount which would be more typical of ChatGPT.


---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `static String Customer_Name;`
    - **Explanation**: Inconsistent naming convention (`Customer_Name` instead of `customerName`) is more common in human-written code where stylistic consistency might be less prioritized, especially among beginners. LLMs tend to be more consistent in following standard coding style guidelines.

- **Key Code Line 2**:  `if(Coffee.equals(""Espresso"")){`
    - **Explanation**:  The sequential `if/else if` structure for handling coffee types is simple and direct.  While LLMs can produce such code, they often opt for slightly more optimized or abstract approaches like using `switch` statements or data structures (maps) to store price information, especially when dealing with multiple options. This simple approach is more characteristic of a beginner human programmer.

- **Key Code Line 3**:  `System.out.println(""Don't have this menu"");`
    - **Explanation**: The informal language ""Don't have this menu"" in the error message appears less polished than what an LLM would generate. LLMs usually aim for more formal and informative error messages.

- **Key Code Line 4**: `double Total_Price = Price * Number;`
    - **Explanation**:  Again, inconsistent naming convention (`Total_Price` instead of `totalPrice`).  LLMs tend to maintain consistent variable naming practices.

- **Key Code Line 5**:  `if(Number > 5) {`
    - **Explanation**: This specific discount condition (discount for more than 5 cups) seems somewhat arbitrary and lacks a clear justification within the code's context.  While LLMs can generate code with discounts, they are often defined with clearer prompts or based on more logical criteria. This arbitrary rule appears more likely to be human-defined.


**Comparison to Previous Examples**


- **Comparison 1: String Formatting**  The target code and the Human-written Example 1 (1_Exercise04_23.java) both use `printf` for formatted output:

    **Target Code:**
    ```java
    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
    ```

    **Human-written Example 1 (1_Exercise04_23.java):**
    ```java
    System.out.printf(""\n\nNet Pay: $%.2f"", netPay);
    ```

    Both snippets showcase a similar approach to formatting output, which aligns with common practices in human-written Java code. While LLMs also use formatted output, they might demonstrate more variation and possibly employ more advanced techniques if the context requires it.


- **Comparison 2:  Scanner usage** The target code and the ChatGPT-generated Example 2 (0_Exercise02_21.java) both utilize the `Scanner` class for user input:


    **Target Code:**
    ```java
    Scanner Name = new Scanner(System.in);
		Customer_Name = Name.nextLine();
    ```

    **ChatGPT-generated Example 2 (0_Exercise02_21.java):**
    ```java
    Scanner scanner = new Scanner(System.in);
    System.out.print(""Enter the investment amount: $"");
    double investmentAmount = scanner.nextDouble();
    ```

    Both use `Scanner` for input, but the target code doesn't have prompt messages  which are quite common in ChatGPT-generated examples.  This difference suggests that the prompt for the target code (if any) was less detailed than those used to generate the ChatGPT examples.

- **Comparison 3: Calculation Logic**: The target code and the ChatGPT-generated example 1 both perform calculations:

    **Target Code:**
    ```java
    double Total_Price = Price * Number;
    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
    ```

    **ChatGPT-generated Example 1 (0_Exercise05_21.java):**
    ```java
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));
    double totalPayment = monthlyPayment * numberOfYears * 12;
    ```

    While both snippets show calculations, the target code's discount logic (`if(Number > 5)`) is significantly simpler than the financial calculation in the ChatGPT example. This difference contributes to the model's classification as the target code appearing more simplistic and potentially human-authored.


These comparisons highlight the subtle differences between the target code and the provided examples, ultimately leading to the model's prediction of human-written code.  The target code's simplicity, inconsistent style, and somewhat arbitrary logic align more with patterns observed in beginner human code than the more structured and often optimized code generated by large language models.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 3, 'additional_code_useful': 3}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 2, 44, 27, 877000)}"
akara@akara.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",ChatGPT,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The classification model determined that the target source code is 100% human-written. Key influential features contributing to this classification include the use of a well-structured object-oriented approach, with encapsulation of data through private fields and getter/setter methods, and the presence of a detailed helper method for calculating days between dates. The code demonstrates a clear understanding of Java programming principles, such as using constants, handling user input, and implementing utility functions. These characteristics align with patterns typically found in human-written code, which often emphasizes clarity, structure, and reusability.

---

**Highlight and Explain Key Code Lines**

1. **Encapsulation with Private Fields and Getters/Setters**
   ```java
   private String guest_name;
   private final double price = 900.5;
   ```
   - **Explanation**: The use of private fields with getter and setter methods is a hallmark of object-oriented programming, emphasizing encapsulation and data hiding. This pattern is a typical practice among human developers to ensure that the internal state of an object is not directly accessible from outside the class.

2. **Utility Method for Date Calculation**
   ```java
   public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay, int endYear, int endMonth, int endDay) {
   ```
   - **Explanation**: The presence of a well-defined utility method to calculate the number of days between two dates shows an understanding of modular code design. This approach is common in human-written code, where complex logic is abstracted into separate methods to improve readability and maintainability.

3. **Leap Year Calculation Logic**
   ```java
   public static boolean isLeapYear(int year) {
       return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   }
   ```
   - **Explanation**: The implementation of a leap year calculation function demonstrates an understanding of algorithmic logic and edge cases, which is a typical feature in human-written code. This function is concise and accurately captures the rules governing leap years.

4. **Formatted Output with String.format**
   ```java
   System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
   ```
   - **Explanation**: The use of `String.format` for formatting output shows attention to detail in presenting numerical data, a common practice among human developers to ensure that output is user-friendly and professional.

5. **Object Instantiation and Method Calls**
   ```java
   RoomRentCalculator n = new RoomRentCalculator();
   n.setGuest_name(in.nextLine());
   ```
   - **Explanation**: Instantiating an object and using setter methods to populate its fields indicates a structured approach to object-oriented programming. This pattern is characteristic of human-written code, where objects are used to model real-world entities and their interactions.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**
  - **Example Code**:
    ```java
    double futureInvestmentValue = investmentAmount * Math.pow(1 + monthlyInterestRate, numberOfYears * 12);
    ```
  - **Target Code**:
    ```java
    double total = night * n.getPrice();
    ```
  - **Analysis**: Both snippets involve calculations, but the target code encapsulates the price within an object and uses getter methods, a practice more aligned with human-written code emphasizing encapsulation.

- **Comparison with ChatGPT-generated Example 2**
  - **Example Code**:
    ```java
    for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
    ```
  - **Target Code**:
    ```java
    for(int i = 0; i < in_date.length; i++) {
        int_in[i] = Integer.parseInt(in_date[i]);
    }
    ```
  - **Analysis**: The target code uses a for-loop for parsing and converting date components, demonstrating a lower-level operation typical of human-written code, whereas the example focuses on iterating over interest rates with a more straightforward pattern.

- **Comparison with Human-written Example 1**
  - **Example Code**:
    ```java
    double monthlyPayment = loanAmount * monthlyInterestRate / (1 - 1 / Math.pow(1 + monthlyInterestRate, numYears * 12));
    ```
  - **Target Code**:
    ```java
    int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
    ```
  - **Analysis**: Both snippets show complex calculations, but the target code encapsulates this logic within a utility method, showcasing modular design, a common trait in human-written code.

- **Comparison with Human-written Example 2**
  - **Example Code**:
    ```java
    double tax = bracket[0] * rates[0] + (bracket[1] - bracket[0]) * rates[1] + (income - bracket[1]) * rates[2];
    ```
  - **Target Code**:
    ```java
    if (isLeapYear(startYear)) {
        daysInMonth[1] = 29;
    }
    ```
  - **Analysis**: Both snippets involve conditional logic to handle specific cases (tax brackets vs. leap years). The target code's handling of leap years through a dedicated function reflects human-written code's attention to edge cases and detail. 

These comparisons highlight the structured and modular approach of the target source code, aligning with the characteristics of human-written code and supporting the classification decision.","{'ratings': {'overall': 1, 'conciseness': 3, 'clarity': 5, 'actionability': 1, 'selected_line_useful': 1, 'additional_code_useful': 1}, 'feedback_additional': 'It seems that it does not know which part of the code are provided.', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 28, 24, 908000)}"
akara@akara.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",ChatGPT,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The target source code is classified as ChatGPT-generated with a 100% probability. This classification can be attributed to several key features and patterns often associated with content generated by AI models like ChatGPT. These include a structured and methodical approach to problem-solving, comprehensive comments explaining the code, and the use of specific coding patterns such as the use of `TreeMap` for removing duplicates or `Arrays.toString()` for printing arrays. Additionally, the code demonstrates a high level of consistency and clarity in its logic and structure, which are common traits in AI-generated code due to its training on well-structured datasets.

---

**Highlight and Explain Key Code Lines**

- **Code Line 1: `public static ArrayList<String> readFile(String file) throws FileNotFoundException`**
  - **Explanation**: This method signature is indicative of AI-generated code due to its explicit exception declaration (`throws FileNotFoundException`) and its clear, descriptive naming convention (`readFile`). AI models often generate code that adheres to best practices, such as handling exceptions and using descriptive names.
  
- **Code Line 2: `System.out.println(Arrays.toString(words.toArray()));`**
  - **Explanation**: The use of `Arrays.toString()` to print an array in a single line is a common pattern in AI-generated code. It reflects an understanding of Java's utility methods for efficient operations, which is typical of AI-generated code trained on comprehensive datasets.

- **Code Line 3: `while (j >= 0 && a.get(j).compareTo(current) < 0) {`**
  - **Explanation**: The implementation of insertion sort in descending order is methodically structured, reflecting a textbook-like approach to algorithm implementation. This structured approach is characteristic of AI-generated code.

- **Code Line 4: `TreeMap<String, Boolean> map = new TreeMap<>();`**
  - **Explanation**: The use of `TreeMap` to remove duplicates while maintaining order is a sophisticated approach that demonstrates an understanding of Java's collection framework. This choice reflects the AI's ability to apply advanced data structures appropriately.

- **Code Line 5: `a.addAll(map.keySet());`**
  - **Explanation**: This line showcases an efficient way to collect unique elements from a `TreeMap`. The use of `keySet()` to retrieve unique keys is a pattern that reflects efficiency and clarity, often seen in AI-generated code due to its exposure to optimized coding patterns.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1 (0_WordDisplay.java):**
  - **Example Snippet**: 
    ```java
    Collections.sort(words);
    ```
  - **Target Snippet**: 
    ```java
    public static void sort(ArrayList<String> a) {
      // Insertion Sort in descending order
    }
    ```
  - **Analysis**: Both snippets demonstrate a clear understanding of sorting algorithms. The target code's use of insertion sort in descending order, with detailed comments, mirrors the structured and comprehensive style seen in the example's use of `Collections.sort()`.

- **Comparison with ChatGPT-generated Example 2 (0_Exercise21_07.java):**
  - **Example Snippet**: 
    ```java
    Map<String, Integer> map = new TreeMap<>();
    ```
  - **Target Snippet**: 
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```
  - **Analysis**: The use of `TreeMap` in both examples highlights a common pattern in AI-generated code where advanced data structures are employed to solve problems efficiently. This similarity supports the classification of the target code as AI-generated.

- **Comparison with Human-written Example 1 (1_Exercise12_21.java):**
  - **Example Snippet**: 
    ```java
    try (BufferedReader bufferedReader =
                 new BufferedReader(new FileReader(""src\\ch_12\\exercise12_21\\SortedStrings.txt""))) {
    ```
  - **Target Snippet**: 
    ```java
    Scanner in = new Scanner(new File(file));
    ```
  - **Analysis**: While both snippets involve file reading, the target code uses `Scanner`, which is simpler and more direct for basic file reading tasks. The human-written example's use of `BufferedReader` suggests a more manual handling of resources, contrasting with the AI's preference for simplicity and efficiency.

- **Comparison with Human-written Example 2 (1_Exercise21_07.java):**
  - **Example Snippet**: 
    ```java
    Map<String, Integer> map = new HashMap<>();
    ```
  - **Target Snippet**: 
    ```java
    TreeMap<String, Boolean> map = new TreeMap<>();
    ```
  - **Analysis**: The target code's use of `TreeMap` for maintaining order contrasts with the human-written example's use of `HashMap`, which does not maintain order. This difference highlights the AI's tendency to use data structures that offer additional functionality, such as ordering, supporting the AI-generated classification.

Overall, the target source code's methodical structure, use of advanced data structures, and adherence to best practices align closely with patterns observed in the ChatGPT-generated examples, reinforcing the model's classification decision.","{'ratings': {'overall': 4, 'conciseness': 4, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 4, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 31, 37, 703000)}"
akara@akara.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",ChatGPT,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model classified the target source code as ChatGPT-generated with 100% probability. This classification likely stems from several key features often found in AI-generated code. These include a structured and consistent commenting style, comprehensive task breakdowns, and a clear logical flow. The target code contains distinct sections for input, processing, and output, which are typical of AI-generated code. Additionally, the use of modern Java features like `Arrays.toString()` for array display and the consistent use of `printf` for formatted output are indicative of AI-generated patterns. These elements, combined with the overall structure and clarity of the code, strongly suggest a ChatGPT origin.

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`
   - **Explanation**: The comment here is explicit and detailed, explaining the purpose of the array. This is characteristic of AI-generated code, which often includes such explanatory comments to enhance readability and understanding.

2. **Code Line**: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
   - **Explanation**: The use of `Arrays.toString()` for displaying arrays is a modern Java feature that AI models like ChatGPT frequently employ for concise and efficient code. This indicates a level of sophistication in code generation typical of AI.

3. **Code Line**: `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
   - **Explanation**: The inline comment explaining the computation of the average is a common practice in AI-generated code, which often includes comments to clarify operations, even when they are straightforward.

4. **Code Line**: `char grade = 'F'; // Default grade`
   - **Explanation**: The assignment of a default value with an explanatory comment is a pattern seen in AI-generated code. It reflects a tendency to initialize variables with sensible defaults and document the rationale, enhancing code clarity.

5. **Code Line**: `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`
   - **Explanation**: The use of `printf` for formatted output is a sign of well-structured code, typical of AI-generated outputs. It demonstrates an understanding of Java's formatting capabilities, often utilized by AI to produce polished and professional-looking code.

**Comparison to Previous Examples**

- **Comparison to ChatGPT-generated Example 1**:
  - **Target Code**: `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
  - **Example 1 Code**: `System.out.println(""Month\tCD Value"");`
  - **Analysis**: Both snippets demonstrate a clear and structured approach to outputting data, with the target code using `Arrays.toString()` for efficiency. This reflects a common AI pattern of leveraging Java's built-in methods for concise code.

- **Comparison to ChatGPT-generated Example 2**:
  - **Target Code**: `char grade = 'F'; // Default grade`
  - **Example 2 Code**: `char grade;`
  - **Analysis**: The target code initializes the `grade` variable with a default value and includes a comment, whereas the example code does not. This difference highlights the AI's tendency to provide default values and explanatory comments for clarity.

- **Comparison to Human-written Example 1**:
  - **Target Code**: `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
  - **Example 1 Code**: `double weight = in.nextDouble();`
  - **Analysis**: The target code includes an explanatory comment, unlike the human-written example. This suggests the AI's propensity for detailed commenting to explain even simple operations.

- **Comparison to Human-written Example 2**:
  - **Target Code**: `System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);`
  - **Example 2 Code**: `System.out.println(""After the "" + numberOfMonths + ""th month, "" + ""the account value is "" + total);`
  - **Analysis**: The target code uses `printf` for formatted output, whereas the human-written example uses `println`. This reflects the AI's preference for formatted output to enhance readability and precision.

The similarities between the target code and the ChatGPT-generated examples, especially in terms of structure, commenting, and use of modern Java features, strongly support the classification as ChatGPT-generated. These patterns are less prevalent in the human-written examples, further reinforcing the model's decision.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 4, 'actionability': 5, 'selected_line_useful': 3, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 33, 27, 106000)}"
akara@akara.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",ChatGPT,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model classifies the target source code as 100% human-written, primarily due to its distinctive characteristics that are often associated with human coding styles. These characteristics include a straightforward and logical structure, minimal use of advanced abstractions or optimizations, and a clear, direct approach to solving the problem. The code lacks the stylistic patterns often seen in AI-generated code, such as overly general solutions, unnecessary complexity, or verbose comments explaining simple logic. Additionally, the variable naming and loop structures reflect a practical and direct approach typical of human programmers. 

---

**Highlight and Explain Key Code Lines**

1. **Code Line**: `int[][] seat = new int[10][15];`
   - **Explanation**: This line defines a 2D array with fixed dimensions. Human-written code often includes hard-coded values for simplicity and directness, especially in smaller projects or exercises. This reflects a specific understanding of the problem's requirements without over-generalizing, which is a common human trait.

2. **Code Line**: `System.out.println(""==MUTheater Seat Layout==""+""\n"");`
   - **Explanation**: The use of string concatenation for formatting output is straightforward and lacks the finesse of more complex formatting functions that AI might use. This approach is typical of human coders who prioritize simplicity over optimization in non-critical code sections.

3. **Code Line**: `for(int i = 0;i<seat.length;i++) {`
   - **Explanation**: The loop structure is simple and clear, iterating over a fixed size array. Human programmers often use basic loop constructs without the need for advanced iteration techniques, especially when the task is straightforward.

4. **Code Line**: `if(j%2==0) { System.out.print(""-A ""); TotalAvailableSeat++; }`
   - **Explanation**: This conditional logic is straightforward, checking for even indices to determine seat availability. The simplicity of this logic, without additional abstraction or encapsulation, is indicative of human coding, focusing on direct problem-solving.

5. **Code Line**: `System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);`
   - **Explanation**: The output statement directly concatenates strings and variables, a common practice among human coders for quick and clear output. This direct approach lacks the complexity or over-engineering that might be present in AI-generated code.

**Comparison to Previous Examples**

- **Comparison with ChatGPT-generated Example 1**:
  - **Example Snippet**: 
    ```java
    Map<String, Integer> wordCounts = new HashMap<>();
    ```
  - **Target Snippet**:
    ```java
    int[][] seat = new int[10][15];
    ```
  - **Analysis**: The ChatGPT-generated example uses data structures like `HashMap` that suggest more generalized and reusable solutions, while the target code uses a simple 2D array with fixed dimensions, reflecting a more direct and specific approach typical of human-written code.

- **Comparison with ChatGPT-generated Example 2**:
  - **Example Snippet**: 
    ```java
    String binaryString = String.format(""%9s"", Integer.toBinaryString(number)).replace(' ', '0');
    ```
  - **Target Snippet**:
    ```java
    System.out.println(""==MUTheater Seat Layout==""+""\n"");
    ```
  - **Analysis**: The AI-generated code uses advanced string formatting and manipulation, while the target code uses basic string concatenation. This simplicity in handling strings is more aligned with human-written code, where the focus is on clarity and directness.

- **Comparison with Human-written Example 1**:
  - **Example Snippet**:
    ```java
    int max=0; int res=0;
    ```
  - **Target Snippet**:
    ```java
    int TotalAvailableSeat = 0; int TotalReservedSeat = 0;
    ```
  - **Analysis**: Both examples initialize multiple variables in a straightforward manner. This is characteristic of human-written code, focusing on solving the problem at hand without unnecessary complexity.

- **Comparison with Human-written Example 2**:
  - **Example Snippet**:
    ```java
    for(int i=0;i<n;i++) {
    ```
  - **Target Snippet**:
    ```java
    for(int i = 0;i<seat.length;i++) {
    ```
  - **Analysis**: The loop structures in both examples are simple and direct, iterating over collections or arrays. This reflects a common human approach to iteration, emphasizing clarity and simplicity.

The similarities in straightforward logic, simple data structures, and direct problem-solving strategies support the classification of the target source code as human-written. These features are consistent with the patterns observed in the human-written examples, reinforcing the model's decision.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 1, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 34, 7, 154000)}"
akara@akara.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",ChatGPT,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The target source code was classified as human-written with a 100% probability by the model. Several features likely contributed to this classification, including variable naming conventions, the structure of the control flow, and the overall coding style. The use of distinct and non-generic variable names, such as `Customer_Name` and `Coffee`, suggests a personalized touch often seen in human-written code. Additionally, the code uses straightforward conditional checks with `if-else` statements and applies a logical flow that aligns with practical problem-solving approaches typical of human developers. The formatting and presentation of the output, along with the application of discounts, further indicate a human's nuanced understanding of the task at hand.

---

**Highlight and Explain Key Code Lines**

1. **Code Line: `static String Customer_Name;`**
   - **Explanation:** The use of a descriptive variable name like `Customer_Name` instead of a generic name (e.g., `name`) suggests a human's inclination to make the code self-explanatory. Human developers often prioritize readability and maintainability, which is reflected in clear and specific variable naming.

2. **Code Line: `if(Coffee.equals(""Espresso"")){`**
   - **Explanation:** The conditional structure here is straightforward and practical, demonstrating a typical human approach to solving a problem. The use of `equals` for string comparison is a common practice among experienced programmers, indicating familiarity with Java's nuances.

3. **Code Line: `System.out.println(""== Welcome to ICT Coffee Shop ==\n"");`**
   - **Explanation:** This line reflects a personalized touch and attention to detail, typical of human authors. The inclusion of decorative text in the output suggests a human's effort to enhance user interaction, which is less commonly seen in AI-generated code.

4. **Code Line: `Total_Price = Total_Price-(Total_Price*0.1);`**
   - **Explanation:** The manual calculation of a discount demonstrates a practical, straightforward approach to implementing business logic. Humans often employ such direct arithmetic operations when implementing simple financial calculations.

5. **Code Line: `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`**
   - **Explanation:** The use of `String.format` for formatting output shows attention to detail in presentation, which is a hallmark of human-written code. Formatting is often used by humans to ensure the output is user-friendly and professional.

**Comparison to Previous Examples**

- **Variable Naming:**
  - **Target Code:** `static String Customer_Name;`
  - **Human-written Example 1:** `String name = in.next();`
  - **Comparison:** Both use descriptive variable names (`Customer_Name` vs. `name`), emphasizing clarity and readability. AI-generated examples tend to use more generic names, like `input` or `scanner`.

- **Conditional Logic:**
  - **Target Code:** `if(Coffee.equals(""Espresso"")){`
  - **Human-written Example 2:** `if (someCondition) {`
  - **Comparison:** The use of `equals` for string comparison in both the target and human-written examples demonstrates a common pattern among human programmers. AI-generated examples often use simpler conditions or less nuanced logic.

- **Output Formatting:**
  - **Target Code:** `System.out.println(""== Welcome to ICT Coffee Shop ==\n"");`
  - **Human-written Example 1:** `System.out.print(""\nEmployee Name: "" + name);`
  - **Comparison:** Both snippets show an effort to format output in a user-friendly manner, which is more prevalent in human-written code. AI-generated code may lack this level of detail in presentation.

- **Arithmetic Operations:**
  - **Target Code:** `Total_Price = Total_Price-(Total_Price*0.1);`
  - **Human-written Example 2:** `double totalPayment = monthlyPayment * numYears * 12;`
  - **Comparison:** Direct arithmetic calculations are commonly found in both human-written and AI-generated code. However, the context and application of these calculations in the target code reflect a practical business logic typical of human authors.

- **Attention to Detail:**
  - **Target Code:** `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`
  - **Human-written Example 1:** `System.out.printf(""\nTotal Deductions: $%.2f"", totalTax);`
  - **Comparison:** Both examples show attention to detail in output formatting, a characteristic more aligned with human-written code. AI-generated code may not consistently apply such detailed formatting.

These comparisons highlight the nuanced differences in variable naming, logic structuring, and output formatting that contribute to the classification of the target code as human-written. The target code's alignment with human-written examples in terms of style and attention to detail supports the model's classification decision.","{'ratings': {'overall': 3, 'conciseness': 3, 'clarity': 4, 'actionability': 3, 'selected_line_useful': 5, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 39, 13, 116000)}"
akara@akara.com,1_RoomRentCalculator.java,"package test;

import java.util.Scanner;

public class RoomRentCalculator {
	private String guest_name;
	private final double price = 900.5;
	private String check_in;
	private String check_out;

    public static void main(String[] args) {
        //CODE HERE
    	RoomRentCalculator n = new RoomRentCalculator();
		Scanner in = new Scanner(System.in);
		System.out.print(""Enter your name: "");
		n.setGuest_name(in.nextLine());
		System.out.print(""Enter check-in date: "");
		n.setCheck_in(in.nextLine());
		System.out.print(""Enter check-out date: "");
		n.setCheck_out(in.nextLine());
		
		System.out.println();
		System.out.println(n.toString());
		
		String[] in_date = n.getCheck_in().split(""-"");
		String[] out_date = n.getCheck_out().split(""-"");
		
		int[] int_in = new int[3];
		int[] int_out = new int[3];
		
		for(int i = 0; i < in_date.length; i++) {
			int_in[i] = Integer.parseInt(in_date[i]);
			int_out[i] = Integer.parseInt(out_date[i]);
		}
		
		int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);
		System.out.println(""Number of Nights: "" + night);
		
		double total = night * n.getPrice();
		System.out.println(""Total Rent: "" + String.format(""%.2f"", total));
    }
    
    public String getGuest_name() {
		return guest_name;
	}

	public void setGuest_name(String guest_name) {
		this.guest_name = guest_name;
	}

	public double getPrice() {
		return price;
	}

	public String getCheck_in() {
		return check_in;
	}

	public void setCheck_in(String check_in) {
		this.check_in = check_in;
	}

	public String getCheck_out() {
		return check_out;
	}

	public void setCheck_out(String check_out) {
		this.check_out = check_out;
	}

	public String toString() {
    	String str = ""** No STAR Hotel **\n== Hotel Invoice ==\n"";
    	str += ""Guest Name: "" + guest_name +
    			""\nCheck-in Date: "" + check_in +
    			""\nCheck-out Date: "" + check_out;
    	return str;
    }

    // Helper method to calculate the number of days between two dates
    public static int calculateDaysBetweenDates(int startYear, int startMonth, int startDay,
                                                int endYear, int endMonth, int endDay) {
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int totalDays = 0;

        // Adjust for leap years
        if (isLeapYear(startYear)) {
            daysInMonth[1] = 29; // February has 29 days in a leap year
        }

        // If start and end are in the same year
        if (startYear == endYear) {
            if (startMonth == endMonth) {
                // Same month
                totalDays = endDay - startDay;
            } else {
                // Different months
                totalDays += daysInMonth[startMonth - 1] - startDay; // Remaining days in the start month
                for (int month = startMonth; month < endMonth - 1; month++) {
                    totalDays += daysInMonth[month];
                }
                totalDays += endDay; // Days in the end month
            }
        } else {
            // Across different years
            // Days remaining in the start year
            totalDays += daysInMonth[startMonth - 1] - startDay;
            for (int month = startMonth; month < 12; month++) {
                totalDays += daysInMonth[month];
            }

            // Add days for the years in between
            for (int year = startYear + 1; year < endYear; year++) {
                totalDays += isLeapYear(year) ? 366 : 365;
            }

            // Add days for the end year
            if (isLeapYear(endYear)) {
                daysInMonth[1] = 29;
            } else {
                daysInMonth[1] = 28;
            }
            for (int month = 0; month < endMonth - 1; month++) {
                totalDays += daysInMonth[month];
            }
            totalDays += endDay;
        }

        return totalDays;
    }
    // Helper method to check if a year is a leap year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",Gemini,1.46358605235264E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors, including the presence of a class with private fields and associated getter/setter methods, a `toString()` method for formatted output, helper methods (`calculateDaysBetweenDates`, `isLeapYear`) designed for code reusability and organization, and date handling logic using string splitting and integer parsing.  The code also lacks the straightforward, concise style often observed in ChatGPT-generated code for basic programming exercises, showing a greater emphasis on code structure and object-oriented principles.  The use of comments is also more aligned with human practices, focusing on explaining specific sections or the purpose of helper functions rather than providing step-by-step instructions. This style suggests code written for maintainability and reusability, which is more characteristic of human developers.  Additionally, the complexity of the date calculation, which handles leap years and different year/month combinations, suggests a more deliberate, human-driven approach compared to simpler calculations often seen in AI-generated code.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `private String guest_name;`
    - **Explanation:**  Declaring private member variables is a standard practice in object-oriented programming for encapsulation. ChatGPT often generates simpler code structures, sometimes neglecting best practices like data hiding.

2. **Key Code Line:** `public String toString() { ... }`
    - **Explanation:** The inclusion of a `toString()` method demonstrates an understanding of object-oriented principles and a focus on well-formatted output, which is more typical of human-written code.  ChatGPT rarely generates `toString()` methods unless explicitly asked for a formatted string representation.

3. **Key Code Line:** `int night = calculateDaysBetweenDates(int_in[0], int_in[1], int_in[2], int_out[0], int_out[1], int_out[2]);`
    - **Explanation:** This line demonstrates the use of a helper function, indicating a focus on code organization and reusability, a practice often emphasized by human programmers. ChatGPT tends to write more monolithic code blocks.

4. **Key Code Line:** `// Helper method to calculate the number of days between two dates`
    - **Explanation:**  This comment style, describing the purpose of a helper method, aligns with human documentation practices.  ChatGPT-generated comments often describe the *how* rather than the *why*.

5. **Key Code Line:** `return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);`  (from `isLeapYear` method)
    - **Explanation:** This concise and accurate leap year calculation indicates a developer's understanding of the algorithm and demonstrates an efficient coding style.

**Comparison to Previous Examples**

1. **Object-Oriented Structure:** The target code defines a class with private fields and methods (e.g., `private String guest_name;`, `public String getGuest_name()`). This contrasts with the ChatGPT examples, which primarily contain code within the `main` method.
    - **Target Code:**
    ```java
    private String guest_name;
    public String getGuest_name() {
        return guest_name;
    }
    ```
    - **ChatGPT Example 1 (0_Exercise02_21.java):**  Lacks a class definition with private members and methods, placing all code within the `main` method.

2. **Helper Methods:** The target code uses helper methods like `calculateDaysBetweenDates` and `isLeapYear`. This approach improves code readability and reusability, which is more typical of human developers. ChatGPT examples generally don't implement helper methods unless the problem explicitly requires modular design.
    - **Target Code:**
    ```java
    public static int calculateDaysBetweenDates(...) { ... }
    ```
    - **ChatGPT Example 2 (0_Exercise05_21.java):** Performs the calculation directly within the `main` method's loop, without separate helper methods.

3. **Comments:** The target code's comments explain the purpose of code sections (e.g., ""// Helper method..."").  ChatGPT examples sometimes overuse comments to explain obvious steps.
    - **Target Code:**
    ```java
    // Helper method to calculate the number of days between two dates
    ```
    - **ChatGPT Example 1 (0_Exercise02_21.java):**  Comments explain basic operations, like ""// Calculate future investment value.""

4. **Code Complexity:** The target code implements more complex logic for date calculations, including leap year handling. ChatGPT examples often tackle simpler exercises, resulting in less intricate code. This greater level of complexity reflects a more deliberate approach to algorithm design.

5. **Human-Written Example Similarity (1_Exercise08_12.java):**  The human-written example (1_Exercise08_12.java) demonstrates similar characteristics, such as utilizing a helper method (`calcTax`) and defining data structures (arrays `rates`, `brackets`). This reinforces the model's classification of the target code as human-written due to shared structural and organizational features. Both the target code and this human example prioritize code clarity and maintainability through modular design.  This similarity further strengthens the model's classification.


The combination of these factors contributes to the model's high confidence in classifying the target source code as human-written. It exhibits characteristics indicative of human programming practices, differentiating it from the patterns typically found in ChatGPT-generated code.","{'ratings': {'overall': 1, 'conciseness': 2, 'clarity': 5, 'actionability': 2, 'selected_line_useful': 1, 'additional_code_useful': 1}, 'feedback_additional': 'It seems to sugguest lines from the code template.', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 49, 8, 599000)}"
akara@akara.com,5_WordProcessor.java,"import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;

public class WordProcessor {

  /**
   * This method will accept a file name as a parameter, read the textual content in a given file, 
   * and return these words in a list of strings. 
   */
  public static ArrayList<String> readFile(String file) throws FileNotFoundException {
    ArrayList<String> words = new ArrayList<String>();
    Scanner in = new Scanner(new File(file));
    while(in.hasNext()) {
      String word = in.next();
      words.add(word);
    }
    return words;
  }

  /**
   * This method will accept a list of strings and print out all the words separated by commas in one line.  
   */
  public static void printWords(ArrayList<String> words) {
    System.out.println(Arrays.toString(words.toArray()));
  }

  /**
   * This method implements the Insertion Sort algorithm to sort a list of strings in descending order. 
   * The method also prints the list after each pass of the sorting algorithm.
   */
  public static void sort(ArrayList<String> a) {
    // Insertion Sort in descending order (b comes before a)
    for (int i = 1; i < a.size(); i++) {
      String current = a.get(i);
      int j = i - 1;

      // Move elements of a[0..i-1] that are greater than current to one position ahead
      while (j >= 0 && a.get(j).compareTo(current) < 0) {
        a.set(j + 1, a.get(j));
        j = j - 1;
      }
      a.set(j + 1, current);
      
      // Print the list after each pass
      System.out.println(""Pass "" + i + "": "" + a);
    }
  }

  /**
   * This method will accept a list of strings and remove all duplicates from the list.
   * The result list may not have the same ordering as the original one.
   */
  public static void removeDuplicate(ArrayList<String> a) {
    // Use a TreeSet to remove duplicates while maintaining the order
    TreeMap<String, Boolean> map = new TreeMap<>();
    for (String word : a) {
      map.put(word, true);
    }
    a.clear();
    a.addAll(map.keySet());
  }
}",Gemini,99.99998807907100,1.14324990363457E-05,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target source code as ChatGPT-generated due to several factors including its stylistic choices, method structure, and overall simplicity. The extensive use of comments explaining basic functionalities, the straightforward implementation of insertion sort with print statements after each pass, and the somewhat naive approach to duplicate removal (using a TreeMap then adding back to the ArrayList) point towards a beginner-level programmer, or a large language model attempting to emulate one.  The structure of each method appears designed to fulfill a very specific prompt, like ""write a method to read words from a file and return them in a list"" or ""write a method to remove duplicates."" This aligns with the way users often interact with code generation models. The lack of any advanced coding practices or optimized algorithms also contributes to this classification. 

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1:** `public static ArrayList<String> readFile(String file) throws FileNotFoundException {`
    - **Explanation:** The simplicity of this file reading method, returning an ArrayList, combined with the very basic exception handling (simply throwing the exception up the chain), indicates a fundamental approach often seen in ChatGPT-generated code.  ChatGPT often favors basic structures and commonly used data structures without necessarily considering efficiency or more robust error handling.

- **Key Code Line 2:** `System.out.println(Arrays.toString(words.toArray()));`
    - **Explanation:**  Converting the ArrayList to an array just to print it using `Arrays.toString` is not the most elegant or efficient way to print the contents of an ArrayList. This somewhat roundabout way of achieving a simple task suggests AI-generated code, which sometimes prioritize functional correctness over optimal implementation.

- **Key Code Line 3:**  `// Print the list after each pass` followed by `System.out.println(""Pass "" + i + "": "" + a);`
    - **Explanation:**  Printing the list after each pass in an insertion sort is usually done for demonstration or educational purposes.  ChatGPT frequently includes such pedagogical elements, as if explicitly trying to explain the algorithm's steps.  Human programmers would rarely include this unless specifically instructed to do so.

- **Key Code Line 4:**  `public static void sort(ArrayList<String> a) {` followed by a basic insertion sort implementation.
    - **Explanation:** While insertion sort is a valid sorting algorithm, its basic nature, especially when presented without any context or justification for its use, is another hint.  ChatGPT tends to generate common and straightforward algorithms, especially when no specific performance requirements are mentioned in a prompt.

- **Key Code Line 5:** `TreeMap<String, Boolean> map = new TreeMap<>();` in the `removeDuplicate` method.
    - **Explanation:**  Using a TreeMap to remove duplicates, then converting back to an ArrayList, indicates a slightly suboptimal approach.  While it works, it's not the most efficient way to achieve this functionality.  A HashSet would be a more typical choice for a human programmer. This roundabout approach further suggests AI generation.


**Comparison to Previous Examples**

- **Target Code vs. ChatGPT-Generated Example 1 (0_WordDisplay.java):** Both use ArrayList and basic file I/O operations with simple try-catch blocks. They also share similar formatting and commenting style, focusing on explaining simple operations.  For example, both use `System.out.println()` for basic output.

```java
// Target Code
try (Scanner in = new Scanner(new File(file))) {
    // ...
} catch (FileNotFoundException e) {
    throw e;
}

// ChatGPT-Generated Example 1
try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
    // ...
} catch (IOException e) {
    System.out.println(""Error reading file: "" + e.getMessage());
    return;
}
```

- **Target Code vs. ChatGPT-Generated Example 2 (0_Exercise21_07.java):** Both demonstrate simple code structures and include explanatory comments. Both examples utilize basic data structures like `Map` and `ArrayList`. The use of `TreeMap` in both cases, along with the somewhat verbose way of adding elements, is also notable.

```java
// Target Code
TreeMap<String, Boolean> map = new TreeMap<>();
for (String word : a) {
    map.put(word, true);
}

// ChatGPT-Generated Example 2
Map<String, Integer> map = new TreeMap<>();
// ... code for populating the map ...
```


- **Target Code vs. Human-Written Examples (1_Exercise12_21.java and 1_Exercise21_07.java):** The human-written examples demonstrate more sophisticated coding practices. They employ features like packages (`package ch_12.exercise12_21;`), more focused error handling, and more concise code. For instance, the human-written example `1_Exercise12_21.java` utilizes a `compareTo` method directly within its logic, as opposed to the more explicit sorting in the target code.

```java
// Target Code (Explicit Insertion Sort)
while (j >= 0 && a.get(j).compareTo(current) < 0) { 
    // ...
}

// Human-Written Example (1_Exercise12_21.java - Using compareTo directly)
static boolean isIncreasingOrder(String s1, String s2) {
    return s1.compareTo(s2) < 0;
}
```

The differences in complexity and coding style between the target code and the human-written examples reinforce the model's classification of the target code as ChatGPT-generated. The target code exhibits patterns and stylistic elements consistent with ChatGPT's output, aligning more closely with the provided AI-generated examples than the human-written ones.","{'ratings': {'overall': 5, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 4, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 55, 26, 449000)}"
akara@akara.com,4_MUGroceryStore.java,"import java.util.Scanner;
import java.util.Arrays;

public class MUGroceryStore {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Input and display item prices
        double[] itemPrices = new double[5]; // Array to store the prices of 5 items

        // Input prices for the items
        for (int i = 0; i < 5; i++) {
            System.out.print(""Enter price for item "" + (i + 1) + "": "");
            itemPrices[i] = scanner.nextDouble();
        }

        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));

        // Task 2: Calculate and display average price
        double totalPrice = 0;
        for (double price : itemPrices) {
            totalPrice += price;
        }
        double averagePrice = totalPrice / itemPrices.length; // Compute the average
        System.out.printf(""Average Price: %.2f\n"", averagePrice);

        // Task 3: Assign and display grades for each item's price
        System.out.println(""Grades:"");
        for (int i = 0; i < itemPrices.length; i++) {
            char grade = 'F'; // Default grade

            // Assign grades based on price
            if (itemPrices[i] < 15) {
                grade = 'A';
            } else if (itemPrices[i] >= 15 && itemPrices[i] < 20) {
                grade = 'B';
            } else if (itemPrices[i] >= 20 && itemPrices[i] < 25) {
                grade = 'C';
            } else if (itemPrices[i] >= 25 && itemPrices[i] < 30) {
                grade = 'D';
            }

            // Display the price and corresponding grade
            System.out.printf(""Item %d ($%.2f): %c\n"", (i + 1), itemPrices[i], grade);
        }

        // Close scanner
        scanner.close();
    }
}",Gemini,100.0,1.70898530882369E-06,🤖 ChatGPT-generated,"**Overview**

The model likely classified the target code as ChatGPT-generated due to its highly structured and formulaic nature, typical of code generated by large language models.  The code exhibits a clear, step-by-step approach to solving a simple problem, breaking it down into numbered tasks with explanatory comments. This methodical, almost pedagogical, style is frequently observed in ChatGPT outputs.  The code uses basic Java features and common data structures like arrays and loops, without employing more sophisticated or nuanced approaches that a human programmer might favor. The comments are also somewhat verbose and descriptive, echoing the way ChatGPT often explains its generated code.  The use of `Arrays.toString()` for displaying the array, while functional, is less common in human-written code where a loop might be preferred for more customized output. The grading logic is also very straightforward and directly translates requirements into if-else statements. Lastly, the inclusion of `scanner.close()` while good practice, can also be a characteristic of ChatGPT-generated code, as it often includes resource cleanup.

---

**Highlight and Explain Key Code Lines**

1. **Key Code Line:** `// Task 1: Input and display item prices`
    - **Explanation:** This type of numbered task comment is characteristic of ChatGPT.  It often structures its code generation process in this way, outlining steps as if presenting a tutorial.  Human code is less likely to have such explicit step-by-step commentary.
2. **Key Code Line:** `double[] itemPrices = new double[5]; // Array to store the prices of 5 items`
    - **Explanation:**  While perfectly valid, the comment here is somewhat redundant.  A human programmer would likely assume the purpose of the array is clear from its declaration and context. ChatGPT often adds overly descriptive comments to generated code.
3. **Key Code Line:** `System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));`
    - **Explanation:**  Using `Arrays.toString()` for output is a quick way to display array contents. Human programmers might more often opt for a loop to format the output more precisely or integrate it into a larger output string.
4. **Key Code Line:** `double averagePrice = totalPrice / itemPrices.length; // Compute the average`
    - **Explanation:** Again, the comment here is very basic. Human programmers rarely comment on such simple calculations. The explicitness suggests automated code generation.
5. **Key Code Line:** `char grade = 'F'; // Default grade`
    - **Explanation:** While setting a default value is good practice, the comment stating it's a ""default grade"" is somewhat verbose. A human programmer would likely find this obvious from the code logic.


**Comparison to Previous Examples**

1. **Similarity to ChatGPT Example 1 (CDValue.java):** Both the target code and this example exhibit a step-by-step structure with clear explanations in comments. Both also heavily rely on `System.out.print` statements for user interaction.
    - **Target Code:** 
    ```java
    // Task 2: Calculate and display average price
    ```
    - **ChatGPT Example 1:**
    ```java
    // Prompt the user to enter the initial amount, annual percentage yield, and number of months
    ```

2. **Similarity to ChatGPT Example 2 (AssignGrades.java):** Both utilize arrays and loops to process data and produce output based on specific conditions. The commenting style, explaining the purpose of each block of code, is also similar.
    - **Target Code:**
    ```java
    // Assign grades based on price
    if (itemPrices[i] < 15) {
        grade = 'A';
     // ... more if-else statements
    ```
    - **ChatGPT Example 2:**
    ```java
    // Assign grades based on the scheme
    for (int i = 0; i < numStudents; i++) {
        char grade;
        if (scores[i] >= best - 10) {
            grade = 'A';
        // ... more if-else statements
    ```

3. **Difference from Human-Written Example 1 (Exercise03_18.java):** The human-written example uses fewer comments, focusing on functionality rather than explicit explanation. The code is less structured and jumps straight into input and calculations.
    - **Target Code:**
    ```java
        // Display the entered prices
        System.out.println(""Item Prices: "" + Arrays.toString(itemPrices));
    ```
    - **Human-Written Example 1:**
    ```java
        if (weight > 50) {
            System.out.println(""The package cannot be shipped."");
            in.close();
            return;
        } // ... more if-else statements
    ```

4. **Difference from Human-Written Example 2 (Exercise05_30.java):** The human-written example exhibits a more concise coding style with less verbose comments. The use of empty lines for spacing also differs from the dense formatting of the target code.
    - **Target Code:**
    ```java
    double totalPrice = 0;
    for (double price : itemPrices) {
        totalPrice += price;
    }
    ```
    - **Human-Written Example 2:**
    ```java

        for (int i = 1; i <= numberOfMonths; i++) {


            total = (investment + total) * (1 + (interestRate / 12));

        }
    ```

These similarities and differences reinforce the model's classification of the target code as ChatGPT-generated. The target code shares several characteristics with the ChatGPT-generated examples, including verbose commenting, structured task breakdown, and straightforward coding style. It contrasts with the human-written examples, which tend to be more concise and less explicitly explanatory.","{'ratings': {'overall': 4, 'conciseness': 3, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 53, 50, 551000)}"
akara@akara.com,3_MUTheater.java,"package test;

public class MUTheater {

	public static void main(String[] args) {
		int[][] seat = new int[10][15];
		
		System.out.println(""==MUTheater Seat Layout==""+""\n"");
		
		int TotalAvailableSeat = 0;
		int TotalReservedSeat = 0;
		
		for(int i = 0;i<seat.length;i++) {
			System.out.print(""Row ""+(i+1)+"": "");
			for(int j = 0;j<seat[i].length;j++) {
				System.out.print(""S""+(j+1)+"""");
				if(j%2==0) {
					System.out.print(""-A "");
					TotalAvailableSeat++;
				}else {
					System.out.print(""-R "");
					TotalReservedSeat++;
				}
			}
			
			
			System.out.println("" "");
			
		}
		System.out.println(""== Seat Counts==""+""\n"");
		System.out.println(""Total Reserved Seats: ""+TotalReservedSeat);
		System.out.println(""Total Available Seats: ""+TotalAvailableSeat);
		

	}

}",Gemini,1.45769103454541E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to its specific formatting and structure, which deviates from the commonly observed patterns in ChatGPT-generated code.  The code lacks the explicit import statements often seen in generated examples, and its variable naming conventions (e.g., `TotalAvailableSeat`) suggest a human touch. The code also demonstrates specific output formatting and nested looping structures indicative of human-designed output arrangements.  The relative simplicity of the program, combined with the direct array manipulation without any complex data structures or algorithms, also contributes to the human-written classification. Finally, the ""seat reservation"" logic and its output presentation are quite specific and unlikely to be generated generically by a language model.

---

**Highlight and Explain Key Code Lines**

- **Key Code Line 1**: `package test;`
    - **Explanation**: This line declares a package name, a common practice in organized human-written Java projects.  ChatGPT tends to omit package declarations in smaller code snippets.

- **Key Code Line 2**: `int[][] seat = new int[10][15];`
    - **Explanation**: This line directly initializes a 2D array with specific dimensions, representing a theater layout. This context-specific initialization suggests human design.

- **Key Code Line 3**: `System.out.print(""Row ""+(i+1)+"": "");`
    - **Explanation**:  This code line demonstrates careful formatting of the output, including string concatenation and dynamic row numbering, typical of human-crafted output displays.

- **Key Code Line 4**: `if(j%2==0) { ... }else { ... }`
    - **Explanation**: The use of modulo operator for alternating seat assignment (A for available, R for reserved) suggests human-designed logic for a specific scenario.  This level of targeted functionality is less common in generally generated examples.

- **Key Code Line 5**: `System.out.println(""Total Available Seats: ""+TotalAvailableSeat);`
    - **Explanation**: Similar to Key Code Line 3, this illustrates explicit output formatting, indicating human intent to present information in a specific way.  

**Comparison to Previous Examples**

1. **Import Statements**:  The target code lacks import statements, unlike the ChatGPT-generated examples.  Both Example 1 (ChatGPT) and Example 2 (ChatGPT) include imports (e.g., `import java.util.Scanner;`, `import java.io.File;`).  This absence of imports in the target code likely contributes to its human-written classification.  Human-written examples like `1_p03644.java` and `1_p03102.java` also feature imports, but their presence in the generated examples and absence in the target code when coupled with other features becomes a distinguishing factor.

    * **Target Code:** 
    ```java
    // No imports
    ```
    * **ChatGPT Example 1 (0_Exercise21_08.java):**
    ```java
    import java.io.File;
    import java.io.FileNotFoundException;
    // ...more imports
    ```

2. **Variable Naming**: The target code utilizes descriptive variable names (e.g., `TotalAvailableSeat`).  ChatGPT-generated examples often use more concise or generic names (e.g., `number`, `binaryString` in `0_Exercise08_11.java`). The human-written examples also use reasonably descriptive names like `count`, `total` in `1_p03102.java` though not as detailed as the target code.

    * **Target Code:**
    ```java
    int TotalAvailableSeat = 0;
    ```
    * **ChatGPT Example 2 (0_Exercise08_11.java):**
    ```java
    int number = input.nextInt();
    String binaryString = ...;
    ```

3. **Output Formatting**: The target code focuses on formatted output for a specific visual layout (theater seating). This is different from the functionality-driven outputs of the ChatGPT examples (e.g., printing word counts, displaying heads/tails).  Human-written examples might also have formatted output, but the target code's formatting combined with its specific purpose (theater layout display) differentiates it.

    * **Target Code:**
    ```java
    System.out.print(""Row ""+(i+1)+"": "");
    System.out.print(""S""+(j+1)+"""");
    System.out.print(""-A ""); // or ""-R ""
    ```
    * **ChatGPT Example 2 (0_Exercise08_11.java):**
    ```java
    System.out.print(""H ""); // Heads
    System.out.print(""T ""); // Tails
    ```

4. **Simple Data Structures**: The target code uses basic arrays, while ChatGPT-generated examples sometimes incorporate more complex data structures (e.g., `HashMap` in `0_Exercise21_08.java`). Both human-written examples also employ simpler data structures (arrays in `1_p03102.java` and implicit use through `Scanner` in `1_p03644.java`), supporting the target's human-written classification.

5. **Specific Logic**: The target code's logic revolves around a specific, narrow use case (theater seating). ChatGPT-generated examples tend to implement more generic algorithms or functionalities. Human-written examples might also have specific logic, however, the target code's very particular domain further strengthens the human-written categorization.

In summary, the target code's combination of simple structure, domain-specific logic, and human-like formatting cues aligns more with patterns observed in human-written code and contrasts with the characteristics often found in code generated by ChatGPT. This difference supports the model's classification of the target code as human-written.","{'ratings': {'overall': 5, 'conciseness': 5, 'clarity': 5, 'actionability': 5, 'selected_line_useful': 5, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 52, 21, 85000)}"
akara@akara.com,2_CoffeeShopBilling.java,"package evaluation;

import java.util.Scanner;

public class CoffeeShopBilling {
	static String Customer_Name;
	static String Coffee;
	static int Number;
	static int Price;

	
	public static void main(String[] args) {
		Scanner Name = new Scanner(System.in);
		
		Customer_Name = Name.nextLine();
		Coffee = Name.nextLine();
		Number = Name.nextInt();
		
		
		if(Coffee.equals(""Espresso"")){
			Price = 50;
		}else if(Coffee.equals(""Latte"")) {
			Price = 70;
		}else if(Coffee.equals(""Cappuccino"")) {
			Price = 60;
		}else {
			System.out.println(""Don't have this menu"");
		}
		
		double Total_Price = Price * Number;
		
	    System.out.println(""== Welcome to ICT Coffee Shop ==\n"");
	    System.out.println(""** Billing **\n""
	    		+ ""Customer Name: "" + Customer_Name + ""\nCoffee Type: ""+ Coffee + ""\nNumber of Cups: "" + Number 
	    		+ ""\nTotalPrice: "" + String.format(""%.0f"", Total_Price) + "" Baht"");
	    System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");
	    if(Number > 5) {
			Total_Price = Total_Price-(Total_Price*0.1);
		}
	    System.out.println(""Total Cost: "" + String.format(""%.0f"", Total_Price)+ "" Baht"");
	}

}",Gemini,1.48404479816122E-06,100.0,👩🏻‍💻 Human,"**Overview**

The model likely classified the target code as human-written due to several factors:

* **Variable naming conventions:** The code uses a mix of camelCase and snake_case, which, while not strictly conventional, is more commonly seen in human-written code where stylistic consistency may vary.  ChatGPT tends to be more consistent with naming.
* **Lack of explicit imports:**  The code only imports `java.util.Scanner`, suggesting a smaller, more focused program, characteristic of beginner or exercise code written by humans. ChatGPT often includes imports even if they are not strictly necessary.
* **Simple conditional logic:**  The `if/else if` structure is straightforward and addresses a specific scenario without extensive error handling or input validation. ChatGPT examples tend towards more robust input handling and error management.
* **String formatting with printf and string concatenation:** The code uses a mix of `printf` for formatted output and string concatenation, a pattern less frequently seen in consistent ChatGPT outputs.
* **Use of static variables:** Declaring static variables like `Customer_Name`, `Coffee`, `Number`, and `Price` outside the main method is a practice less favored in modern coding practices and not as frequently observed in ChatGPT-generated code.


---

**Highlight and Explain Key Code Lines**

**1. `static String Customer_Name;`**

* **Why it indicates Human-written patterns:** Declaring static variables outside of methods is a practice often seen in beginner or less structured human-written code.  While valid Java, it's not generally considered best practice, and ChatGPT tends to avoid this, opting for local variables or instance variables within a class.

**2. `if(Coffee.equals(""Espresso"")){`**

* **Why it indicates Human-written patterns:** This simple conditional logic without extensive input validation or error handling suggests human-written code.  ChatGPT examples often include additional checks for null values or invalid input types.


**3.  `double Total_Price = Price * Number;`**

* **Why it indicates Human-written patterns:** The variable naming `Total_Price` is inconsistent with Java conventions (which would suggest `totalPrice`). This kind of inconsistency is more characteristic of human-written code.

**4. `System.out.println(""Discount Applied: ""+String.format(""%.0f"", Total_Price*0.1)+ "" Baht"");`**

* **Why it indicates Human-written patterns:** The mixing of string concatenation and `String.format` within the same `println` statement is somewhat less common in the consistent output of ChatGPT. This blend suggests human intervention or a less optimized approach, which are more frequently observed in human-written examples.

**5. `if(Number > 5) { Total_Price = Total_Price-(Total_Price*0.1); }`**

* **Why it indicates Human-written patterns:** This direct manipulation of `Total_Price` without using a temporary variable or more descriptive calculation (e.g., `Total_Price *= 0.9;`) is typical of human-written code, particularly for simpler tasks.  ChatGPT is more likely to use intermediate variables or more concise expressions.


**Comparison to Previous Examples**


* **Static Variables (Target vs. Human Example 1):**

   ```java
   // Target Code
   static String Customer_Name; 

   // Human Example 1 (No static variables within the class body)
   Scanner in = new Scanner(System.in);
   String name = in.next();
   ```

   The human example uses local variables within the `main` method. While static variables are not inherently indicative of human code, their presence in the target aligns more with typical human behavior, especially at a beginner level, than with ChatGPT's typical outputs.


* **Simple Conditional Logic (Target vs. ChatGPT Example 1):**

   ```java
   // Target Code
   if(Coffee.equals(""Espresso"")){
       Price = 50;
   } else if (...) { ... }

   // ChatGPT Example 1 (more complex example; for illustrative purposes)
       for (double annualInterestRate = 5.0; annualInterestRate <= 8.0; annualInterestRate += 0.125) {
           // Complex calculations
       }
   ```
   The target code's simple `if/else` structure contrasts with the more complex loops and calculations often seen in ChatGPT-generated code like Example 1.  The ChatGPT example demonstrates a more systematic and thorough approach, common in its output.


* **Variable Naming (Target vs. ChatGPT Example 2):**

   ```java
   // Target Code
   static int Number;

   // ChatGPT Example 2 
   int numberOfYears = scanner.nextInt();
   ```

   The target code's use of `Number` versus `numberOfYears` in the ChatGPT example shows a difference in naming style. ChatGPT consistently uses more descriptive and conventionally formatted variable names, whereas the target exhibits less rigorous adherence to naming conventions.

These comparisons highlight key differences between the target code and the provided examples.  The target code's characteristics more closely resemble patterns observed in the simpler, less structured style of the human-written examples than the more systematic and consistent style of the ChatGPT-generated examples, supporting the model's classification.","{'ratings': {'overall': 3, 'conciseness': 4, 'clarity': 4, 'actionability': 4, 'selected_line_useful': 3, 'additional_code_useful': 1}, 'feedback_additional': '', 'submitted_at': datetime.datetime(2025, 4, 3, 6, 50, 42, 531000)}"